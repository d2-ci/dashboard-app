{"version":3,"sources":["../../../src/api/legendSets.js","../../../src/assets/ArrowUpwardIcon.js","../../../src/assets/ArrowDownwardIcon.js","../../../src/ContextualMenu.js","../../../src/ChartPlugin.js","../../../src/PivotPlugin.js","../../../src/modules/analytics.js","../../../src/api/analytics.js","../../../src/modules/options.js","../../../src/modules/fetchData.js","../../../src/modules/getRequestOptions.js","../../../src/styles/VisualizationPlugin.style.js","../../../src/VisualizationPlugin.js"],"names":["legendSetsQuery","resource","params","ids","fields","filter","ArrowUpwardIcon","style","width","height","xmlns","viewBox","d","fill","PropTypes","object","ArrowDownwardIcon","ContextualMenu","onClick","engine","useDataEngine","ouData","setOuData","useState","subLevelData","setSubLevelData","doFetchOuData","useCallback","async","apiFetchOrganisationUnit","useEffect","config","orgUnit","doFetch","levelData","levelId","ouLevels","item","menuItemStyle","display","minWidth","dense","label","i18n","icon","ou","id","level","orgunit","name","path","func","ChartPlugin","animation","defaultAnimation","canvasRef","useRef","renderVisualization","visualizationConfig","createVisualization","legendSets","isSingleValue","visualization","onChartGenerated","sourceHeight","sourceWidth","responses","renderCounter","ref","filters","Function","prototype","extraOptions","PivotPlugin","onToggleContextualMenu","data","getRelativePeriodTypeUsed","periodItems","getRelativePeriodsOptionsById","period","periodId","apiFetchAnalytics","dataEngine","options","analyticsEngine","Analytics","req","rawResponse","prepareRequestsForRelativeDays","currentDay","yearlySeriesLabels","periodDates","yearlySeriesIds","yearlySeriesRes","isFeb29","currentMonth","year","isLeapYear","Date","getDate","prepareRequestsForRelativeWeeks","referencePeriodYear","referencePeriodReq","referenceWeekPeriod","referencePeriodRes","referenceWeekYear","referenceWeekNumber","referenceWeekYearDelta","weekPeriods","periods","weekPeriodsReq","weekPeriodsRes","seenYears","periodDate","axes","requestable","savable","defaultValue","colorSet","cumulativeValues","hideEmptyRowItems","legend","noSpaceBetweenColumns","percentStackedValues","regressionType","showData","aggregationType","completedOnly","hideSubtitle","hideTitle","sortOrder","subtitle","title","series","fontStyle","colTotals","colSubTotals","rowTotals","rowSubTotals","showDimensionLabels","hideEmptyColumns","hideEmptyRows","skipRounding","numberType","showHierarchy","legendSet","legendDisplayStrategy","legendDisplayStyle","displayDensity","fontSize","digitGroupSeparator","approvalLevel","reportingPeriod","organisationUnit","parentOrganisationUnit","grandParentOrganisationUnit","regression","cumulative","measureCriteria","topLimit","getOptionsForRequest","Object","entry","fetchData","userSettings","map","option","props","ouIds","ouPath","getRequestOptions","dashboard","forDashboard","isYearOverYear","yearlySeriesReq","now","layoutGetDimensionItems","relativeWeeksData","relativeDaysData","requests","list","Promise","res","apiFetchAnalyticsForYearOverYear","peItems","relativePeriodTypeUsed","periodKeyAxisIndexMatrix","periodGroups","a","b","periodGroup","matchGroups","month","day","xAxisIndexForPeriod","periodKeys","indexForFeb28","periodKey","test","week","indexForW2","indexForPrevWeekInYear","index","Array","length","computeYoYMatrix","periodKeyAxisIndexMap","xAxisLabels","computeGenericPeriodNamesFromMatrix","metadata","out","genericPeriodNames","computeGenericPeriodNames","yearlySeries","backdrop","position","top","left","backgroundColor","VisualizationPlugin","setOuLevels","fetchResult","setFetchResult","contextualMenuRef","setContextualMenuRef","contextualMenuConfig","setContextualMenuConfig","closeContextualMenu","doFetchData","result","onResponsesReceived","doFetchLegendSets","legendSetIds","variables","legendSetsData","apiFetchLegendSets","apiFetchOrganisationUnitLevels","doFetchOuLevels","dxIds","dxId","legendSetId","onLoadingComplete","doFetchAll","error","onError","contextualMenuRect","virtualContextualMenuElement","getBoundingClientRect","onDrill","undefined","createPortal","styles","reference","placement","args","document"],"mappings":"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","file":"static/js/140.decdcf85.chunk.js","sourcesContent":["const legendSetsQuery = {\n    resource: 'legendSets',\n    params: ({ ids }) => ({\n        fields:\n            'id,displayName~rename(name),legends[id,displayName~rename(name),startValue,endValue,color]',\n        filter: `id:in:[${ids.join(',')}]`,\n    }),\n}\n\nexport const apiFetchLegendSets = async (dataEngine, ids) => {\n    const legendSetsData = await dataEngine.query(\n        { legendSets: legendSetsQuery },\n        {\n            variables: { ids },\n        }\n    )\n\n    return legendSetsData.legendSets.legendSets\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ArrowUpwardIcon = ({ style = { width: 18, height: 18 } }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style={style}>\n        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n        <path\n            d=\"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"\n            fill=\"black\"\n        />\n    </svg>\n)\n\nArrowUpwardIcon.propTypes = {\n    style: PropTypes.object,\n}\n\nexport default ArrowUpwardIcon\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ArrowDownwardIcon = ({ style = { width: 18, height: 18 } }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" style={style}>\n        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n        <path\n            d=\"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"\n            fill=\"black\"\n        />\n    </svg>\n)\n\nArrowDownwardIcon.propTypes = {\n    style: PropTypes.object,\n}\n\nexport default ArrowDownwardIcon\n","import React, { useEffect, useState, useCallback } from 'react'\nimport PropTypes from 'prop-types'\n\nimport i18n from '@dhis2/d2-i18n'\nimport { useDataEngine } from '@dhis2/app-runtime'\nimport { Divider, FlyoutMenu, MenuItem } from '@dhis2/ui'\n\nimport ArrowUpwardIcon from './assets/ArrowUpwardIcon'\nimport ArrowDownwardIcon from './assets/ArrowDownwardIcon'\n\nimport { apiFetchOrganisationUnit } from '@dhis2/analytics'\n\nexport const ContextualMenu = ({ config, ouLevels, onClick }) => {\n    const engine = useDataEngine()\n    const [ouData, setOuData] = useState(undefined)\n    const [subLevelData, setSubLevelData] = useState(undefined)\n\n    const lookupLevel = levelId => ouLevels.find(item => item.level === levelId)\n\n    const doFetchOuData = useCallback(\n        async ouId => {\n            const orgUnit = await apiFetchOrganisationUnit(engine, ouId)\n\n            return orgUnit\n        },\n        [engine]\n    )\n\n    useEffect(() => {\n        setOuData(null)\n\n        const doFetch = async () => {\n            const orgUnit = await doFetchOuData(config.ouId)\n\n            setOuData(orgUnit)\n        }\n\n        if (config.ouId) {\n            doFetch()\n        }\n\n        /* eslint-disable-next-line react-hooks/exhaustive-deps */\n    }, [config])\n\n    useEffect(() => {\n        setSubLevelData(null)\n\n        if (ouData?.children.length) {\n            const levelData = lookupLevel(ouData.children[0].level)\n\n            if (levelData) {\n                setSubLevelData(levelData)\n            }\n        }\n\n        /* eslint-disable-next-line react-hooks/exhaustive-deps */\n    }, [ouData])\n\n    const menuItemStyle = {\n        display: 'inline-block',\n        minWidth: 200,\n    }\n\n    return (\n        <FlyoutMenu>\n            {ouData && (\n                <MenuItem dense label={i18n.t('Change org unit')}>\n                    {ouData?.parent && (\n                        <>\n                            <MenuItem\n                                dense\n                                icon={<ArrowUpwardIcon />}\n                                label={\n                                    <span style={menuItemStyle}>\n                                        {ouData.parent.name}\n                                    </span>\n                                }\n                                onClick={() =>\n                                    onClick({\n                                        ou: { id: ouData.parent.id },\n                                    })\n                                }\n                            />\n                            {subLevelData && <Divider />}\n                        </>\n                    )}\n                    {subLevelData && (\n                        <MenuItem\n                            dense\n                            icon={<ArrowDownwardIcon />}\n                            label={\n                                <span style={menuItemStyle}>\n                                    {i18n.t('{{level}} level in {{orgunit}}', {\n                                        level: subLevelData.name,\n                                        orgunit: ouData.name,\n                                    })}\n                                </span>\n                            }\n                            onClick={() =>\n                                onClick({\n                                    ou: {\n                                        id: ouData.id,\n                                        path: ouData.path,\n                                        level: subLevelData.id,\n                                    },\n                                })\n                            }\n                        />\n                    )}\n                </MenuItem>\n            )}\n        </FlyoutMenu>\n    )\n}\n\nContextualMenu.propTypes = {\n    config: PropTypes.object,\n    ouLevels: PropTypes.array,\n    onClick: PropTypes.func,\n}\n\nexport default ContextualMenu\n","import React, { useRef, useCallback, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { isSingleValue, createVisualization } from '@dhis2/analytics'\n\nconst ChartPlugin = ({\n    visualization,\n    responses,\n    extraOptions,\n    legendSets,\n    id: renderCounter,\n    style,\n    onChartGenerated,\n    animation: defaultAnimation,\n}) => {\n    const canvasRef = useRef(undefined)\n\n    const renderVisualization = useCallback(\n        animation => {\n            const visualizationConfig = createVisualization(\n                responses,\n                visualization,\n                canvasRef.current,\n                {\n                    ...extraOptions,\n                    animation,\n                    legendSets,\n                },\n                undefined,\n                undefined,\n                isSingleValue(visualization.type) ? 'dhis' : 'highcharts' // output format\n            )\n\n            if (isSingleValue(visualization.type)) {\n                onChartGenerated(visualizationConfig.visualization)\n            } else {\n                onChartGenerated(\n                    visualizationConfig.visualization.getSVGForExport({\n                        sourceHeight: 768,\n                        sourceWidth: 1024,\n                    })\n                )\n            }\n        },\n        [\n            canvasRef,\n            visualization,\n            onChartGenerated,\n            responses,\n            extraOptions,\n            legendSets,\n        ]\n    )\n\n    useEffect(() => {\n        renderVisualization(defaultAnimation)\n\n        /* eslint-disable-next-line react-hooks/exhaustive-deps */\n    }, [visualization, responses, extraOptions])\n\n    useEffect(() => {\n        renderCounter !== null && renderVisualization(0)\n\n        /* eslint-disable-next-line react-hooks/exhaustive-deps */\n    }, [renderCounter, style])\n\n    return <div ref={canvasRef} style={style} />\n}\n\nChartPlugin.defaultProps = {\n    visualization: {},\n    filters: {},\n    style: {},\n    animation: 200,\n    onChartGenerated: Function.prototype,\n}\n\nChartPlugin.propTypes = {\n    extraOptions: PropTypes.object.isRequired,\n    legendSets: PropTypes.arrayOf(PropTypes.object).isRequired,\n    responses: PropTypes.arrayOf(PropTypes.object).isRequired,\n    visualization: PropTypes.object.isRequired,\n    animation: PropTypes.number,\n    id: PropTypes.number,\n    style: PropTypes.object,\n    onChartGenerated: PropTypes.func,\n}\n\nexport default ChartPlugin\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { PivotTable } from '@dhis2/analytics'\n\nconst PivotPlugin = ({\n    responses,\n    legendSets,\n    visualization,\n    style,\n    id: renderCounter,\n    onToggleContextualMenu,\n}) => {\n    return (\n        <div style={style}>\n            <PivotTable\n                visualization={visualization}\n                data={responses[0].response}\n                legendSets={legendSets}\n                renderCounter={renderCounter}\n                onToggleContextualMenu={onToggleContextualMenu}\n            />\n        </div>\n    )\n}\n\nPivotPlugin.defaultProps = {\n    style: {},\n}\n\nPivotPlugin.propTypes = {\n    legendSets: PropTypes.arrayOf(PropTypes.object).isRequired,\n    responses: PropTypes.arrayOf(PropTypes.object).isRequired,\n    visualization: PropTypes.object.isRequired,\n    id: PropTypes.number,\n    style: PropTypes.object,\n    onToggleContextualMenu: PropTypes.func,\n}\n\nexport default PivotPlugin\n","import { getRelativePeriodsOptionsById, WEEKS, DAYS } from '@dhis2/analytics'\n\nexport const computeYoYMatrix = (responses, relativePeriodTypeUsed) => {\n    const periodGroups = responses.reduce((list, res) => {\n        list.push(res.metaData.dimensions.pe)\n\n        return list\n    }, [])\n\n    if (relativePeriodTypeUsed === DAYS) {\n        periodGroups.sort((a, b) => a[0].substr(-2) - b[0].substr(-2))\n\n        const periodKeyAxisIndexMatrix = periodGroups\n            .shift()\n            .map(periodId => [periodId])\n\n        periodGroups.forEach(periodGroup => {\n            periodGroup.forEach(periodId => {\n                const matchGroups = periodId.match(/(\\d{4})(\\d{2})(\\d{2})/)\n\n                const month = matchGroups[2]\n                const day = matchGroups[3]\n\n                // find same month/day in 1st \"serie\"\n                const xAxisIndexForPeriod = periodKeyAxisIndexMatrix.findIndex(\n                    periodKeys => periodKeys[0].substr(4) === `${month}${day}`\n                )\n\n                if (xAxisIndexForPeriod !== -1) {\n                    periodKeyAxisIndexMatrix[xAxisIndexForPeriod].push(periodId)\n                } else if (month === '02' && day === '29') {\n                    // February 29 special case\n                    // find index for february 28\n                    const indexForFeb28 = periodKeyAxisIndexMatrix.findIndex(\n                        periodKeys =>\n                            periodKeys.findIndex(periodKey =>\n                                /0228$/.test(periodKey)\n                            ) !== -1\n                    )\n\n                    if (indexForFeb28 !== -1) {\n                        periodKeyAxisIndexMatrix.splice(indexForFeb28 + 1, 0, [\n                            periodId,\n                        ])\n                    } else {\n                        periodKeyAxisIndexMatrix.push([periodId])\n                    }\n                } else {\n                    periodKeyAxisIndexMatrix.push([periodId])\n                }\n            })\n        })\n\n        return periodKeyAxisIndexMatrix\n    } else if (relativePeriodTypeUsed === WEEKS) {\n        periodGroups.sort((a, b) => b[0].split('W')[1] - a[0].split('W')[1])\n\n        const periodKeyAxisIndexMatrix = periodGroups\n            .shift()\n            .map(periodId => [periodId])\n\n        periodGroups.forEach(periodGroup => {\n            periodGroup.forEach(periodId => {\n                const [year, week] = periodId.split('W')\n\n                // find week number in 1st \"serie\"\n                const xAxisIndexForPeriod = periodKeyAxisIndexMatrix.findIndex(\n                    periodKeys => periodKeys[0].split('W')[1] === week\n                )\n\n                if (xAxisIndexForPeriod !== -1) {\n                    periodKeyAxisIndexMatrix[xAxisIndexForPeriod].push(periodId)\n                } else if (week === '1') {\n                    const indexForW2 = periodKeyAxisIndexMatrix.findIndex(\n                        periodKeys =>\n                            periodKeys.findIndex(periodKey =>\n                                /W2$/.test(periodKey)\n                            ) !== -1\n                    )\n\n                    if (indexForW2 !== -1) {\n                        periodKeyAxisIndexMatrix[indexForW2].push(periodId)\n                    } else {\n                        periodKeyAxisIndexMatrix.push([periodId])\n                    }\n                } else {\n                    // find the right spot considering also the year\n                    const indexForPrevWeekInYear = periodKeyAxisIndexMatrix.findIndex(\n                        periodKeys =>\n                            periodKeys.findIndex(\n                                periodKey => periodKey === `${year}W${week - 1}`\n                            ) !== -1\n                    )\n\n                    periodKeyAxisIndexMatrix.splice(\n                        indexForPrevWeekInYear + 1,\n                        0,\n                        [periodId]\n                    )\n                }\n            })\n        })\n\n        return periodKeyAxisIndexMatrix\n    } else {\n        const periodKeyAxisIndexMatrix = periodGroups.reduce(\n            (list, periodGroup) => {\n                periodGroup.forEach((periodId, index) => {\n                    list[index].push(periodId)\n                })\n\n                return list\n            },\n            Array.from({ length: periodGroups[0].length }, () => [])\n        )\n\n        return periodKeyAxisIndexMatrix\n    }\n}\n\nexport const computeGenericPeriodNamesFromMatrix = (\n    periodKeyAxisIndexMatrix,\n    relativePeriodTypeUsed\n) => {\n    switch (relativePeriodTypeUsed) {\n        case WEEKS:\n            return (\n                periodKeyAxisIndexMatrix\n                    // remove year, return \"Wnn\"\n                    .map(periodKeys => periodKeys[0].substr(4))\n                    .flat()\n            )\n        case DAYS:\n            return periodKeyAxisIndexMatrix\n                .map(periodKeys =>\n                    // remove year, return \"dd-mm\"\n                    periodKeys[0].substr(4).replace(/(\\d{2})(\\d{2})/, '$2-$1')\n                )\n                .flat()\n    }\n}\n\nexport const computeGenericPeriodNames = responses => {\n    const xAxisRes = responses.reduce((out, res) => {\n        if (out.metaData) {\n            if (\n                res.metaData.dimensions.pe.length >\n                out.metaData.dimensions.pe.length\n            ) {\n                out = res\n            }\n        } else {\n            out = res\n        }\n\n        return out\n    }, {})\n\n    const metadata = xAxisRes.metaData\n\n    return metadata.dimensions.pe.reduce((genericPeriodNames, periodId) => {\n        const name = metadata.items[periodId].name\n\n        // until the day the backend will support this in the API:\n        // trim off the trailing year in the period name\n        // english names should all have the year at the end of the string\n        genericPeriodNames.push(name.replace(/\\s+\\d{4}$/, ''))\n\n        return genericPeriodNames\n    }, [])\n}\n\nexport const getRelativePeriodTypeUsed = periodItems => {\n    if (\n        getRelativePeriodsOptionsById(WEEKS)\n            .getPeriods()\n            .find(period => period.id === periodItems[0].id)\n    ) {\n        return WEEKS\n    } else if (\n        getRelativePeriodsOptionsById(DAYS)\n            .getPeriods()\n            .find(period => period.id === periodItems[0].id)\n    ) {\n        return DAYS\n    }\n}\n","import {\n    Analytics,\n    VIS_TYPE_PIVOT_TABLE,\n    layoutGetDimensionItems,\n    DIMENSION_ID_PERIOD,\n    DAYS,\n    WEEKS,\n} from '@dhis2/analytics'\n\nimport { getRelativePeriodTypeUsed } from '../modules/analytics'\n\nconst periodId = DIMENSION_ID_PERIOD\n\nexport const apiFetchAnalytics = async (dataEngine, visualization, options) => {\n    const analyticsEngine = Analytics.getAnalytics(dataEngine)\n\n    const req = new analyticsEngine.request()\n        .fromVisualization(visualization)\n        .withParameters(options)\n        .withIncludeNumDen(visualization.type === VIS_TYPE_PIVOT_TABLE)\n\n    const rawResponse = await analyticsEngine.aggregate.get(req)\n\n    return [new analyticsEngine.response(rawResponse)]\n}\n\nexport const apiFetchAnalyticsForYearOverYear = async (\n    dataEngine,\n    visualization,\n    options\n) => {\n    const analyticsEngine = Analytics.getAnalytics(dataEngine)\n\n    let yearlySeriesReq = new analyticsEngine.request()\n        .addPeriodDimension(visualization.yearlySeries)\n        .withSkipData(true)\n        .withSkipMeta(false)\n        .withIncludeMetadataDetails(true)\n\n    if (options.relativePeriodDate) {\n        yearlySeriesReq = yearlySeriesReq.withRelativePeriodDate(\n            options.relativePeriodDate\n        )\n    }\n\n    const yearlySeriesRes = await analyticsEngine.aggregate.fetch(\n        yearlySeriesReq\n    )\n\n    const periodDates = []\n    const yearlySeriesLabels = []\n\n    const now = new Date()\n    const currentDay = ('' + now.getDate()).padStart(2, 0)\n    const currentMonth = ('' + (now.getMonth() + 1)).padStart(2, 0)\n\n    const periodItems = layoutGetDimensionItems(visualization, periodId)\n\n    // relative week period in use\n    if (getRelativePeriodTypeUsed(periodItems) === WEEKS) {\n        const relativeWeeksData = await prepareRequestsForRelativeWeeks({\n            analyticsEngine,\n            visualization,\n            options,\n            yearlySeriesRes,\n            currentMonth,\n            currentDay,\n        })\n\n        periodDates.push(...relativeWeeksData.periodDates)\n        yearlySeriesLabels.push(...relativeWeeksData.yearlySeriesLabels)\n    } else if (getRelativePeriodTypeUsed(periodItems) === DAYS) {\n        const relativeDaysData = prepareRequestsForRelativeDays({\n            yearlySeriesRes,\n            currentMonth,\n            currentDay,\n        })\n\n        periodDates.push(...relativeDaysData.periodDates)\n        yearlySeriesLabels.push(...relativeDaysData.yearlySeriesLabels)\n    } else {\n        yearlySeriesRes.metaData.dimensions[periodId]\n            .sort()\n            .reverse()\n            .forEach(year => {\n                yearlySeriesLabels.push(\n                    yearlySeriesRes.metaData.items[year].name\n                )\n\n                periodDates.push(`${year}-${currentMonth}-${currentDay}`)\n            })\n    }\n\n    // request analytics data/metaData for each year in the serie with its own specific relativePeriodDate\n    const requests = periodDates.reduce((list, periodDate) => {\n        const req = new analyticsEngine.request()\n            .fromVisualization(visualization)\n            .withParameters(options)\n            .withRelativePeriodDate(periodDate)\n\n        list.push(analyticsEngine.aggregate.get(req))\n\n        return list\n    }, [])\n\n    return Promise.all(requests).then(responses => ({\n        responses: responses.map(res => new analyticsEngine.response(res)),\n        yearlySeriesLabels,\n    }))\n}\n\nconst prepareRequestsForRelativeDays = ({\n    yearlySeriesRes,\n    currentMonth,\n    currentDay,\n}) => {\n    const yearlySeriesLabels = []\n    const periodDates = []\n\n    const yearlySeriesIds = yearlySeriesRes.metaData.dimensions[periodId]\n        .slice()\n        .sort()\n        .reverse()\n\n    const isFeb29 = currentMonth === '02' && currentDay === '29'\n\n    yearlySeriesIds.forEach(year => {\n        yearlySeriesLabels.push(yearlySeriesRes.metaData.items[year].name)\n\n        const isLeapYear = new Date(year, 1, 29).getDate() === 29\n\n        // 1. check if current date is feb 29\n        // 2. check if current year is NOT a leap year\n        if (isFeb29 && !isLeapYear) {\n            // 3. use feb 28 for that year as relativePeriodDate\n            periodDates.push(`${year}-02-28`)\n        } else {\n            periodDates.push(`${year}-${currentMonth}-${currentDay}`)\n        }\n    })\n\n    return { yearlySeriesLabels, periodDates }\n}\n\n// special handling for when a relative weeks period is selected as category\n// this takes care of data alignment issues between different years when one of the years have 53 weeks\n// and more in general when the returned weeks for different years are not exactly the same range\n// and data points must be \"shifted\" in the right position\n// See https://jira.dhis2.org/browse/DHIS2-9729\nconst prepareRequestsForRelativeWeeks = async ({\n    analyticsEngine,\n    visualization,\n    options,\n    yearlySeriesRes,\n    currentMonth,\n    currentDay,\n}) => {\n    const yearlySeriesLabels = []\n    const periodDates = []\n\n    const yearlySeriesIds = yearlySeriesRes.metaData.dimensions[periodId]\n        .slice()\n        .sort()\n        .reverse()\n\n    // 1. request metadata of last year of the serie (with relativePeriodDate === today)\n    // 2. extract the last week number of the LAST_x_WEEKS period\n    // 3. request metadata for the same week number for each one of the other years of the serie\n    // 3. compute relativePeriodDate for each other year of the serie:\n    //    this is done by adding 1 day to the endDate of the week period obtained above\n    // 4. request analytics data/metaData for each year in the serie with its own specific relativePeriodDate\n    const referencePeriodYear = yearlySeriesIds.shift()\n\n    yearlySeriesLabels.push(\n        yearlySeriesRes.metaData.items[referencePeriodYear].name\n    )\n\n    periodDates.push(`${referencePeriodYear}-${currentMonth}-${currentDay}`)\n\n    // 1. request metadata of last year of the serie (with relativePeriodDate === today)\n    const referencePeriodReq = new analyticsEngine.request()\n        .fromVisualization(visualization)\n        .withParameters(options)\n        .withRelativePeriodDate(\n            `${referencePeriodYear}-${currentMonth}-${currentDay}`\n        )\n        .withSkipData(true)\n        .withSkipMeta(false)\n\n    const referencePeriodRes = await analyticsEngine.aggregate.fetch(\n        referencePeriodReq\n    )\n\n    // 2. extract the last week number of the LAST_x_WEEKS period\n    //    special handling for the week 53 case as not all years have 53 weeks\n    const referenceWeekPeriod = referencePeriodRes.metaData.dimensions[\n        periodId\n    ].pop()\n    const [referenceWeekYear, referenceWeekNumber] = referenceWeekPeriod.split(\n        'W'\n    )\n    const referenceWeekYearDelta = referencePeriodYear - referenceWeekYear\n\n    const weekPeriods = yearlySeriesIds.reduce((periods, year) => {\n        yearlySeriesLabels.push(yearlySeriesRes.metaData.items[year].name)\n\n        periods.push(`${year - referenceWeekYearDelta}W${referenceWeekNumber}`)\n\n        // edge case for week 53, not all years have it, so request also week 52\n        if (referenceWeekNumber === '53') {\n            periods.push(`${year - referenceWeekYearDelta}W52`)\n        }\n\n        return periods\n    }, [])\n\n    if (weekPeriods.length) {\n        // 3. request metadata for the same week number for each one of the other years of the serie\n        const weekPeriodsReq = new analyticsEngine.request()\n            .addPeriodDimension(weekPeriods)\n            .withSkipData(true)\n            .withSkipMeta(false)\n            .withIncludeMetadataDetails(true)\n\n        const weekPeriodsRes = await analyticsEngine.aggregate.fetch(\n            weekPeriodsReq\n        )\n\n        // 3. compute relativePeriodDate for each other year of the serie:\n        //    this is done by adding 1 day to the endDate of the week period obtained above\n        const seenYears = []\n\n        weekPeriodsRes.metaData.dimensions[periodId]\n            .sort()\n            .reverse()\n            .forEach(period => {\n                const year = period.substr(0, 4)\n\n                // make sure we only take W53 or W52 whichever is available\n                if (!seenYears.includes(year)) {\n                    const periodDate = new Date(\n                        weekPeriodsRes.metaData.items[period].endDate\n                    )\n                    periodDate.setDate(periodDate.getDate() + 1)\n\n                    periodDates.push(\n                        `${periodDate.getFullYear()}-${(\n                            '' +\n                            (periodDate.getMonth() + 1)\n                        ).padStart(2, 0)}-${(\n                            '' + periodDate.getDate()\n                        ).padStart(2, 0)}`\n                    )\n\n                    seenYears.unshift(year)\n                }\n            })\n    }\n\n    return { yearlySeriesLabels, periodDates }\n}\n","import pick from 'lodash-es/pick'\n\nimport { COLOR_SET_DEFAULT } from '@dhis2/analytics'\n\nexport const options = {\n    axes: { requestable: false, savable: true, defaultValue: [] },\n    colorSet: {\n        defaultValue: COLOR_SET_DEFAULT,\n        requestable: false,\n        savable: true,\n    },\n    cumulativeValues: {\n        defaultValue: false,\n        requestable: false,\n        savable: true,\n    },\n    hideEmptyRowItems: {\n        defaultValue: 'NONE',\n        requestable: false,\n        savable: true,\n    },\n    legend: { defaultValue: {}, requestable: false, savable: true },\n    noSpaceBetweenColumns: {\n        defaultValue: false,\n        requestable: false,\n        savable: true,\n    },\n    percentStackedValues: {\n        defaultValue: false,\n        requestable: false,\n        savable: true,\n    },\n    regressionType: { defaultValue: 'NONE', requestable: false, savable: true },\n    showData: { defaultValue: true, requestable: false, savable: true },\n    aggregationType: {\n        defaultValue: 'DEFAULT',\n        requestable: true,\n        savable: true,\n    },\n    completedOnly: { defaultValue: false, requestable: true, savable: true },\n    hideSubtitle: { defaultValue: false, requestable: false, savable: true },\n    hideTitle: { defaultValue: false, requestable: false, savable: true },\n    sortOrder: { defaultValue: '0', requestable: false, savable: true },\n    subtitle: { defaultValue: undefined, requestable: false, savable: true },\n    title: { defaultValue: undefined, requestable: false, savable: true },\n    series: { defaultValue: [], requestable: false, savable: true },\n    fontStyle: {\n        defaultValue: {},\n        requestable: false,\n        savable: true,\n    },\n\n    // only for PT\n    colTotals: { defaultValue: false, requestable: false, savable: true },\n    colSubTotals: { defaultValue: false, requestable: false, savable: true },\n    rowTotals: { defaultValue: false, requestable: false, savable: true },\n    rowSubTotals: { defaultValue: false, requestable: false, savable: true },\n    showDimensionLabels: {\n        defaultValue: false,\n        requestable: false,\n        savable: true,\n    },\n    hideEmptyColumns: {\n        defaultValue: false,\n        requestable: false,\n        savable: true,\n    },\n    hideEmptyRows: { defaultValue: false, requestable: false, savable: true },\n    skipRounding: { defaultValue: false, requestable: true, savable: true },\n    numberType: { defaultValue: 'VALUE', requestable: false, savable: true },\n    showHierarchy: { defaultValue: false, requestable: true, savable: true },\n    legendSet: { defaultValue: undefined, requestable: false, savable: true },\n    legendDisplayStrategy: {\n        defaultValue: 'FIXED',\n        requestable: false,\n        savable: true,\n    },\n    legendDisplayStyle: {\n        defaultValue: 'FILL',\n        requestable: false,\n        savable: true,\n    },\n    displayDensity: {\n        defaultValue: 'NORMAL',\n        requestable: false,\n        savable: true,\n    },\n    fontSize: { defaultValue: 'NORMAL', requestable: false, savable: true },\n    digitGroupSeparator: {\n        defaultValue: 'SPACE',\n        requestable: false,\n        savable: true,\n    },\n    approvalLevel: {\n        defaultValue: undefined,\n        requestable: true,\n        savable: false,\n    },\n\n    // these are stored in the AO under reportingParams\n    reportingPeriod: { defaultValue: false, requestable: false, savable: true },\n    organisationUnit: {\n        defaultValue: false,\n        requestable: false,\n        savable: true,\n    },\n    parentOrganisationUnit: {\n        defaultValue: false,\n        requestable: false,\n        savable: true,\n    },\n    // not exposed in UI\n    grandParentOrganisationUnit: {\n        defaultValue: false,\n        requestable: false,\n        savable: true,\n    },\n    regression: { defaultValue: false, requestable: false, savable: true },\n    cumulative: { defaultValue: false, requestable: false, savable: true },\n    measureCriteria: {\n        defaultValue: undefined,\n        requestable: true,\n        savable: true,\n    },\n    topLimit: { defaultValue: '0', requestable: false, savable: true },\n}\n\nexport default options\n\nexport const getOptionsForUi = () => {\n    return Object.entries({ ...options }).reduce((map, [option, props]) => {\n        map[option] = props.defaultValue\n\n        return map\n    }, {})\n}\n\nexport const getOptionsForRequest = () => {\n    return Object.entries(options).filter(\n        entry => entry[1].requestable // entry = [option, props]\n    )\n}\n\nexport const getOptionsFromVisualization = visualization => {\n    const optionsFromVisualization = {\n        ...getOptionsForUi(),\n        ...pick(visualization, Object.keys(options)),\n    }\n\n    // nested options under reportingParams\n    if (visualization.reportingParams) {\n        optionsFromVisualization.organisationUnit =\n            visualization.reportingParams.organisationUnit\n        optionsFromVisualization.reportingPeriod =\n            visualization.reportingParams.reportingPeriod\n        optionsFromVisualization.parentOrganisationUnit =\n            visualization.reportingParams.parentOrganisationUnit\n        optionsFromVisualization.grandParentOrganisationUnit =\n            visualization.reportingParams.grandParentOrganisationUnit\n    }\n\n    // cast option values from Number for some options\n    ;['sortOrder', 'topLimit'].forEach(option => {\n        if (Object.prototype.hasOwnProperty.call(visualization, option)) {\n            optionsFromVisualization[option] = String(visualization[option])\n        }\n    })\n\n    return optionsFromVisualization\n}\n","import {\n    isYearOverYear,\n    DIMENSION_ID_PERIOD,\n    layoutGetDimensionItems,\n} from '@dhis2/analytics'\nimport {\n    apiFetchAnalyticsForYearOverYear,\n    apiFetchAnalytics,\n} from '../api/analytics'\nimport {\n    computeGenericPeriodNames,\n    computeYoYMatrix,\n    computeGenericPeriodNamesFromMatrix,\n    getRelativePeriodTypeUsed,\n} from './analytics'\nimport { getRequestOptions } from './getRequestOptions'\n\nexport const fetchData = async ({\n    dataEngine,\n    visualization,\n    filters,\n    forDashboard,\n    userSettings,\n}) => {\n    const options = getRequestOptions(visualization, filters, userSettings)\n\n    const extraOptions = {\n        dashboard: forDashboard,\n    }\n\n    if (isYearOverYear(visualization.type)) {\n        const {\n            responses,\n            yearlySeriesLabels,\n        } = await apiFetchAnalyticsForYearOverYear(\n            dataEngine,\n            visualization,\n            options\n        )\n\n        const peItems = layoutGetDimensionItems(\n            visualization,\n            DIMENSION_ID_PERIOD\n        )\n\n        const relativePeriodTypeUsed = getRelativePeriodTypeUsed(peItems)\n\n        const periodKeyAxisIndexMatrix = computeYoYMatrix(\n            responses,\n            relativePeriodTypeUsed\n        )\n        const periodKeyAxisIndexMap = periodKeyAxisIndexMatrix.reduce(\n            (map, periodKeys, index) => {\n                periodKeys.forEach(periodKey => (map[periodKey] = index))\n\n                return map\n            },\n            {}\n        )\n\n        const xAxisLabels = relativePeriodTypeUsed\n            ? computeGenericPeriodNamesFromMatrix(\n                  periodKeyAxisIndexMatrix,\n                  relativePeriodTypeUsed\n              )\n            : computeGenericPeriodNames(responses)\n\n        return {\n            responses,\n            extraOptions: {\n                ...extraOptions,\n                yearlySeries: yearlySeriesLabels,\n                xAxisLabels,\n                periodKeyAxisIndexMap,\n            },\n        }\n    }\n\n    return {\n        responses: await apiFetchAnalytics(dataEngine, visualization, options),\n        extraOptions,\n    }\n}\n","import { getOptionsForRequest } from './options'\n\nexport const getRequestOptions = (visualization, filters, userSettings) => {\n    const options = getOptionsForRequest().reduce((map, [option, props]) => {\n        // only add parameter if value !== default\n        if (\n            visualization[option] !== undefined &&\n            visualization[option] !== props.defaultValue\n        ) {\n            map[option] = visualization[option]\n        }\n\n        return map\n    }, {})\n\n    // interpretation filter\n    if (filters.relativePeriodDate) {\n        options.relativePeriodDate = filters.relativePeriodDate\n    }\n\n    if (userSettings?.displayProperty) {\n        switch (userSettings.displayProperty) {\n            case 'displayShortName':\n                options.displayProperty = 'SHORTNAME'\n                break\n            case 'displayName':\n                options.displayProperty = 'NAME'\n                break\n        }\n    }\n\n    // global filters\n    // userOrgUnit\n    if (filters.userOrgUnit && filters.userOrgUnit.length) {\n        const ouIds = filters.userOrgUnit.map(\n            ouPath => ouPath.split('/').slice(-1)[0]\n        )\n\n        options.userOrgUnit = ouIds.join(';')\n    }\n\n    return options\n}\n","export default {\n    backdrop: {\n        position: 'fixed',\n        height: '100%',\n        width: '100%',\n        top: 0,\n        left: 0,\n        backgroundColor: 'transparent',\n    },\n}\n","import React, { useEffect, useState, useCallback } from 'react'\nimport { createPortal } from 'react-dom'\nimport PropTypes from 'prop-types'\n\nimport { useDataEngine } from '@dhis2/app-runtime'\nimport { Popper } from '@dhis2/ui'\nimport {\n    VIS_TYPE_PIVOT_TABLE,\n    apiFetchOrganisationUnitLevels,\n} from '@dhis2/analytics'\n\nimport { apiFetchLegendSets } from './api/legendSets'\nimport ContextualMenu from './ContextualMenu'\nimport ChartPlugin from './ChartPlugin'\nimport PivotPlugin from './PivotPlugin'\nimport { fetchData } from './modules/fetchData'\n\nimport styles from './styles/VisualizationPlugin.style.js'\n\nconst LEGEND_DISPLAY_STRATEGY_BY_DATA_ITEM = 'BY_DATA_ITEM'\nconst LEGEND_DISPLAY_STRATEGY_FIXED = 'FIXED'\n\nexport const VisualizationPlugin = ({\n    visualization,\n    filters,\n    forDashboard,\n    userSettings,\n    onError,\n    onLoadingComplete,\n    onResponsesReceived,\n    onDrill,\n    ...props\n}) => {\n    const engine = useDataEngine()\n    const [ouLevels, setOuLevels] = useState(undefined)\n    const [fetchResult, setFetchResult] = useState(null)\n    const [contextualMenuRef, setContextualMenuRef] = useState(undefined)\n    const [contextualMenuConfig, setContextualMenuConfig] = useState({})\n\n    const onToggleContextualMenu = (ref, data) => {\n        setContextualMenuRef(ref)\n        setContextualMenuConfig(data)\n    }\n\n    const closeContextualMenu = () => setContextualMenuRef(undefined)\n\n    const onContextualMenuItemClick = args => {\n        closeContextualMenu()\n\n        onDrill(args)\n    }\n\n    const doFetchData = useCallback(async () => {\n        const result = await fetchData({\n            dataEngine: engine,\n            visualization,\n            filters,\n            forDashboard,\n            userSettings,\n        })\n\n        if (result.responses.length) {\n            onResponsesReceived(result.responses)\n        }\n\n        return result\n    }, [\n        engine,\n        filters,\n        forDashboard,\n        userSettings,\n        onResponsesReceived,\n        visualization,\n    ])\n\n    const doFetchLegendSets = useCallback(\n        async legendSetIds => {\n            if (!legendSetIds.length) {\n                return []\n            }\n\n            const legendSets = await apiFetchLegendSets(engine, legendSetIds)\n\n            return legendSets\n        },\n        [engine]\n    )\n\n    useEffect(() => {\n        const doFetchOuLevels = async () => {\n            const ouLevels = await apiFetchOrganisationUnitLevels(engine)\n\n            setOuLevels(ouLevels)\n        }\n\n        doFetchOuLevels()\n    }, [engine])\n\n    useEffect(() => {\n        setFetchResult(null)\n\n        const doFetchAll = async () => {\n            const { responses, extraOptions } = await doFetchData(\n                visualization,\n                filters,\n                forDashboard\n            )\n\n            const legendSetIds = []\n\n            switch (visualization.legendDisplayStrategy) {\n                case LEGEND_DISPLAY_STRATEGY_FIXED:\n                    if (visualization.legendSet && visualization.legendSet.id) {\n                        legendSetIds.push(visualization.legendSet.id)\n                    }\n                    break\n                case LEGEND_DISPLAY_STRATEGY_BY_DATA_ITEM: {\n                    // parse responses to extract legendSet ids from metaData\n                    // multiple responses are only for YOY which does not support legends\n                    // safe to use only the 1st\n                    // dx dimensions might not be present, the empty array covers that case\n                    const dxIds = responses[0].metaData.dimensions.dx || []\n\n                    dxIds.forEach(dxId => {\n                        const legendSetId =\n                            responses[0].metaData.items[dxId].legendSet\n\n                        if (legendSetId) {\n                            legendSetIds.push(legendSetId)\n                        }\n                    })\n\n                    break\n                }\n            }\n\n            const legendSets = await doFetchLegendSets(legendSetIds)\n\n            setFetchResult({\n                visualization,\n                legendSets,\n                responses,\n                extraOptions,\n            })\n            onLoadingComplete()\n        }\n\n        doFetchAll().catch(error => {\n            onError(error)\n        })\n\n        /* eslint-disable-next-line react-hooks/exhaustive-deps */\n    }, [visualization, filters, forDashboard])\n\n    if (!fetchResult) {\n        return null\n    }\n\n    const contextualMenuRect =\n        contextualMenuRef &&\n        contextualMenuRef.current &&\n        contextualMenuRef.current.getBoundingClientRect()\n\n    const virtualContextualMenuElement = contextualMenuRect\n        ? { getBoundingClientRect: () => contextualMenuRect }\n        : null\n\n    return (\n        <>\n            {!fetchResult.visualization.type ||\n            fetchResult.visualization.type === VIS_TYPE_PIVOT_TABLE ? (\n                <PivotPlugin\n                    visualization={fetchResult.visualization}\n                    responses={fetchResult.responses}\n                    legendSets={fetchResult.legendSets}\n                    onToggleContextualMenu={\n                        onDrill ? onToggleContextualMenu : undefined\n                    }\n                    {...props}\n                />\n            ) : (\n                <ChartPlugin\n                    visualization={fetchResult.visualization}\n                    responses={fetchResult.responses}\n                    extraOptions={fetchResult.extraOptions}\n                    legendSets={fetchResult.legendSets}\n                    {...props}\n                />\n            )}\n            {contextualMenuRect &&\n                createPortal(\n                    <div onClick={closeContextualMenu} style={styles.backdrop}>\n                        <Popper\n                            reference={virtualContextualMenuElement}\n                            placement=\"right\"\n                        >\n                            <ContextualMenu\n                                config={contextualMenuConfig}\n                                ouLevels={ouLevels}\n                                onClick={onContextualMenuItemClick}\n                            />\n                        </Popper>\n                    </div>,\n                    document.body\n                )}\n        </>\n    )\n}\n\nVisualizationPlugin.defaultProps = {\n    filters: {},\n    forDashboard: false,\n    onError: Function.prototype,\n    onLoadingComplete: Function.prototype,\n    onResponsesReceived: Function.prototype,\n    visualization: {},\n    userSettings: {},\n}\nVisualizationPlugin.propTypes = {\n    visualization: PropTypes.object.isRequired,\n    filters: PropTypes.object,\n    forDashboard: PropTypes.bool,\n    userSettings: PropTypes.object,\n    onDrill: PropTypes.func,\n    onError: PropTypes.func,\n    onLoadingComplete: PropTypes.func,\n    onResponsesReceived: PropTypes.func,\n}\n"],"sourceRoot":""}