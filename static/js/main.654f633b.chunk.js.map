{"version":3,"sources":["components/ItemSelector/styles/CategorizedMenuGroup.module.css","components/Item/styles/DeleteItemButton.module.css","api/metadata.js","modules/itemTypes.js","components/Item/ListItem/Item.module.css","modules/util.js","components/Dashboard/dashboardModes.js","reducers/user.js","reducers/dashboards.js","reducers/editDashboard.js","reducers/editItemFilters.js","reducers/selected.js","actions/editItemFilters.js","reducers/itemFilters.js","actions/itemFilters.js","reducers/messages.js","api/messages.js","components/Item/MessagesItem/actions.js","reducers/snackbar.js","actions/snackbar.js","reducers/visualizations.js","actions/visualizations.js","api/index.js","api/dashboards.js","components/SnackbarMessage/SnackbarMessage.js","actions/selected.js","api/localStorage.js","api/editDashboard.js","actions/editDashboard.js","actions/dashboards.js","reducers/controlBar.js","api/controlBar.js","actions/controlBar.js","reducers/dimensions.js","reducers/settings.js","actions/dimensions.js","components/ControlBar/ShowMoreButton.js","components/ControlBar/controlBarDimensions.js","components/ControlBar/ControlBar.js","icons/Star.js","api/dataStatistics.js","components/ControlBar/DashboardItemChip.js","icons/AddCircle.js","icons/Clear.js","components/ControlBar/ClearButton.js","reducers/dashboardsFilter.js","components/ControlBar/Filter.js","components/ControlBar/DashboardsBar.js","actions/dashboardsFilter.js","components/Dashboard/DashboardVerticalOffset.js","components/ItemSelector/HeaderMenuItem.js","icons/Launch.js","components/ItemSelector/ContentMenuItem.js","components/ItemSelector/actions.js","components/ItemSelector/selectableItems.js","components/ItemSelector/CategorizedMenuGroup.js","components/ItemSelector/SinglesMenuGroup.js","components/ItemSelector/ItemSelector.js","components/TitleBar/EditTitleBar.js","components/ItemFilter/FilterDialog.js","reducers/activeModalDimension.js","actions/activeModalDimension.js","components/ItemFilter/FilterSelector.js","components/TitleBar/Info.js","components/TitleBar/ViewTitleBar.js","components/TitleBar/TitleBar.js","components/Item/VisualizationItem/DefaultPlugin.js","components/Item/VisualizationItem/assets/icons.js","components/Item/VisualizationItem/FatalErrorBoundary.js","components/Item/DeleteItemButton.js","components/Item/ItemHeader.js","components/Item/VisualizationItem/ItemHeaderButtons.js","components/Item/VisualizationItem/ItemFooter.js","modules/memoizeOne.js","components/Item/VisualizationItem/LoadingMask.js","components/Item/VisualizationItem/Item.js","widgets/Line.js","components/Item/MessagesItem/Item.js","components/Item/NotSupportedItem/Item.js","icons/Description.js","icons/Delete.js","components/Item/ListItem/Item.js","components/Item/ListItem/actions.js","components/Item/TextItem/Item.js","components/Item/AppItem/Item.js","components/Item/SpacerItem/Item.js","components/Item/Item.js","widgets/NoContentMessage.js","components/Item/ProgressiveLoadingContainer.js","components/ItemGrid/ItemGrid.js","components/FilterBar/FilterBadge.js","components/FilterBar/FilterBar.js","components/Dashboard/DashboardContent.js","components/Dashboard/ViewDashboard.js","components/ControlBar/ConfirmDeleteDialog.js","components/ControlBar/EditBar.js","components/Dashboard/EditDashboard.js","components/Dashboard/NewDashboard.js","components/Dashboard/Dashboard.js","components/App.js","actions/user.js","locales/index.js","reducers/style.js","reducers/index.js","configureStore.js","index.js","components/ControlBar/styles/DashboardsBar.module.css","components/ItemSelector/styles/ContentMenuItem.module.css","components/Item/styles/ItemHeader.module.css","components/ControlBar/styles/ControlBar.module.css","components/Item/VisualizationItem/styles/FatalErrorBoundary.module.css","components/ControlBar/styles/ClearButton.module.css","components/Item/VisualizationItem/plugin.js","components/ItemGrid/gridUtil.js"],"names":["module","exports","getIdNameFields","rename","getDimensionFields","withItems","arrayClean","join","getAxesFields","getFavoriteFields","withDimensions","withOptions","getFavoritesFields","getListItemFields","getMapFields","apiFetchFavorite","id","type","fields","getInstance","then","d2","Api","getApi","get","getEndPointName","VISUALIZATION","REPORT_TABLE","CHART","MAP","EVENT_REPORT","EVENT_CHART","APP","REPORTS","RESOURCES","USERS","MESSAGES","TEXT","SPACER","spacerContent","emptyTextItemContent","isSpacerType","item","text","isTextType","isVisualizationType","itemTypeMap","hasMapView","itemType","domainType","isTrackerDomainType","getDefaultItemCount","defaultItemCount","getAppName","appName","endPointName","propName","pluralTitle","i18n","t","appUrl","getItemUrl","url","launchUrl","getBaseUrl","getItemIcon","TableIcon","ChartIcon","MapIcon","ExtensionIcon","DescriptionIcon","PersonIcon","FontDownloadIcon","EmailIcon","CropFreeIcon","NotInterestedIcon","orArray","param","Array","isArray","orObject","isObject","arrayToIdMap","array","reduce","obj","formatDate","value","uiLocale","global","Intl","DateTimeFormat","locale","year","month","day","format","Date","substr","replace","validateReducer","defaultValue","undefined","api","idx","baseUrl","indexOf","slice","getWithoutId","object","DEFAULT_STATE_USER","username","isSuperuser","sGetUserUsername","state","user","DEFAULT_STATE_DASHBOARDS","byId","items","updateDashboardProp","dashboardId","prop","sGetDashboardsRoot","dashboards","sGetDashboardById","sDashboardsIsFetching","sGetAllDashboards","sGetDashboardItems","sGetStarredDashboards","Object","values","filter","dashboard","starred","sGetUnstarredDashboards","sGetDashboardsSortedByStarred","arraySort","getCustomDashboards","data","arrayFrom","map","d","name","displayName","description","displayDescription","favorite","owner","created","split","lastUpdated","access","numberOfItems","dashboardItems","length","reportTable","chart","DEFAULT_STATE_EDIT_DASHBOARD","NEW_DASHBOARD_STATE","sGetEditDashboardRoot","editDashboard","sGetIsEditing","isEmpty","sGetEditDashboardItems","DEFAULT_STATE_EDIT_ITEM_FILTERS","sGetEditItemFiltersRoot","editItemFilters","combineReducers","action","isLoading","showDescription","sGetSelectedRoot","selected","sGetSelectedId","sGetSelectedIsLoading","sGetSelectedShowDescription","acRemoveEditItemFilter","DEFAULT_STATE_ITEM_FILTERS","sGetItemFiltersRoot","itemFilters","sGetFiltersKeys","keys","acRemoveItemFilter","sGetMessagesRoot","messages","getMessages","catch","error","console","log","tGetMessages","dispatch","a","messageConversations","DEFAULT_STATE_SNACKBAR","message","duration","open","acCloseSnackbar","DEFAULT_STATE_VISUALIZATIONS","p","sGetVisualization","visualizations","sGetVisualizationsRoot","acAddVisualization","onError","getDashboardItemsFields","withFavorite","getDashboardFields","apiFetchDashboard","models","apiStarDashboard","isStarred","post","delete","apiDeleteDashboard","loadingDashboardMsg","SnackbarMessageContent","style","fontWeight","connect","snackbar","sGetSnackbar","snackbarOpen","snackbarMessage","snackbarDuration","onCloseSnackbar","props","Snackbar","zIndex","autoHideDuration","onClose","acSetSelectedId","acSetSelectedIsLoading","tLoadDashboard","dash","acAppendDashboards","Promise","resolve","tSetSelectedDashboardById","getState","snackbarTimeout","setTimeout","dashboardName","onSuccess","customDashboard","acSetDashboardItems","withShape","localStorage","setItem","forEach","extractFavorite","filters","clearTimeout","saveDashboard","assign","width","w","height","h","save","msg","response","uid","updateDashboard","postDashboard","create","acAddDashboardItem","itemPropName","generateUid","content","NEW_ITEM_SHAPE","acUpdateDashboardItem","acRemoveDashboardItem","tSaveDashboard","dashboardToSave","acSetDashboardStarred","tFetchDashboards","list","paging","collection","toArray","tStarDashboard","tDeleteDashboard","userRows","sGetControlBarUserRows","controlBar","sGetControlBarRoot","KEY","hasNamespace","currentUser","dataStore","has","getNamespace","apiGetControlBarRows","namespace","find","key","apiPostControlBarRows","rows","set","acSetControlBarUserRows","tSetControlBarRows","controlBarRows","DEFAULT_DIMENSIONS","getDimensionById","DIMENSION_ID_PERIOD","DIMENSION_ID_ORGUNIT","sGetDimensions","dimensions","DEFAULT_SETTINGS","keyDateFormat","keyAnalysisRelativePeriod","keyAnalysisDigitGroupSeparator","displayNameProperty","rootOrganisationUnit","sGetSettings","settings","sGetSettingsDisplayNameProperty","acSetDimensions","tSetDimensions","displayNameProp","apiFetchDimensions","filteredDimensions","dim","dimensionType","dataDimensionType","styles","showMore","color","colors","grey700","cursor","fontSize","paddingTop","textDecoration","disabled","grey500","withStyles","onClick","isMaxHeight","classes","textAlign","className","getRowsHeight","getTopOffset","getControlBarHeight","FIRST_ROW_PADDING_HEIGHT","ControlBar","React","Component","constructor","super","onStartDrag","this","setState","dragging","window","addEventListener","onDrag","onEndDrag","event","preventDefault","stopPropagation","newHeight","clientY","onChangeHeight","requestAnimationFrame","removeEventListener","renderDragHandle","draghandle","onMouseDown","render","Math","max","rootStyle","top","backgroundColor","editMode","yellow050","white","paddingBottom","transition","root","children","defaultProps","StarIcon","xmlns","viewBox","fill","apiPostDataStatistics","eventType","chip","margin","link","grey600","display","verticalAlign","icon","marginTop","unselected","label","chipProps","selectedState","Star","to","debounce","AddCircleIcon","teal600","ClearIcon","grey800","ClearButton","onClear","button","Clear","ownerData","DEFAULT_STATE_DASHBOARDS_FILTER_OWNER","order","sGetDashboardsFilterRoot","dashboardsFilter","sGetFilterName","filterField","searchIcon","Filter","setFilterValue","onChangeName","target","handleKeyUp","keyCode","onKeypressEnter","componentWillReceiveProps","nextProps","startAdornment","InputAdornment","position","endAdornment","Input","placeholder","onChange","onKeyUp","Function","prototype","DashboardsBar","setInitialDashboardState","adjustedHeight","newRows","floor","newRowCount","min","onToggleMaxHeight","onSelectDashboard","history","push","componentDidMount","selectedId","onChangeFilterName","rowCount","controlBarHeight","contentWrapperStyle","padding","overflowY","leftControls","marginRight","AddCircle","mapDispatchToProps","withRouter","stateProps","dispatchProps","ownProps","displayDashboards","toLowerCase","includes","HeaderMenuItem","title","dense","LaunchIcon","LaunchLink","e","launchLink","rel","href","Launch","InsertButton","buttonInsert","ContentMenuItem","onInsert","visType","ItemIcon","renderedItemIcon","visTypeIcons","menuItem","singleItems","header","categorizedItems","listItemTypes","CategorizedMenuGroup","addItem","tAddListItemContent","newItem","toggleSeeMore","seeMore","onChangeItemsLimit","hasMore","itemUrl","context","showMoreButton","contextTypes","PropTypes","isRequired","listItemType","dashboardItemIndex","findIndex","dashboardItem","category","addToDashboard","ItemSearchField","onFocus","ItemSelector","closeList","openList","_","fetchItems","anchorEl","currentTarget","setFilter","getCategorizedMenuGroups","itemCount","allItems","maxOptions","getSinglesMenuGroups","getMenuGroups","concat","add","Set","queryString","Popover","anchorOrigin","horizontal","vertical","transformOrigin","PaperProps","disableAutoFocus","disableRestoreFocus","EditTitleBar","onChangeTitle","onChangeDescription","section","titleDescription","itemSelector","selectedDashboard","justifyContent","flex","clear","underline","borderBottom","input","borderRadius","peId","ouId","FilterDialog","onConfirm","dialogContent","dimension","selectedItems","dialogId","commonProps","onSelect","onDeselect","onReorder","selectedPeriods","ouItems","dialogTitle","Dialog","maxWidth","disableEnforceFocus","DialogActions","kind","DEFAULT_STATE_ACTIVE_MODAL_DIMENSION","sGetActiveModalDimension","activeModalDimension","acSetActiveModalDimension","FilterSelector","openPanel","closePanel","closeDialog","clearActiveModalDimension","selectDimension","setActiveModalDimension","onSelectItems","dimensionId","setEditItemFilters","onDeselectItems","itemIdsToRemove","newList","removeEditItemFilter","onReorderItems","itemIds","oldList","reorderedList","saveFilter","filterItems","addItemFilter","removeItemFilter","theme","selectedDimensions","Boolean","fontFamily","typography","onDimensionClick","selectedIds","withTheme","Info","show","toggle","NO_DESCRIPTION","actions","alignItems","marginLeft","starIcon","textButton","minWidth","editLink","titleBar","titleBarIcon","ViewTitleBar","toggleSharingDialog","sharingDialogIsOpen","onStarClick","onInfoClick","titleStyle","userSelect","StarBorder","update","manage","onRequestClose","black","TitleBar","edit","DefaultPlugin","pluginCredentials","shouldPluginReload","prevProps","reloadAllowed","filtersChanged","vis","visualization","prevVis","visChanged","activeType","reloadPlugin","pluginManager","currentVis","useActiveType","credentials","getActiveType","auth","defaultHeaders","Authorization","componentDidUpdate","getGridItemDomId","textDiv","ThreeDots","SpeechBubble","fillRule","transform","Warning","FatalErrorBoundary","errorFound","componentDidCatch","info","container","DeleteItemButton","deleteItemButton","red500","ItemHeader","actionButtons","itemId","forwardedRef","itemHeaderWrap","ref","itemTitle","itemActionsWrap","ConnectedItemHeader","forwardRef","iconFill","ItemHeaderButtons","useState","setAnchorEl","onSelectActiveType","isTrackerType","onViewTable","handleClose","onViewChart","onViewMap","canViewAs","isSingleValue","isYearOverYear","VIS_TYPE_GAUGE","VIS_TYPE_PIE","interpretationMenuLabel","activeFooter","ViewAsMenuItems","pluginIsAvailable","small","secondary","getLink","onToggleFooter","scrollContainer","line","border","grey100","ItemFooter","objectId","getId","memoizeOne","fn","lastArgs","lastValue","args","every","arg","i","progress","spacing","unit","alignSelf","outer","CircularProgress","overflow","textOverflow","whiteSpace","fontStretch","lineHeight","loadingCover","left","background","Item","showFooter","configLoaded","pluginIsLoaded","applyFilters","visRows","visColumns","columns","visFilters","dimensionFound","dimensionObjects","getUniqueKey","uniqueId","getPluginComponent","memoizedGetVisualizationConfig","memoizedGetContentStyle","originalHeight","headerRef","current","clientHeight","contentRef","offsetHeight","LoadingMask","memoizedApplyFilters","onLoadingComplete","forDashboard","mapViews","layer","onToggleItemExpanded","getContentStyle","headerHeight","measuredHeight","createRef","getVisualizationConfig","onVisualizationLoaded","prevState","acSetActiveVisualizationType","grey200","Line","messageTypes","VALIDATION_RESULT","TICKET","SYSTEM","listStyleType","paddingLeft","seeAll","marginBottom","sender","snippet","maxHeight","MessagesItem","getMessageHref","msgIdentifier","messageType","getMessageSender","latestMsg","getMessageItems","editClass","readClass","read","msgDate","document","location","messageCount","userSettings","string","MessagesContainer","NotSupportedItem","align","DeleteIcon","getItemTitle","ListItem","tRemoveListItemContent","contentItems","index","el","getContentItems","contentItem","Description","itemicon","deleteButton","deletebutton","deleteicon","grey900","newContent","textField","onChangeText","updatedItem","onEdit","multiline","fullWidth","textDivStyle","viewItem","getIframeSrc","appDetails","iframeSrc","ouIds","ouPath","AppItem","appKey","system","installedApps","app","src","SpacerItem","GridItem","VisualizationItem","TextItem","getGridItem","NoContentMessage","ProgressiveLoadingContainer","shouldLoad","containerRef","shouldLoadHandler","checkShouldLoad","bufferPx","bufferFactor","innerHeight","rect","getBoundingClientRect","bottom","removeHandler","registerHandler","debounceMs","componentWillUnmount","eventProps","pick","ItemGrid","expandedItems","clickedId","isExpanded","onRemoveItem","onLayoutChange","newLayout","acUpdateDashboardLayout","onResizeStop","layout","oldItem","onItemResize","pluginResize","onRemoveItemWrapper","getItem","expandedItem","hProp","minH","ITEM_MIN_HEIGHT","randomNumber","random","getItems","getMemoizedItem","getItemComponent","itemClassNames","getItemComponents","memoize","MARGIN","cols","getGridColumns","rowHeight","GRID_ROW_HEIGHT","innerWidth","compactType","GRID_COMPACT_TYPE","isDraggable","isResizable","draggableCancel","validItems","hasShape","badgeContainer","badge","badgeRemove","FilterBadge","onRemove","count","FilterBar","onBadgeRemove","onBadgeClick","bar","removeItemFIlter","filtersSelector","createSelector","arr","flexWrap","DashboardContent","Content","hasDashboardContent","dashboardsIsEmpty","dashboardsLoaded","contentNotReady","ConfirmDeleteDialog","onDeleteConfirmed","onContinueEditing","destructive","DialogTitle","DialogContent","DialogContentText","buttonBarStyle","EditBar","translationDialogIsOpen","dashboardModel","confirmDeleteDialogOpen","redirectUrl","onConfirmDelete","onSave","newId","onDiscard","onDiscardChanges","onDelete","onTranslationsSaved","translations","dbLocale","translation","property","onTranslate","fetchDashboardModel","toggleTranslationDialog","confirmDeleteDialog","deleteAccess","translationDialog","objectToTranslate","fieldsToTranslate","onTranslationSaved","onTranslationError","err","updateAccess","discardBtnText","primary","rightControls","sGetIsNewDashboard","acSetDashboardDisplayName","EditDashboard","initialized","initEditDashboard","setEditDashboard","getDashboardContent","NewDashboard","setNewDashboard","Dashboard","setDashboard","match","params","selectDashboard","scrollToTop","scrollTo","mode","dashboardToSelect","preferredId","App","setCurrentUser","fetchDashboards","setControlBarRows","setDimensions","getChildContext","spacers","exact","path","childContextTypes","moment","addResources","arTranslations","daTranslations","enTranslations","esTranslations","frTranslations","idTranslations","kmTranslations","loTranslations","myTranslations","prsTranslations","psTranslations","ptTranslations","pt_BRTranslations","ruTranslations","svTranslations","tetTranslations","tgTranslations","ukTranslations","urTranslations","viTranslations","zhTranslations","zh_CNTranslations","setDefaultNamespace","changeLanguage","objectClean","conversations","$merge","d2Object","keyUiLocale","authorities","newState","k","$unshift","idToRemove","$splice","stateItems","layoutHasChanged","newStateItems","x","y","stateItem","si","configureStore","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducer","applyMiddleware","configI18n","config","sources","getManifest","manifest","version","manifest_generated_at","isProd","process","activities","dhis","dhis2","apiVersion","headers","schemas","getUserSettings","d2Init","initializedD2","ReactDOM","store","createMuiTheme","dhis2theme","getElementById","init","itemTypeToExternalPlugin","getPlugin","hasIntegratedPlugin","eventReport","eventChart","loadPlugin","plugin","load","loadingIndicator","getName","fetch","fetchedFavorite","resize","unmount","originalType","extractedMapView","mv","VIS_TYPE_COLUMN","VIS_TYPE_PIVOT_TABLE","isNonNegativeInteger","Number","isInteger","itemWithShape","Error","col","row","itemWidth","itemHeight","getShape","round","getOriginalHeight","querySelector","isFunction","setViewportSize","clientWidth"],"mappings":"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","file":"static/js/main.654f633b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"showMoreButton\":\"CategorizedMenuGroup_showMoreButton__mjOS3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteItemButton\":\"DeleteItemButton_deleteItemButton__2d8Px\"};","import { getInstance } from 'd2';\nimport arrayClean from 'd2-utilizr/lib/arrayClean';\n\nimport { getEndPointName } from '../modules/itemTypes';\n\n// Id, name\nexport const getIdNameFields = ({ rename } = {}) => [\n    'id',\n    `${rename ? 'displayName~rename(name)' : 'name,displayName'}`,\n];\n\n// Item\nexport const getItemFields = () => [\n    'dimensionItem~rename(id)',\n    'displayName~rename(name)',\n    'dimensionItemType',\n];\n\n// Dimension\nexport const getDimensionFields = ({ withItems }) =>\n    arrayClean([\n        'dimension',\n        'legendSet[id]',\n        'filter',\n        'programStage',\n        withItems ? `items[${getItemFields().join(',')}]` : ``,\n    ]);\n\n// Axis\nexport const getAxesFields = ({ withItems }) => [\n    `columns[${getDimensionFields({ withItems }).join(',')}]`,\n    `rows[${getDimensionFields({ withItems }).join(',')}]`,\n    `filters[${getDimensionFields({ withItems }).join(',')}]`,\n];\n\n// Favorite\nexport const getFavoriteFields = ({ withDimensions, withOptions }) => {\n    return arrayClean([\n        `${getIdNameFields({ rename: true }).join(',')}`,\n        'displayDescription~rename(description)',\n        withDimensions ? `${getAxesFields({ withItems: true }).join(',')}` : ``,\n        withOptions\n            ? [\n                  '*',\n                  '!attributeDimensions',\n                  '!attributeValues',\n                  '!category',\n                  '!categoryDimensions',\n                  '!categoryOptionGroupSetDimensions',\n                  '!columnDimensions',\n                  '!dataDimensionItems',\n                  '!dataElementDimensions',\n                  '!dataElementGroupSetDimensions',\n                  '!filterDimensions',\n                  '!itemOrganisationUnitGroups',\n                  '!lastUpdatedBy',\n                  '!organisationUnitGroupSetDimensions',\n                  '!organisationUnitLevels',\n                  '!organisationUnits',\n                  '!programIndicatorDimensions',\n                  '!relativePeriods',\n                  '!reportParams',\n                  '!rowDimensions',\n                  '!series',\n                  '!translations',\n                  '!userOrganisationUnit',\n                  '!userOrganisationUnitChildren',\n                  '!userOrganisationUnitGrandChildren',\n              ].join(',')\n            : '',\n    ]);\n};\n\nexport const getFavoritesFields = ({ withDimensions }) => [\n    `reportTable[${getFavoriteFields({ withDimensions }).join(',')}]`,\n    `chart[${['type', ...getFavoriteFields({ withDimensions })].join(',')}]`,\n    `map[${getFavoriteFields({ withDimensions }).join(',')}]`,\n    `eventReport[${getFavoriteFields({ withDimensions }).join(',')}]`,\n    `eventChart[${getFavoriteFields({ withDimensions }).join(',')}]`,\n];\n\n// List item\nexport const getListItemFields = () => [\n    `reports[${getIdNameFields({ rename: true }).join(',')}]`,\n    `resources[${getIdNameFields({ rename: true }).join(',')}]`,\n    `users[${getIdNameFields({ rename: true }).join(',')}]`,\n];\n\n// Map\nexport const getMapFields = () => [\n    `${getIdNameFields({ rename: true }).join(',')}`,\n    'user,longitude,latitude,zoom,basemap',\n    `mapViews[${getFavoriteFields({\n        withDimensions: true,\n        withOptions: true,\n    })}]`,\n];\n\n// Api\n\n// Get more info about the favorite of a dashboard item\nexport const apiFetchFavorite = (id, type, { fields }) =>\n    getInstance().then(d2 =>\n        d2.Api.getApi().get(`${getEndPointName(type)}/${id}`, {\n            fields:\n                fields ||\n                getFavoriteFields({\n                    withDimensions: true,\n                    withOptions: true,\n                }),\n        })\n    );\n","import i18n from '@dhis2/d2-i18n';\nimport TableIcon from '@material-ui/icons/ViewList';\nimport ChartIcon from '@material-ui/icons/InsertChart';\nimport MapIcon from '@material-ui/icons/Public';\nimport ExtensionIcon from '@material-ui/icons/Extension';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport PersonIcon from '@material-ui/icons/Person';\nimport FontDownloadIcon from '@material-ui/icons/FontDownload';\nimport EmailIcon from '@material-ui/icons/Email';\nimport CropFreeIcon from '@material-ui/icons/CropFree';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\n\nimport { getBaseUrl } from './util';\n\n// Item types\nexport const VISUALIZATION = 'VISUALIZATION';\nexport const REPORT_TABLE = 'REPORT_TABLE';\nexport const CHART = 'CHART';\nexport const MAP = 'MAP';\nexport const EVENT_REPORT = 'EVENT_REPORT';\nexport const EVENT_CHART = 'EVENT_CHART';\nexport const APP = 'APP';\nexport const REPORTS = 'REPORTS';\nexport const RESOURCES = 'RESOURCES';\nexport const USERS = 'USERS';\nexport const MESSAGES = 'MESSAGES';\nexport const TEXT = 'TEXT';\nexport const SPACER = 'SPACER';\n\nconst DOMAIN_TYPE_AGGREGATE = 'AGGREGATE';\nconst DOMAIN_TYPE_TRACKER = 'TRACKER';\n\n// Dashboard helpers\nexport const spacerContent = 'SPACER_ITEM_FOR_DASHBOARD_LAYOUT_CONVENIENCE';\nexport const emptyTextItemContent = 'TEXT_ITEM_WITH_NO_CONTENT';\nexport const isSpacerType = item =>\n    item.type === TEXT && item.text === spacerContent;\nexport const isTextType = item =>\n    item.type === TEXT && item.text !== spacerContent;\nexport const isVisualizationType = item =>\n    !!itemTypeMap[item.type].isVisualizationType;\nexport const hasMapView = itemType =>\n    itemTypeMap[itemType].domainType === DOMAIN_TYPE_AGGREGATE;\nexport const isTrackerDomainType = itemType =>\n    itemTypeMap[itemType].domainType === DOMAIN_TYPE_TRACKER;\nexport const getDefaultItemCount = itemType =>\n    itemTypeMap[itemType].defaultItemCount || 5;\nexport const getAppName = itemType => itemTypeMap[itemType].appName || '';\n\n// Item type map\nexport const itemTypeMap = {\n    [VISUALIZATION]: {\n        id: VISUALIZATION,\n        endPointName: 'visualizations',\n        propName: 'visualization',\n        pluralTitle: i18n.t('Visualizations'),\n        appUrl: id => `dhis-web-data-visualizer/#/${id}`,\n        appName: 'Data Visualizer',\n        defaultItemCount: 10,\n    },\n    [REPORT_TABLE]: {\n        id: REPORT_TABLE,\n        endPointName: 'visualizations',\n        propName: 'visualization',\n        pluralTitle: i18n.t('Pivot tables'),\n        domainType: DOMAIN_TYPE_AGGREGATE,\n        isVisualizationType: true,\n        appUrl: id => `dhis-web-data-visualizer/#/${id}`,\n        appName: 'Data Visualizer',\n    },\n    [CHART]: {\n        id: CHART,\n        endPointName: 'visualizations',\n        propName: 'visualization',\n        pluralTitle: i18n.t('Charts'),\n        domainType: DOMAIN_TYPE_AGGREGATE,\n        isVisualizationType: true,\n        appUrl: id => `dhis-web-data-visualizer/#/${id}`,\n        appName: 'Data Visualizer',\n    },\n    [MAP]: {\n        id: MAP,\n        endPointName: 'maps',\n        propName: 'map',\n        pluralTitle: i18n.t('Maps'),\n        domainType: DOMAIN_TYPE_AGGREGATE,\n        isVisualizationType: true,\n        appUrl: id => `dhis-web-maps/?id=${id}`,\n        appName: 'Maps',\n    },\n    [EVENT_REPORT]: {\n        id: EVENT_REPORT,\n        endPointName: 'eventReports',\n        propName: 'eventReport',\n        pluralTitle: i18n.t('Event reports'),\n        domainType: DOMAIN_TYPE_TRACKER,\n        isVisualizationType: true,\n        appUrl: id => `dhis-web-event-reports/?id=${id}`,\n        appName: 'Event Reports',\n    },\n    [EVENT_CHART]: {\n        id: EVENT_CHART,\n        endPointName: 'eventCharts',\n        propName: 'eventChart',\n        pluralTitle: i18n.t('Event charts'),\n        domainType: DOMAIN_TYPE_TRACKER,\n        isVisualizationType: true,\n        appUrl: id => `dhis-web-event-visualizer/?id=${id}`,\n        appName: 'Event Visualizer',\n    },\n    [APP]: {\n        endPointName: 'apps',\n        propName: 'appKey',\n        pluralTitle: i18n.t('Apps'),\n    },\n    [REPORTS]: {\n        id: REPORTS,\n        endPointName: 'reports',\n        propName: 'reports',\n        pluralTitle: i18n.t('Reports'),\n        appUrl: id =>\n            `dhis-web-reporting/getReportParams.action?mode=report&uid=${id}`,\n    },\n    [RESOURCES]: {\n        id: RESOURCES,\n        endPointName: 'resources',\n        propName: 'resources',\n        pluralTitle: i18n.t('Resources'),\n        appUrl: id => `api/documents/${id}/data`,\n    },\n    [USERS]: {\n        id: USERS,\n        endPointName: 'users',\n        propName: 'users',\n        pluralTitle: i18n.t('Users'),\n        appUrl: id => `dhis-web-dashboard-integration/profile.action?id=${id}`,\n    },\n    [TEXT]: {\n        id: TEXT,\n        propName: 'text',\n    },\n    [MESSAGES]: {\n        propName: 'messages',\n    },\n    [SPACER]: {\n        propName: 'text',\n    },\n};\n\nexport const getEndPointName = type => itemTypeMap[type].endPointName;\n\nexport const getItemUrl = (type, item, d2) => {\n    let url;\n\n    if (type === APP) {\n        url = item.launchUrl;\n    }\n\n    if (itemTypeMap[type] && itemTypeMap[type].appUrl) {\n        url = `${getBaseUrl(d2)}/${itemTypeMap[type].appUrl(item.id)}`;\n    }\n\n    return url;\n};\n\nexport const getItemIcon = type => {\n    switch (type) {\n        case REPORT_TABLE:\n        case EVENT_REPORT:\n        case REPORTS:\n            return TableIcon;\n        case CHART:\n        case EVENT_CHART:\n            return ChartIcon;\n        case MAP:\n            return MapIcon;\n        case APP:\n            return ExtensionIcon;\n        case RESOURCES:\n            return DescriptionIcon;\n        case USERS:\n            return PersonIcon;\n        case TEXT:\n            return FontDownloadIcon;\n        case MESSAGES:\n            return EmailIcon;\n        case SPACER:\n            return CropFreeIcon;\n        default:\n            return NotInterestedIcon;\n    }\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Item_list__1_IlZ\",\"item\":\"Item_item__1_W9C\",\"itemicon\":\"Item_itemicon___Di4u\",\"link\":\"Item_link__340SW\",\"deleteicon\":\"Item_deleteicon__2Betm\",\"deletebutton\":\"Item_deletebutton__jObrO\"};","import isObject from 'lodash/isObject';\n\n// validation\nexport function orNull(param) {\n    return param === undefined ? null : param;\n}\n\nexport function orArray(param) {\n    return Array.isArray(param) ? param : [];\n}\n\nexport function orObject(param) {\n    return isObject(param) ? param : {};\n}\n\n// array\nexport function arrayGetById(array, id) {\n    return array.find(item => item.id === id);\n}\n\n// object\nexport function arrayToIdMap(array) {\n    return array.reduce((obj, item) => {\n        obj[item.id] = item;\n        return obj;\n    }, {});\n}\n\n// date\nexport function getDate() {\n    const y = Math.floor(Math.random() * 3) + 2015;\n    const M = Math.floor(Math.random() * 12) + 1;\n    const d = Math.floor(Math.random() * 28) + 1;\n    // const h = Math.floor(Math.random() * 23) + 1;\n    // const m = Math.floor(Math.random() * 59) + 1;\n    // const s = Math.floor(Math.random() * 59) + 1;\n\n    return new Date(`${y}-${M}-${d}`)\n        .toJSON()\n        .replace('T', ' ')\n        .substr(0, 10);\n}\n\nexport const formatDate = (value, uiLocale) => {\n    if (typeof global.Intl !== 'undefined' && Intl.DateTimeFormat) {\n        const locale = uiLocale || 'en';\n        return new Intl.DateTimeFormat(locale, {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n        }).format(new Date(value));\n    }\n\n    return value.substr(0, 19).replace('T', ' ');\n};\n\n/**\n * Sorts an array of objects based on provided date property\n *\n * @param {Array} items Array of objects\n * @param {String} dateProp Name of the date property to be used for sorting\n * @param {Boolean} ascending Whether to sort ascending or descending\n */\nexport const sortByDate = (items, dateProp, ascending = true) => {\n    const values = Object.values(items);\n\n    values.sort((a, b) => {\n        const aDate = new Date(a[dateProp]);\n        const bDate = new Date(b[dateProp]);\n\n        return ascending ? aDate - bDate : bDate - aDate;\n    });\n\n    return values;\n};\n\n// reducer validator\nexport const validateReducer = (value, defaultValue) =>\n    value === undefined || value === null ? defaultValue : value;\n\nexport const getBaseUrl = d2 => {\n    const api = d2.Api.getApi();\n    const idx = api.baseUrl.indexOf('/api');\n    return idx > -1 ? api.baseUrl.slice(0, idx) : api.baseUrl;\n};\n\nexport const getWithoutId = object => ({\n    ...object,\n    id: undefined,\n});\n","export const EDIT = 'edit';\nexport const NEW = 'new';\nexport const VIEW = 'view';\n","export const RECEIVED_USER = 'RECEIVED_USER';\n\nexport const DEFAULT_STATE_USER = {\n    id: '',\n    username: '',\n    uiLocale: '',\n    isSuperuser: false,\n};\n\nexport default (state = DEFAULT_STATE_USER, action) => {\n    switch (action.type) {\n        case RECEIVED_USER: {\n            return fromD2ToUserObj(action.value);\n        }\n        default:\n            return state;\n    }\n};\n\nfunction fromD2ToUserObj(d2Object) {\n    return {\n        id: d2Object.id,\n        username: d2Object.username,\n        uiLocale: d2Object.settings.keyUiLocale,\n        isSuperuser: d2Object.authorities.has('ALL'),\n    };\n}\n\n// selectors\n\nexport const sGetUserId = state => state.user.id;\nexport const sGetUserUsername = state => state.user.username;\nexport const sGetIsSuperuser = state => state.user.isSuperuser;\nexport const sGetUiLocale = state => state.user.uiLocale;\n","/** @module reducers/dashboards */\n\nimport arrayFrom from 'd2-utilizr/lib/arrayFrom';\nimport arraySort from 'd2-utilizr/lib/arraySort';\n\nimport { orArray, orObject } from '../modules/util';\nimport {\n    SPACER,\n    isSpacerType,\n    isTextType,\n    emptyTextItemContent,\n    REPORT_TABLE,\n    CHART,\n    VISUALIZATION,\n} from '../modules/itemTypes';\n\nexport const SET_DASHBOARDS = 'SET_DASHBOARDS';\nexport const ADD_DASHBOARDS = 'ADD_DASHBOARDS';\nexport const SET_DASHBOARD_STARRED = 'SET_DASHBOARD_STARRED';\nexport const SET_DASHBOARD_DISPLAY_NAME = 'SET_DASHBOARD_DISPLAY_NAME';\nexport const SET_DASHBOARD_ITEMS = 'SET_DASHBOARD_ITEMS';\n\nexport const DEFAULT_STATE_DASHBOARDS = {\n    byId: null,\n    items: [],\n};\n\n// reducer helper functions\n\nconst updateDashboardProp = ({ state, dashboardId, prop, value }) => ({\n    byId: {\n        ...state.byId,\n        [dashboardId]: {\n            ...state.byId[dashboardId],\n            [prop]: value,\n        },\n    },\n    items: state.items,\n});\n\n/**\n * Reducer that computes and returns the new state based on the given action\n * @function\n * @param {Object} state The current state\n * @param {Object} action The action to be evaluated\n * @returns {Object}\n */\nexport default (state = DEFAULT_STATE_DASHBOARDS, action) => {\n    switch (action.type) {\n        case SET_DASHBOARDS: {\n            return {\n                byId: action.value,\n                items: [],\n            };\n        }\n        case ADD_DASHBOARDS: {\n            return {\n                ...state,\n                byId: {\n                    ...state.byId,\n                    ...action.value,\n                },\n            };\n        }\n        case SET_DASHBOARD_STARRED: {\n            return updateDashboardProp({\n                state,\n                dashboardId: action.dashboardId,\n                prop: 'starred',\n                value: action.value,\n            });\n        }\n        case SET_DASHBOARD_DISPLAY_NAME: {\n            return updateDashboardProp({\n                state,\n                dashboardId: action.dashboardId,\n                prop: 'displayName',\n                value: action.value,\n            });\n        }\n        case SET_DASHBOARD_ITEMS: {\n            return {\n                ...state,\n                items: action.value,\n            };\n        }\n        default:\n            return state;\n    }\n};\n\n// root selector\n\nexport const sGetDashboardsRoot = state => state.dashboards;\n\n// selector level 1\n\n/**\n * Selector which returns a dashboard by id from the state object\n * If no matching dashboard is found it returns undefined\n * If dashboards.byId is null, then the dashboards api request\n * has not yet completed. If dashboards.byId is an empty object\n * then the dashboards api request is complete, but no dashboards\n * were returned\n *\n * @function\n * @param {Object} state The current state\n * @param {Number} id The id of the dashboard\n * @returns {Object | undefined}\n */\nexport const sGetDashboardById = (state, id) =>\n    orObject(sGetDashboardsRoot(state).byId)[id];\n\nexport const sDashboardsIsFetching = state => {\n    return sGetDashboardsRoot(state).byId === null;\n};\n\n/**\n * Selector which returns all dashboards (the byId object)\n *\n * @function\n * @param {Object} state The current state\n * @returns {Object | undefined}\n */\nexport const sGetAllDashboards = state =>\n    orObject(sGetDashboardsRoot(state).byId);\n\n/**\n * Selector which returns the current dashboard items\n *\n * @function\n * @param {Object} state The current state\n * @returns {Array}\n */\nexport const sGetDashboardItems = state => sGetDashboardsRoot(state).items;\n\n// selector level 2\n\nexport const sGetStarredDashboards = state =>\n    Object.values(sGetAllDashboards(state)).filter(\n        dashboard => dashboard.starred === true\n    );\n\nexport const sGetUnstarredDashboards = state =>\n    Object.values(sGetAllDashboards(state)).filter(\n        dashboard => dashboard.starred === false\n    );\n\n// selector level 3\n\nexport const sGetStarredDashboardIds = state => {\n    return sGetStarredDashboards(state).map(dashboard => dashboard.id);\n};\n\nexport const sGetUnstarredDashboardIds = state =>\n    sGetUnstarredDashboards(state).map(dashboard => dashboard.id);\n\nexport const sGetDashboardsSortedByStarred = state => [\n    ...arraySort(sGetStarredDashboards(state), 'ASC', 'displayName'),\n    ...arraySort(sGetUnstarredDashboards(state), 'ASC', 'displayName'),\n];\n\n// utils\n\n/**\n * Returns the array of dashboards, customized for ui\n * @function\n * @param {Array} data The original dashboard list\n * @returns {Array}\n */\nexport const getCustomDashboards = data => {\n    const uiItems = items =>\n        items.map(item => {\n            let type = isSpacerType(item) ? SPACER : item.type;\n\n            // TODO: temporary fix before 2.34 epic branch is merged\n            // if \"VISUALIZATION\", reset to \"REPORT_TABLE\" or \"CHART\"\n            if (type === VISUALIZATION) {\n                type = item.reportTable\n                    ? REPORT_TABLE\n                    : item.chart\n                    ? CHART\n                    : type;\n            }\n\n            const text = isTextType(item)\n                ? item.text === emptyTextItemContent\n                    ? ''\n                    : item.text\n                : null;\n\n            return {\n                ...item,\n                ...(text !== null ? { text } : {}),\n                type,\n            };\n        });\n\n    return arrayFrom(data).map(d => ({\n        id: d.id,\n        name: d.name,\n        displayName: d.displayName,\n        description: d.description,\n        displayDescription: d.displayDescription,\n        starred: d.favorite,\n        owner: d.user.name,\n        created: d.created\n            .split('T')\n            .join(' ')\n            .substr(0, 16),\n        lastUpdated: d.lastUpdated\n            .split('T')\n            .join(' ')\n            .substr(0, 16),\n        access: d.access,\n        numberOfItems: orArray(d.dashboardItems).length,\n        dashboardItems: uiItems(d.dashboardItems),\n    }));\n};\n","/** @module reducers/editDashboard */\nimport update from 'immutability-helper';\nimport isEmpty from 'lodash/isEmpty';\nimport { orArray, orObject } from '../modules/util';\n\nexport const RECEIVED_EDIT_DASHBOARD = 'RECEIVED_EDIT_DASHBOARD';\nexport const RECEIVED_NOT_EDITING = 'RECEIVED_NOT_EDITING';\nexport const START_NEW_DASHBOARD = 'START_NEW_DASHBOARD';\nexport const RECEIVED_TITLE = 'RECEIVED_TITLE';\nexport const RECEIVED_DESCRIPTION = 'RECEIVED_DESCRIPTION';\nexport const ADD_DASHBOARD_ITEM = 'ADD_DASHBOARD_ITEM';\nexport const REMOVE_DASHBOARD_ITEM = 'REMOVE_DASHBOARD_ITEM';\nexport const UPDATE_DASHBOARD_ITEM = 'UPDATE_DASHBOARD_ITEM';\nexport const RECEIVED_DASHBOARD_LAYOUT = 'RECEIVED_DASHBOARD_LAYOUT';\n\nexport const DEFAULT_STATE_EDIT_DASHBOARD = {};\nexport const NEW_DASHBOARD_STATE = {\n    id: '',\n    name: '',\n    access: {},\n    description: '',\n    dashboardItems: [],\n};\n\nexport default (state = DEFAULT_STATE_EDIT_DASHBOARD, action) => {\n    switch (action.type) {\n        case RECEIVED_EDIT_DASHBOARD: {\n            const newState = {};\n            Object.keys(NEW_DASHBOARD_STATE).map(\n                k => (newState[k] = action.value[k])\n            );\n            return newState;\n        }\n        case RECEIVED_NOT_EDITING:\n            return DEFAULT_STATE_EDIT_DASHBOARD;\n        case START_NEW_DASHBOARD:\n            return NEW_DASHBOARD_STATE;\n        case RECEIVED_TITLE: {\n            return Object.assign({}, state, { name: action.value });\n        }\n        case RECEIVED_DESCRIPTION: {\n            return Object.assign({}, state, {\n                description: action.value,\n            });\n        }\n        case ADD_DASHBOARD_ITEM:\n            return update(state, {\n                dashboardItems: { $unshift: [action.value] },\n            });\n        case REMOVE_DASHBOARD_ITEM: {\n            const idToRemove = action.value;\n\n            const dashboardItemIndex = state.dashboardItems.findIndex(\n                item => item.id === idToRemove\n            );\n\n            if (dashboardItemIndex > -1) {\n                return update(state, {\n                    dashboardItems: {\n                        $splice: [[dashboardItemIndex, 1]],\n                    },\n                });\n            }\n\n            return state;\n        }\n        case RECEIVED_DASHBOARD_LAYOUT: {\n            const stateItems = orArray(state.dashboardItems);\n            let layoutHasChanged = false;\n\n            const newStateItems = action.value.map(({ x, y, w, h, i }) => {\n                const stateItem = stateItems.find(si => si.id === i);\n\n                if (\n                    !(\n                        stateItem.x === x &&\n                        stateItem.y === y &&\n                        stateItem.w === w &&\n                        stateItem.h === h\n                    )\n                ) {\n                    layoutHasChanged = true;\n                    return Object.assign({}, stateItem, { w, h, x, y });\n                }\n\n                return stateItem;\n            });\n\n            return layoutHasChanged\n                ? {\n                      ...state,\n                      dashboardItems: newStateItems,\n                  }\n                : state;\n        }\n        case UPDATE_DASHBOARD_ITEM: {\n            const dashboardItem = action.value;\n\n            const dashboardItemIndex = state.dashboardItems.findIndex(\n                item => item.id === dashboardItem.id\n            );\n\n            if (dashboardItemIndex > -1) {\n                const newState = update(state, {\n                    dashboardItems: {\n                        $splice: [[dashboardItemIndex, 1, dashboardItem]],\n                    },\n                });\n\n                return newState;\n            }\n\n            return state;\n        }\n        default:\n            return state;\n    }\n};\n\n// root selector\n\nexport const sGetEditDashboardRoot = state => state.editDashboard;\n\n// selectors\n\nexport const sGetIsEditing = state => !isEmpty(state.editDashboard);\n\nexport const sGetIsNewDashboard = state => {\n    return (\n        !isEmpty(state.editDashboard) && sGetEditDashboardRoot(state).id === ''\n    );\n};\n\nexport const sGetEditDashboardItems = state =>\n    orObject(sGetEditDashboardRoot(state)).dashboardItems;\n","export const CLEAR_EDIT_ITEM_FILTERS = 'CLEAR_EDIT_ITEM_FILTERS';\nexport const REMOVE_EDIT_ITEM_FILTER = 'REMOVE_EDIT_ITEM_FILTER';\nexport const SET_EDIT_ITEM_FILTERS = 'SET_EDIT_ITEM_FILTERS';\n\nexport const DEFAULT_STATE_EDIT_ITEM_FILTERS = {};\n\nexport default (state = DEFAULT_STATE_EDIT_ITEM_FILTERS, action) => {\n    switch (action.type) {\n        case REMOVE_EDIT_ITEM_FILTER: {\n            const newState = { ...state };\n\n            delete newState[action.id];\n\n            return newState;\n        }\n        case SET_EDIT_ITEM_FILTERS: {\n            return action.filters;\n        }\n        case CLEAR_EDIT_ITEM_FILTERS: {\n            return DEFAULT_STATE_EDIT_ITEM_FILTERS;\n        }\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const sGetEditItemFiltersRoot = state => state.editItemFilters;\n\nexport const sGetEditFiltersKeys = state =>\n    Object.keys(sGetEditItemFiltersRoot(state));\n","/** @module reducers/selected */\nimport { combineReducers } from 'redux';\n\nimport { validateReducer } from '../modules/util';\n\nexport const SET_SELECTED_ID = 'SET_SELECTED_ID';\nexport const SET_SELECTED_ISLOADING = 'SET_SELECTED_ISLOADING';\nexport const SET_SELECTED_SHOWDESCRIPTION = 'SET_SELECTED_SHOWDESCRIPTION';\n\nexport const DEFAULT_STATE_SELECTED_ID = null;\nexport const DEFAULT_STATE_SELECTED_ISLOADING = false;\nexport const DEFAULT_STATE_SELECTED_SHOWDESCRIPTION = false;\n\n/**\n * Reducer functions that computes and returns the new state based on the given action\n * @function\n * @param {Object} state The current state\n * @param {Object} action The action to be evaluated\n */\nconst id = (state = DEFAULT_STATE_SELECTED_ID, action) => {\n    switch (action.type) {\n        case SET_SELECTED_ID:\n            return validateReducer(action.value, DEFAULT_STATE_SELECTED_ID);\n        default:\n            return state;\n    }\n};\n\nconst isLoading = (state = DEFAULT_STATE_SELECTED_ISLOADING, action) => {\n    switch (action.type) {\n        case SET_SELECTED_ISLOADING:\n            return validateReducer(\n                action.value,\n                DEFAULT_STATE_SELECTED_ISLOADING\n            );\n        default:\n            return state;\n    }\n};\n\nconst showDescription = (\n    state = DEFAULT_STATE_SELECTED_SHOWDESCRIPTION,\n    action\n) => {\n    switch (action.type) {\n        case SET_SELECTED_SHOWDESCRIPTION:\n            return validateReducer(\n                action.value,\n                DEFAULT_STATE_SELECTED_SHOWDESCRIPTION\n            );\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    id,\n    isLoading,\n    showDescription,\n});\n\n// Selectors\n\nexport const sGetSelectedRoot = state => state.selected;\n\nexport const sGetSelectedId = state => sGetSelectedRoot(state).id;\n\nexport const sGetSelectedIsLoading = state => sGetSelectedRoot(state).isLoading;\n\nexport const sGetSelectedShowDescription = state =>\n    sGetSelectedRoot(state).showDescription;\n","import {\n    REMOVE_EDIT_ITEM_FILTER,\n    SET_EDIT_ITEM_FILTERS,\n    CLEAR_EDIT_ITEM_FILTERS,\n} from '../reducers/editItemFilters';\n\n// actions\n\nexport const acRemoveEditItemFilter = id => ({\n    type: REMOVE_EDIT_ITEM_FILTER,\n    id,\n});\n\nexport const acClearEditItemFilters = () => ({\n    type: CLEAR_EDIT_ITEM_FILTERS,\n});\n\nexport const acSetEditItemFilters = filters => ({\n    type: SET_EDIT_ITEM_FILTERS,\n    filters,\n});\n","export const CLEAR_ITEM_FILTERS = 'CLEAR_ITEM_FILTERS';\nexport const SET_ITEM_FILTERS = 'SET_ITEM_FILTERS';\nexport const ADD_ITEM_FILTER = 'ADD_ITEM_FILTER';\nexport const REMOVE_ITEM_FILTER = 'REMOVE_ITEM_FILTER';\n\nexport const DEFAULT_STATE_ITEM_FILTERS = {};\n\nexport default (state = DEFAULT_STATE_ITEM_FILTERS, action) => {\n    switch (action.type) {\n        case ADD_ITEM_FILTER: {\n            return {\n                ...state,\n                [action.filter.id]: action.filter.value,\n            };\n        }\n        case REMOVE_ITEM_FILTER: {\n            const newState = { ...state };\n\n            delete newState[action.id];\n\n            return newState;\n        }\n        case SET_ITEM_FILTERS: {\n            return action.filters;\n        }\n        case CLEAR_ITEM_FILTERS: {\n            return DEFAULT_STATE_ITEM_FILTERS;\n        }\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const sGetItemFiltersRoot = state => state.itemFilters;\n\nexport const sGetFiltersKeys = state => Object.keys(sGetItemFiltersRoot(state));\n","import {\n    ADD_ITEM_FILTER,\n    REMOVE_ITEM_FILTER,\n    SET_ITEM_FILTERS,\n    CLEAR_ITEM_FILTERS,\n} from '../reducers/itemFilters';\n\nexport const FILTER_ORG_UNIT = 'ou';\n\n// actions\n\nexport const acAddItemFilter = filter => ({\n    type: ADD_ITEM_FILTER,\n    filter,\n});\n\nexport const acRemoveItemFilter = id => ({\n    type: REMOVE_ITEM_FILTER,\n    id,\n});\n\nexport const acClearItemFilters = () => ({\n    type: CLEAR_ITEM_FILTERS,\n});\n\nexport const acSetItemFilters = filters => ({\n    type: SET_ITEM_FILTERS,\n    filters,\n});\n","import update from 'immutability-helper';\nimport { arrayToIdMap } from '../modules/util';\n\nexport const RECEIVED_MESSAGES = 'RECEIVED_MESSAGES';\n\nexport default (state = {}, action) => {\n    switch (action.type) {\n        case RECEIVED_MESSAGES: {\n            const conversations = arrayToIdMap(action.value);\n\n            const newState = update(state, { $merge: conversations });\n\n            return newState;\n        }\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const sGetMessagesRoot = state => state.messages;\n","import { getInstance } from 'd2';\n\nexport const getMessages = () => {\n    const fields =\n        'id,messageCount,lastUpdated,messageType,displayName,read,messages[id,read,sender[id,displayName],text,lastUpdated]';\n    const url = `/messageConversations?fields=${fields}&order=read:asc&pageSize=200`;\n    return getInstance()\n        .then(d2 => d2.Api.getApi().get(url))\n        .catch(error => console.log('Error:', error));\n};\n","import { RECEIVED_MESSAGES } from '../../../reducers/messages';\nimport { getMessages } from '../../../api/messages';\n\nconst onError = (action, error) => {\n    console.log(`Error in action ${action}: ${error}`);\n    return error;\n};\n\nexport const receivedMessages = value => ({\n    type: RECEIVED_MESSAGES,\n    value,\n});\n\nexport const tGetMessages = () => async dispatch => {\n    try {\n        const messages = await getMessages();\n        const { messageConversations } = messages;\n\n        return dispatch(receivedMessages(messageConversations));\n    } catch (err) {\n        return onError('Get Messages', err);\n    }\n};\n","export const RECEIVED_SNACKBAR_MESSAGE = 'RECEIVED_SNACKBAR_MESSAGE';\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\n\nexport const DEFAULT_STATE_SNACKBAR = {\n    message: {},\n    duration: null,\n    open: false,\n};\n\nexport default (state = DEFAULT_STATE_SNACKBAR, action) => {\n    switch (action.type) {\n        case RECEIVED_SNACKBAR_MESSAGE: {\n            return { ...state, ...action.value };\n        }\n        case CLOSE_SNACKBAR: {\n            return DEFAULT_STATE_SNACKBAR;\n        }\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const sGetSnackbar = state => state.snackbar || DEFAULT_STATE_SNACKBAR;\n","import {\n    RECEIVED_SNACKBAR_MESSAGE,\n    CLOSE_SNACKBAR,\n} from '../reducers/snackbar';\n\nexport const acReceivedSnackbarMessage = value => ({\n    type: RECEIVED_SNACKBAR_MESSAGE,\n    value,\n});\n\nexport const acCloseSnackbar = () => ({\n    type: CLOSE_SNACKBAR,\n});\n","import { orObject } from '../modules/util';\nimport objectClean from 'd2-utilizr/lib/objectClean';\n\n/** @module reducers/visualizations */\n\nexport const ADD_VISUALIZATION = 'ADD_VISUALIZATION';\nexport const SET_ACTIVE_VISUALIZATION_TYPE = 'SET_ACTIVE_VISUALIZATION_TYPE';\n\nexport const DEFAULT_STATE_VISUALIZATIONS = {};\n\nconst isEmpty = p => p === undefined || p === null;\n\nexport default (state = DEFAULT_STATE_VISUALIZATIONS, action) => {\n    switch (action.type) {\n        case ADD_VISUALIZATION: {\n            return {\n                ...state,\n                [action.value.id]: objectClean(\n                    {\n                        ...orObject(state[action.value.id]),\n                        ...action.value,\n                    },\n                    isEmpty\n                ),\n            };\n        }\n        case SET_ACTIVE_VISUALIZATION_TYPE: {\n            return {\n                ...state,\n                [action.id]: objectClean(\n                    {\n                        ...orObject(state[action.id]),\n                        activeType: action.activeType,\n                    },\n                    isEmpty\n                ),\n            };\n        }\n        default:\n            return state;\n    }\n};\n\n// root selector\nexport const sGetVisualizationsRoot = state => state.visualizations;\n\n// selectors level 1\nexport const sGetVisualization = (state, id) => {\n    return sGetVisualizationsRoot(state)[id];\n};\n","import {\n    ADD_VISUALIZATION,\n    SET_ACTIVE_VISUALIZATION_TYPE,\n} from '../reducers/visualizations';\n\nexport const acAddVisualization = value => ({\n    type: ADD_VISUALIZATION,\n    value,\n});\n\nexport const acSetActiveVisualizationType = (id, activeType) => {\n    const action = {\n        type: SET_ACTIVE_VISUALIZATION_TYPE,\n        id,\n        activeType,\n    };\n\n    return action;\n};\n","import arrayClean from 'd2-utilizr/lib/arrayClean';\nimport {\n    getListItemFields,\n    getFavoritesFields,\n    getIdNameFields,\n} from './metadata';\n\n// Helper functions\n\nexport const onError = error => console.log('Error: ', error);\n\n// Dashboard item\nexport const getDashboardItemsFields = ({ withFavorite } = {}) =>\n    arrayClean([\n        'id',\n        'type',\n        'shape',\n        'x',\n        'y',\n        'width~rename(w)',\n        'height~rename(h)',\n        'messages',\n        'text',\n        'appKey',\n        `${getListItemFields().join(',')}`,\n        withFavorite\n            ? `${getFavoritesFields({\n                  withDimensions: withFavorite.withDimensions,\n              }).join(',')}`\n            : ``,\n    ]);\n\n// Dashboard\nexport const getDashboardFields = ({ withItems, withFavorite } = {}) =>\n    arrayClean([\n        `${getIdNameFields().join(',')}`,\n        'description',\n        'displayDescription',\n        'favorite',\n        `user[${getIdNameFields({ rename: true }).join(',')}]`,\n        'created',\n        'lastUpdated',\n        'access',\n        withItems\n            ? `dashboardItems[${getDashboardItemsFields({\n                  withFavorite,\n              }).join(',')}]`\n            : ``,\n    ]);\n","import { getInstance } from 'd2';\nimport arrayClean from 'd2-utilizr/lib/arrayClean';\nimport { onError, getDashboardFields } from './index';\n\n// Get \"all\" dashboards on startup\nexport const apiFetchDashboards = () =>\n    getInstance()\n        .then(d2 =>\n            d2.models.dashboard.list({\n                fields: [\n                    getDashboardFields().join(','),\n                    'dashboardItems[id]',\n                ].join(','),\n                paging: 'false',\n            })\n        )\n        .catch(onError);\n\n// Get more info about selected dashboard\nexport const apiFetchDashboard = id =>\n    getInstance()\n        .then(d2 =>\n            d2.models.dashboard.get(id, {\n                fields: arrayClean(\n                    getDashboardFields({\n                        withItems: true,\n                        withFavorite: { withDimensions: false },\n                    })\n                ).join(','),\n            })\n        )\n        .catch(onError);\n\n// Star dashboard\nexport const apiStarDashboard = (id, isStarred) => {\n    const url = `dashboards/${id}/favorite`;\n\n    getInstance().then(d2 => {\n        if (isStarred) {\n            d2.Api.getApi().post(url);\n        } else {\n            d2.Api.getApi().delete(url);\n        }\n    });\n};\n\nexport const apiDeleteDashboard = id => {\n    return getInstance()\n        .then(d2 => {\n            return d2.models.dashboards\n                .get(id)\n                .then(dashboard => dashboard.delete());\n        })\n        .catch(onError);\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport PropTypes from 'prop-types';\n\nimport { sGetSnackbar } from '../../reducers/snackbar';\nimport { acCloseSnackbar } from '../../actions/snackbar';\n\nconst LOADING_DASHBOARD = 'LOADING_DASHBOARD';\nexport const loadingDashboardMsg = { name: '', type: LOADING_DASHBOARD };\n\nconst SnackbarMessageContent = ({ message }) => {\n    if (typeof message === 'object') {\n        //future message types:  switch(message.type)\n        return (\n            <span>\n                Loading <span style={{ fontWeight: 800 }}>{message.name}</span>{' '}\n                dashboard\n            </span>\n        );\n    }\n    return message;\n};\n\nexport const SnackbarMessage = props => {\n    return (\n        <Snackbar\n            style={{ zIndex: 10001 }}\n            open={props.snackbarOpen}\n            message={<SnackbarMessageContent message={props.snackbarMessage} />}\n            autoHideDuration={props.snackbarDuration}\n            onClose={props.onCloseSnackbar}\n        />\n    );\n};\n\nconst mapStateToProps = state => {\n    const { message, duration, open } = sGetSnackbar(state);\n    return {\n        snackbarOpen: open,\n        snackbarMessage: message,\n        snackbarDuration: duration,\n    };\n};\n\nSnackbarMessage.propTypes = {\n    snackbarDuration: PropTypes.string,\n    snackbarMessage: PropTypes.object,\n    snackbarOpen: PropTypes.bool,\n    onCloseSnackbar: PropTypes.func,\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        onCloseSnackbar: acCloseSnackbar,\n    }\n)(SnackbarMessage);\n","import { getCustomDashboards, sGetDashboardById } from '../reducers/dashboards';\nimport { sGetIsEditing } from '../reducers/editDashboard';\nimport { sGetEditItemFiltersRoot } from '../reducers/editItemFilters';\nimport {\n    SET_SELECTED_ID,\n    SET_SELECTED_ISLOADING,\n    SET_SELECTED_SHOWDESCRIPTION,\n    sGetSelectedIsLoading,\n    sGetSelectedId,\n} from '../reducers/selected';\nimport { sGetUserUsername } from '../reducers/user';\n\nimport { acSetDashboardItems, acAppendDashboards } from './dashboards';\nimport { acClearEditItemFilters } from './editItemFilters';\nimport { acClearItemFilters, acSetItemFilters } from './itemFilters';\nimport { tGetMessages } from '../components/Item/MessagesItem/actions';\nimport { acReceivedSnackbarMessage, acCloseSnackbar } from './snackbar';\nimport { acAddVisualization } from './visualizations';\n\nimport { apiFetchDashboard } from '../api/dashboards';\nimport { storePreferredDashboardId } from '../api/localStorage';\n\nimport { withShape } from '../components/ItemGrid/gridUtil';\nimport { loadingDashboardMsg } from '../components/SnackbarMessage/SnackbarMessage';\nimport { extractFavorite } from '../components/Item/VisualizationItem/plugin';\n\nimport {\n    REPORT_TABLE,\n    CHART,\n    MAP,\n    EVENT_REPORT,\n    EVENT_CHART,\n    MESSAGES,\n} from '../modules/itemTypes';\nimport { orObject } from '../modules/util';\n\n// actions\n\nexport const acSetSelectedId = value => ({\n    type: SET_SELECTED_ID,\n    value,\n});\n\nexport const acSetSelectedIsLoading = value => ({\n    type: SET_SELECTED_ISLOADING,\n    value,\n});\n\nexport const acSetSelectedShowDescription = value => ({\n    type: SET_SELECTED_SHOWDESCRIPTION,\n    value,\n});\n\nexport const tLoadDashboard = id => async dispatch => {\n    try {\n        const dash = await apiFetchDashboard(id);\n\n        dispatch(acAppendDashboards(dash));\n\n        return Promise.resolve(dash);\n    } catch (err) {\n        console.log('Error: ', err);\n        return err;\n    }\n};\n\n// thunks\nexport const tSetSelectedDashboardById = id => async (dispatch, getState) => {\n    dispatch(acSetSelectedIsLoading(true));\n\n    const snackbarTimeout = setTimeout(() => {\n        const dashboardName = orObject(sGetDashboardById(getState(), id))\n            .displayName;\n        if (sGetSelectedIsLoading(getState()) && dashboardName) {\n            loadingDashboardMsg.name = dashboardName;\n\n            dispatch(\n                acReceivedSnackbarMessage({\n                    message: loadingDashboardMsg,\n                    open: true,\n                })\n            );\n        }\n    }, 500);\n\n    const onSuccess = selected => {\n        const customDashboard = getCustomDashboards(selected)[0];\n\n        dispatch(\n            acSetDashboardItems(withShape(customDashboard.dashboardItems))\n        );\n\n        storePreferredDashboardId(sGetUserUsername(getState()), id);\n\n        // add visualizations to store\n        customDashboard.dashboardItems.forEach(item => {\n            switch (item.type) {\n                case REPORT_TABLE:\n                case CHART:\n                case MAP:\n                case EVENT_REPORT:\n                case EVENT_CHART:\n                    dispatch(acAddVisualization(extractFavorite(item)));\n                    break;\n                case MESSAGES:\n                    dispatch(tGetMessages(id));\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        const state = getState();\n        if (id === sGetSelectedId(state)) {\n            if (sGetIsEditing(state)) {\n                // disable filters when switching to edit mode\n                dispatch(acClearItemFilters());\n            } else {\n                // enable filters when switching to view mode\n                dispatch(acSetItemFilters(sGetEditItemFiltersRoot(state)));\n            }\n        } else {\n            // clear filters when switching dashboard\n            dispatch(acClearEditItemFilters());\n            dispatch(acClearItemFilters());\n        }\n\n        dispatch(acSetSelectedId(id));\n\n        dispatch(acSetSelectedIsLoading(false));\n\n        clearTimeout(snackbarTimeout);\n\n        dispatch(acCloseSnackbar());\n\n        return selected;\n    };\n\n    const onError = error => {\n        console.log('Error: ', error);\n        return error;\n    };\n\n    try {\n        const selected = await dispatch(tLoadDashboard(id));\n\n        return onSuccess(selected);\n    } catch (err) {\n        return onError(err);\n    }\n};\n","export const getPreferredDashboardId = username =>\n    localStorage.getItem(`dhis2.dashboard.current.${username}`) || undefined;\n\nexport const storePreferredDashboardId = (username, dashboardId) => {\n    localStorage.setItem(`dhis2.dashboard.current.${username}`, dashboardId);\n};\n","import { getInstance } from 'd2';\n\nconst onError = error => console.log('Error: ', error);\n\nconst saveDashboard = (dashboard, data) => {\n    const { name, description, dashboardItems } = data;\n\n    dashboard.name = name;\n    dashboard.description = description;\n    dashboard.dashboardItems = dashboardItems.map(item =>\n        Object.assign({}, item, { width: item.w, height: item.h })\n    );\n\n    return dashboard.save().then(msg => msg.response.uid);\n};\n\nexport const updateDashboard = data => {\n    return getInstance()\n        .then(d2 => {\n            return d2.models.dashboards\n                .get(data.id)\n                .then(dashboard => saveDashboard(dashboard, data));\n        })\n        .catch(onError);\n};\n\nexport const postDashboard = data => {\n    return getInstance().then(d2 => {\n        const dashboard = d2.models.dashboards.create();\n\n        return saveDashboard(dashboard, data);\n    });\n};\n","import { generateUid } from 'd2/uid';\n\nimport {\n    RECEIVED_EDIT_DASHBOARD,\n    START_NEW_DASHBOARD,\n    RECEIVED_NOT_EDITING,\n    RECEIVED_TITLE,\n    RECEIVED_DESCRIPTION,\n    RECEIVED_DASHBOARD_LAYOUT,\n    ADD_DASHBOARD_ITEM,\n    UPDATE_DASHBOARD_ITEM,\n    REMOVE_DASHBOARD_ITEM,\n} from '../reducers/editDashboard';\nimport { sGetEditDashboardRoot } from '../reducers/editDashboard';\nimport { updateDashboard, postDashboard } from '../api/editDashboard';\nimport { tSetSelectedDashboardById } from '../actions/selected';\nimport { NEW_ITEM_SHAPE } from '../components/ItemGrid/gridUtil';\nimport {\n    itemTypeMap,\n    isSpacerType,\n    TEXT,\n    emptyTextItemContent,\n    isTextType,\n} from '../modules/itemTypes';\n\nconst onError = error => {\n    console.log('Error (Saving Dashboard): ', error);\n    return error;\n};\n\n// actions\n\nexport const acSetEditDashboard = (dashboard, items) => {\n    const val = {\n        ...dashboard,\n        dashboardItems: items,\n    };\n\n    return {\n        type: RECEIVED_EDIT_DASHBOARD,\n        value: val,\n    };\n};\n\nexport const acSetEditNewDashboard = () => ({\n    type: START_NEW_DASHBOARD,\n});\n\nexport const acClearEditDashboard = () => ({\n    type: RECEIVED_NOT_EDITING,\n});\n\nexport const acSetDashboardTitle = value => ({\n    type: RECEIVED_TITLE,\n    value,\n});\n\nexport const acSetDashboardDescription = value => ({\n    type: RECEIVED_DESCRIPTION,\n    value,\n});\n\nexport const acUpdateDashboardLayout = value => ({\n    type: RECEIVED_DASHBOARD_LAYOUT,\n    value,\n});\n\nexport const acAddDashboardItem = item => {\n    const type = item.type;\n    delete item.type;\n    const itemPropName = itemTypeMap[type].propName;\n\n    return {\n        type: ADD_DASHBOARD_ITEM,\n        value: {\n            id: generateUid(),\n            type,\n            [itemPropName]: item.content,\n            ...NEW_ITEM_SHAPE,\n        },\n    };\n};\n\nexport const acUpdateDashboardItem = item => ({\n    type: UPDATE_DASHBOARD_ITEM,\n    value: item,\n});\n\nexport const acRemoveDashboardItem = value => ({\n    type: REMOVE_DASHBOARD_ITEM,\n    value,\n});\n\n// thunks\n\nexport const tSaveDashboard = () => async (dispatch, getState) => {\n    const dashboard = sGetEditDashboardRoot(getState());\n\n    const dashboardItems = dashboard.dashboardItems.map(item => {\n        const text = isTextType(item)\n            ? item.text || emptyTextItemContent\n            : null;\n\n        const type = isSpacerType(item) ? TEXT : item.type;\n\n        return {\n            ...item,\n            ...(text ? { text } : {}),\n            type,\n        };\n    });\n\n    const dashboardToSave = {\n        ...dashboard,\n        dashboardItems,\n    };\n\n    try {\n        const dashboardId = dashboardToSave.id\n            ? await updateDashboard(dashboardToSave)\n            : await postDashboard(dashboardToSave);\n\n        dispatch(acClearEditDashboard());\n        await dispatch(tSetSelectedDashboardById(dashboardId));\n\n        return Promise.resolve(dashboardId);\n    } catch (error) {\n        onError(error);\n    }\n};\n","import {\n    SET_DASHBOARDS,\n    ADD_DASHBOARDS,\n    SET_DASHBOARD_STARRED,\n    SET_DASHBOARD_DISPLAY_NAME,\n    SET_DASHBOARD_ITEMS,\n} from '../reducers/dashboards';\nimport {\n    getCustomDashboards,\n    sGetDashboardById,\n    sGetDashboardsSortedByStarred,\n} from '../reducers/dashboards';\nimport { sGetUserUsername } from '../reducers/user';\nimport { tSetSelectedDashboardById, acSetSelectedId } from './selected';\nimport { acClearEditDashboard } from './editDashboard';\nimport {\n    apiFetchDashboards,\n    apiStarDashboard,\n    apiDeleteDashboard,\n} from '../api/dashboards';\nimport { getPreferredDashboardId } from '../api/localStorage';\nimport { arrayToIdMap } from '../modules/util';\n\n// actions\n\nexport const acSetDashboards = dashboards => ({\n    type: SET_DASHBOARDS,\n    value: arrayToIdMap(getCustomDashboards(dashboards)),\n});\n\nexport const acAppendDashboards = dashboards => ({\n    type: ADD_DASHBOARDS,\n    value: arrayToIdMap(getCustomDashboards(dashboards)),\n});\n\nexport const acSetDashboardStarred = (dashboardId, isStarred) => ({\n    type: SET_DASHBOARD_STARRED,\n    dashboardId: dashboardId,\n    value: isStarred,\n});\n\nexport const acSetDashboardDisplayName = (dashboardId, value) => ({\n    type: SET_DASHBOARD_DISPLAY_NAME,\n    dashboardId,\n    value,\n});\n\nexport const acSetDashboardItems = value => ({\n    type: SET_DASHBOARD_ITEMS,\n    value,\n});\n\n// thunks\n\nexport const tFetchDashboards = () => async dispatch => {\n    const collection = await apiFetchDashboards();\n    dispatch(acSetDashboards(collection.toArray()));\n};\n\nexport const tSelectDashboard = id => async (dispatch, getState) => {\n    const onError = error => {\n        console.log('Error (apiFetchDashboards): ', error);\n        return error;\n    };\n\n    try {\n        const state = getState();\n\n        let dashboardToSelect = null;\n        if (id) {\n            dashboardToSelect = sGetDashboardById(state, id) || null;\n        } else {\n            const preferredId = getPreferredDashboardId(\n                sGetUserUsername(state)\n            );\n            const dash = sGetDashboardById(state, preferredId);\n            dashboardToSelect =\n                preferredId && dash\n                    ? dash\n                    : sGetDashboardsSortedByStarred(state)[0];\n        }\n\n        if (dashboardToSelect) {\n            dispatch(tSetSelectedDashboardById(dashboardToSelect.id));\n        } else {\n            dispatch(acSetSelectedId());\n        }\n    } catch (err) {\n        return onError(err);\n    }\n};\n\nexport const tStarDashboard = (id, isStarred) => async dispatch => {\n    const onSuccess = id => {\n        dispatch(acSetDashboardStarred(id, isStarred));\n        return id;\n    };\n\n    const onError = error => {\n        console.log('Error (apiStarDashboard): ', error);\n        return error;\n    };\n    try {\n        await apiStarDashboard(id, isStarred);\n        return onSuccess(id);\n    } catch (err) {\n        return onError(err);\n    }\n};\n\nexport const tDeleteDashboard = id => async dispatch => {\n    try {\n        await apiDeleteDashboard(id);\n        dispatch(acClearEditDashboard());\n        dispatch(acSetSelectedId());\n        dispatch(acSetDashboardItems([]));\n\n        await dispatch(tFetchDashboards());\n\n        return Promise.resolve();\n    } catch (err) {\n        console.log('Error (deleteDashboard): ', err);\n        return err;\n    }\n};\n","/** @module reducers/controlBar */\nimport { combineReducers } from 'redux';\nimport { validateReducer } from '../modules/util';\n\nexport const SET_CONTROLBAR_USER_ROWS = 'SET_CONTROLBAR_USER_ROWS';\n\nexport const DEFAULT_STATE_CONTROLBAR_ROWS = 1;\n\nconst userRows = (state = DEFAULT_STATE_CONTROLBAR_ROWS, action) => {\n    switch (action.type) {\n        case SET_CONTROLBAR_USER_ROWS:\n            return validateReducer(action.value, DEFAULT_STATE_CONTROLBAR_ROWS);\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    userRows,\n});\n\n/**\n * Selectors that point to specific props in the state object\n * @function\n * @param {Object} state\n * @returns {Object}\n */\nexport const sGetControlBarRoot = state => state.controlBar;\n\n// Selector dependency level 2\n\nexport const sGetControlBarUserRows = state =>\n    sGetControlBarRoot(state).userRows;\n","import { getInstance } from 'd2';\nimport { DEFAULT_STATE_CONTROLBAR_ROWS } from '../reducers/controlBar';\n\nconst NAMESPACE = 'dashboard';\nconst KEY = 'controlBarRows';\n\nconst hasNamespace = async d2 => await d2.currentUser.dataStore.has(NAMESPACE);\n\nconst getNamespace = async (d2, hasNamespace) =>\n    hasNamespace\n        ? await d2.currentUser.dataStore.get(NAMESPACE)\n        : await d2.currentUser.dataStore.create(NAMESPACE);\n\nexport const apiGetControlBarRows = async () => {\n    const d2 = await getInstance();\n    const namespace = await getNamespace(d2, await hasNamespace(d2));\n    const hasKey = namespace.keys && namespace.keys.find(key => key === KEY);\n\n    if (hasKey) {\n        return await namespace.get(KEY);\n    } else {\n        await apiPostControlBarRows(DEFAULT_STATE_CONTROLBAR_ROWS, namespace);\n        console.log(\n            '(These errors to /userDataStore/dashboard can be ignored)'\n        );\n        return DEFAULT_STATE_CONTROLBAR_ROWS;\n    }\n};\n\nexport const apiPostControlBarRows = async (rows, namespace) => {\n    const d2 = await getInstance();\n    const ns = namespace || (await getNamespace(d2, hasNamespace));\n\n    ns.set(KEY, rows);\n};\n","import { SET_CONTROLBAR_USER_ROWS } from '../reducers/controlBar';\nimport { apiGetControlBarRows } from '../api/controlBar';\n\n// actions\n\nexport const acSetControlBarUserRows = rows => ({\n    type: SET_CONTROLBAR_USER_ROWS,\n    value: rows,\n});\n\n// thunks\n\nexport const tSetControlBarRows = () => async dispatch => {\n    const onSuccess = rows => {\n        dispatch(acSetControlBarUserRows(rows));\n    };\n\n    const onError = error => {\n        console.log('Error (apiGetControlBarRows): ', error);\n        return error;\n    };\n\n    try {\n        const controlBarRows = await apiGetControlBarRows();\n        return onSuccess(controlBarRows);\n    } catch (err) {\n        return onError(err);\n    }\n};\n","import {\n    getDimensionById,\n    DIMENSION_ID_PERIOD,\n    DIMENSION_ID_ORGUNIT,\n} from '@dhis2/analytics';\n\nexport const SET_DIMENSIONS = 'SET_DIMENSIONS';\nexport const DEFAULT_DIMENSIONS = [\n    getDimensionById(DIMENSION_ID_PERIOD),\n    getDimensionById(DIMENSION_ID_ORGUNIT),\n];\n\nexport default (state = DEFAULT_DIMENSIONS, action) => {\n    switch (action.type) {\n        case SET_DIMENSIONS: {\n            return [...DEFAULT_DIMENSIONS, ...action.value];\n        }\n        default:\n            return state;\n    }\n};\n\nexport const sGetDimensions = state => state.dimensions;\n","export const SET_SETTINGS = 'SET_SETTINGS';\nexport const ADD_SETTINGS = 'ADD_SETTINGS';\n\nexport const DEFAULT_SETTINGS = {\n    keyDateFormat: 'yyyy-MM-dd',\n    keyAnalysisRelativePeriod: 'LAST_12_MONTHS',\n    keyAnalysisDigitGroupSeparator: 'SPACE',\n    displayNameProperty: 'displayName',\n    uiLocale: 'en',\n    rootOrganisationUnit: {},\n};\n\nexport default (state = DEFAULT_SETTINGS, action) => {\n    switch (action.type) {\n        case SET_SETTINGS: {\n            return Object.assign({}, action.value);\n        }\n        case ADD_SETTINGS: {\n            return {\n                ...state,\n                ...action.value,\n            };\n        }\n        default:\n            return state;\n    }\n};\n\n// Selectors\n\nexport const sGetSettings = state => state.settings;\n\nexport const sGetSettingsDisplayNameProperty = state =>\n    sGetSettings(state).displayNameProperty;\n\nexport const sGetRootOrgUnit = state =>\n    sGetSettings(state).rootOrganisationUnit;\n\nexport const sGetRelativePeriod = state =>\n    sGetSettings(state).keyAnalysisRelativePeriod;\n\nexport const sGetUiLocale = state => sGetSettings(state).uiLocale;\n","import { SET_DIMENSIONS } from '../reducers/dimensions';\nimport { apiFetchDimensions } from '@dhis2/analytics';\nimport { sGetSettingsDisplayNameProperty } from '../reducers/settings';\n\nexport const acSetDimensions = dimensions => ({\n    type: SET_DIMENSIONS,\n    value: dimensions,\n});\n\nexport const tSetDimensions = d2 => async (dispatch, getState) => {\n    const onSuccess = dimensions => {\n        dispatch(acSetDimensions(dimensions));\n    };\n\n    const onError = error => {\n        console.log('Error (apiFetchDimensions): ', error);\n        return error;\n    };\n\n    try {\n        const displayNameProp = sGetSettingsDisplayNameProperty(getState());\n        const dimensions = await apiFetchDimensions(d2, displayNameProp);\n\n        // filter out CATEGORY that are not of type ATTRIBUTE\n        const filteredDimensions = dimensions.filter(\n            dim =>\n                dim.dimensionType !== 'CATEGORY' ||\n                (dim.dimensionType === 'CATEGORY' &&\n                    dim.dataDimensionType === 'ATTRIBUTE')\n        );\n        return onSuccess(filteredDimensions);\n    } catch (err) {\n        return onError(err);\n    }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { colors } from '@dhis2/ui-core';\nimport { withStyles } from '@material-ui/core/styles';\n\nexport const SHOWMORE_BAR_HEIGHT = 16;\n\nconst styles = {\n    showMore: {\n        color: colors.grey700,\n        cursor: 'pointer',\n        fontSize: 11,\n        paddingTop: 5,\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n    disabled: {\n        paddingTop: 5,\n        color: colors.grey500,\n        fontSize: 11,\n        cursor: 'not-allowed',\n    },\n};\n\nexport const ShowMoreButton = ({ onClick, isMaxHeight, classes, disabled }) => {\n    return (\n        <div style={{ textAlign: 'center' }}>\n            {disabled ? (\n                <div className={classes.disabled}>{i18n.t('Show more')}</div>\n            ) : (\n                <div className={classes.showMore} onClick={onClick}>\n                    {isMaxHeight ? i18n.t('Show less') : i18n.t('Show more')}\n                </div>\n            )}\n        </div>\n    );\n};\n\nShowMoreButton.propTypes = {\n    classes: PropTypes.object,\n    disabled: PropTypes.bool,\n    isMaxHeight: PropTypes.bool,\n    onClick: PropTypes.func,\n};\n\nexport default withStyles(styles)(ShowMoreButton);\n","import { SHOWMORE_BAR_HEIGHT } from './ShowMoreButton';\n\nexport const CONTROL_BAR_ROW_HEIGHT = 40;\nexport const FIRST_ROW_PADDING_HEIGHT = 10;\nexport const MIN_ROW_COUNT = 1;\n\nexport const HEADERBAR_HEIGHT = 48;\n\nconst CONTROL_BAR_OUTER_HEIGHT_DIFF =\n    FIRST_ROW_PADDING_HEIGHT + SHOWMORE_BAR_HEIGHT - 2; // 2 pixel \"adjustment\"\n\nexport const getRowsHeight = rows => {\n    return rows * CONTROL_BAR_ROW_HEIGHT;\n};\n\nexport const getNumRowsFromHeight = height => {\n    return Math.floor(\n        (height - CONTROL_BAR_OUTER_HEIGHT_DIFF) / CONTROL_BAR_ROW_HEIGHT\n    );\n};\n\nexport const getTopOffset = rows => {\n    return HEADERBAR_HEIGHT + getControlBarHeight(rows, false);\n};\n\nexport const getControlBarHeight = rows => {\n    return getRowsHeight(rows) + CONTROL_BAR_OUTER_HEIGHT_DIFF;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { colors } from '@dhis2/ui-core';\nimport { HEADERBAR_HEIGHT } from './controlBarDimensions';\n\nimport classes from './styles/ControlBar.module.css';\n\nconst DRAG_HANDLE_HEIGHT = 7;\n\nclass ControlBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dragging: false,\n        };\n    }\n\n    onStartDrag = () => {\n        this.setState({ dragging: true });\n        window.addEventListener('mousemove', this.onDrag);\n        window.addEventListener('mouseup', this.onEndDrag);\n    };\n\n    onDrag = event => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const newHeight = event.clientY;\n\n        if (\n            this.props.onChangeHeight &&\n            newHeight !== this.props.height &&\n            newHeight > 0\n        ) {\n            requestAnimationFrame(() => {\n                this.props.onChangeHeight(newHeight);\n            });\n        }\n    };\n\n    onEndDrag = () => {\n        this.setState({ dragging: false });\n        window.removeEventListener('mousemove', this.onDrag);\n        window.removeEventListener('mouseup', this.onEndDrag);\n\n        if (this.props.onEndDrag) {\n            this.props.onEndDrag();\n        }\n    };\n\n    renderDragHandle() {\n        return typeof this.props.onChangeHeight === 'function' ? (\n            <div\n                className={classes.draghandle}\n                style={{ height: DRAG_HANDLE_HEIGHT }}\n                onMouseDown={this.onStartDrag}\n            />\n        ) : null;\n    }\n\n    render() {\n        const height = Math.max(this.props.height, 0) + DRAG_HANDLE_HEIGHT;\n\n        const rootStyle = Object.assign(\n            {\n                height,\n                top: HEADERBAR_HEIGHT,\n                backgroundColor: this.props.editMode\n                    ? colors.yellow050\n                    : colors.white,\n                paddingBottom: DRAG_HANDLE_HEIGHT,\n            },\n            // Disable animations while dragging\n            this.state.dragging ? { transition: 'none' } : {}\n        );\n\n        return (\n            <div style={rootStyle} className={classes.root}>\n                <div className={classes.content}>{this.props.children}</div>\n                {this.renderDragHandle()}\n            </div>\n        );\n    }\n}\n\nControlBar.propTypes = {\n    /**\n     * The height of the control bar in number of lines. Must be a positive integer.\n     */\n    children: PropTypes.node.isRequired,\n\n    /**\n     * If true, the background color of the control bar changes to indicate that edit mode is active.\n     */\n    editMode: PropTypes.bool.isRequired,\n\n    /**\n     * Callback function that is called when the control bar is resized.\n     * The callback receives one argument: The new height in pixels.\n     *\n     * If no callback is specified the control bar will not have a drag handle.\n     */\n    height: PropTypes.number.isRequired,\n\n    /**\n     * Callback function that is called when the control bar is dropped after being dragged.\n     * The callback receives one argument: The new height in pixels.\n     *\n     * Ignored if no \"onChangeHeight\" function is provided.\n     */\n    onChangeHeight: PropTypes.func,\n\n    /**\n     * The contents of the control bar.\n     */\n    onEndDrag: PropTypes.func,\n};\n\nControlBar.defaultProps = {\n    onChangeHeight: null,\n    onEndDrag: null,\n};\n\nexport default ControlBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst StarIcon = ({ className }) => (\n    <svg\n        className={className}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n    >\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>\n);\n\nStarIcon.propTypes = {\n    className: PropTypes.string,\n};\n\nexport default StarIcon;\n","import { getInstance } from 'd2';\n\nexport const apiPostDataStatistics = async (eventType, id) => {\n    const d2 = await getInstance();\n    const url = `dataStatistics?eventType=${eventType}&favorite=${id}`;\n\n    d2.Api.getApi().post(url);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Chip, colors } from '@dhis2/ui-core';\nimport { Link } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\n\nimport StarIcon from '../../icons/Star';\nimport { apiPostDataStatistics } from '../../api/dataStatistics';\n\nconst styles = {\n    chip: {\n        margin: '3px',\n    },\n    link: {\n        color: colors.grey600,\n        display: 'inline-block',\n        textDecoration: 'none',\n        verticalAlign: 'top',\n    },\n    icon: {\n        height: '20px',\n        marginTop: '2px',\n        width: '20px',\n    },\n    selected: {\n        fill: colors.white,\n    },\n    unselected: {\n        fill: colors.grey700,\n    },\n};\n\nexport const DashboardItemChip = ({\n    starred,\n    selected,\n    label,\n    dashboardId,\n    classes,\n}) => {\n    const chipProps = {\n        selected,\n        className: classes.chip,\n    };\n\n    if (starred) {\n        const selectedState = selected ? classes.selected : classes.unselected;\n        chipProps.icon = (\n            <StarIcon className={`${classes.icon} ${selectedState}`} />\n        );\n    }\n\n    return (\n        <Link\n            className={classes.link}\n            to={`/${dashboardId}`}\n            onClick={debounce(\n                () => apiPostDataStatistics('DASHBOARD_VIEW', dashboardId),\n                500\n            )}\n        >\n            <Chip {...chipProps}>{label}</Chip>\n        </Link>\n    );\n};\n\nDashboardItemChip.propTypes = {\n    dashboardId: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    selected: PropTypes.bool.isRequired,\n    starred: PropTypes.bool.isRequired,\n    classes: PropTypes.object,\n};\n\nexport default withStyles(styles)(DashboardItemChip);\n","import React from 'react';\nimport { colors } from '@dhis2/ui-core';\n\nconst AddCircleIcon = () => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"32\"\n        height=\"32\"\n        fill={colors.teal600}\n        viewBox=\"0 0 24 24\"\n    >\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4 11h-3v3c0 .55-.45 1-1 1s-1-.45-1-1v-3H8c-.55 0-1-.45-1-1s.45-1 1-1h3V8c0-.55.45-1 1-1s1 .45 1 1v3h3c.55 0 1 .45 1 1s-.45 1-1 1z\" />\n    </svg>\n);\n\nexport default AddCircleIcon;\n","import React from 'react';\nimport { colors } from '@dhis2/ui-core';\nimport PropTypes from 'prop-types';\n\nconst ClearIcon = ({ className }) => (\n    <svg\n        className={className}\n        fill={colors.grey800}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n    >\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>\n);\n\nClearIcon.propTypes = {\n    className: PropTypes.string,\n};\n\nexport default ClearIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClearIcon from '../../icons/Clear';\n\nimport classes from './styles/ClearButton.module.css';\n\nexport const ClearButton = ({ onClear }) => (\n    <button className={classes.button} onClick={onClear}>\n        <span>\n            <ClearIcon className={classes.icon} color=\"action\" />\n        </span>\n    </button>\n);\n\nClearButton.propTypes = {\n    onClear: PropTypes.func.isRequired,\n};\n\nexport default ClearButton;\n","import { combineReducers } from 'redux';\nimport { validateReducer } from '../modules/util';\n\nexport const SET_DASHBOARDS_FILTER_NAME = 'SET_DASHBOARDS_FILTER_NAME';\nexport const SET_DASHBOARDS_FILTER_OWNER = 'SET_DASHBOARDS_FILTER_OWNER';\nexport const SET_DASHBOARDS_FILTER_ORDER = 'SET_DASHBOARDS_FILTER_ORDER';\n\nexport const ownerData = [\n    { id: 'ALL', value: 'All users' },\n    { id: 'ME', value: 'Created by me' },\n    { id: 'OTHERS', value: 'Created by others' },\n];\n\nexport const orderData = [\n    { id: 'NAME:ASC', value: 'Name (asc)' },\n    { id: 'NAME:ASC', value: 'Name (desc)' },\n    { id: 'ITEMS:ASC', value: 'Number of items (asc)' },\n    { id: 'ITEMS:ASC', value: 'Number of items (desc)' },\n    { id: 'CREATED:ASC', value: 'Created date (asc)' },\n    { id: 'CREATED:ASC', value: 'Created date (desc)' },\n];\n\nexport const DEFAULT_STATE_DASHBOARDS_FILTER_NAME = '';\nexport const DEFAULT_STATE_DASHBOARDS_FILTER_OWNER = ownerData[0].id;\nexport const DEFAULT_STATE_DASHBOARDS_FILTER_ORDER = orderData[0].id;\n\nconst name = (state = DEFAULT_STATE_DASHBOARDS_FILTER_NAME, action) => {\n    switch (action.type) {\n        case SET_DASHBOARDS_FILTER_NAME:\n            return validateReducer(\n                action.value,\n                DEFAULT_STATE_DASHBOARDS_FILTER_NAME\n            );\n        default:\n            return state;\n    }\n};\n\nconst owner = (state = DEFAULT_STATE_DASHBOARDS_FILTER_OWNER, action) => {\n    switch (action.type) {\n        case SET_DASHBOARDS_FILTER_OWNER:\n            return validateReducer(\n                action.value,\n                DEFAULT_STATE_DASHBOARDS_FILTER_NAME\n            );\n        default:\n            return state;\n    }\n};\n\nconst order = (state = DEFAULT_STATE_DASHBOARDS_FILTER_ORDER, action) => {\n    switch (action.type) {\n        case SET_DASHBOARDS_FILTER_ORDER:\n            return validateReducer(\n                action.value,\n                DEFAULT_STATE_DASHBOARDS_FILTER_ORDER\n            );\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    name,\n    owner,\n    order,\n});\n\n// selectors\n\nexport const sGetDashboardsFilterRoot = state => state.dashboardsFilter;\n\n// selector dependency level 2\n\nexport const sGetFilterName = state => sGetDashboardsFilterRoot(state).name;\nexport const sGetFilterOwner = state => sGetDashboardsFilterRoot(state).owner;\nexport const sGetFilterOrder = state => sGetDashboardsFilterRoot(state).order;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport i18n from '@dhis2/d2-i18n';\nimport InputField from '@material-ui/core/Input';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { colors } from '@dhis2/ui-core';\n\nimport ClearButton from './ClearButton';\nimport { DEFAULT_STATE_DASHBOARDS_FILTER_NAME } from '../../reducers/dashboardsFilter';\n\nexport const KEYCODE_ENTER = 13;\nexport const KEYCODE_ESCAPE = 27;\n\nconst styles = {\n    filterField: {\n        fontSize: '14px',\n        width: '200px',\n        height: '30px',\n        top: '-4px',\n    },\n    searchIcon: {\n        color: colors.grey700,\n        width: '20px',\n        height: '20px',\n    },\n};\n\nexport class Filter extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: DEFAULT_STATE_DASHBOARDS_FILTER_NAME,\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            value: nextProps.name,\n        });\n    }\n\n    setFilterValue = event => {\n        event.preventDefault();\n\n        this.props.onChangeName(event.target.value);\n    };\n\n    handleKeyUp = event => {\n        switch (event.keyCode) {\n            case KEYCODE_ENTER:\n                this.props.onKeypressEnter();\n                break;\n            case KEYCODE_ESCAPE:\n                this.props.onChangeName();\n                break;\n            default:\n                break;\n        }\n    };\n\n    render() {\n        const { classes, name, onChangeName } = this.props;\n\n        const startAdornment = (\n            <InputAdornment position=\"start\">\n                <SearchIcon className={classes.searchIcon} />\n            </InputAdornment>\n        );\n\n        const endAdornment =\n            name !== '' && name !== null ? (\n                <InputAdornment position=\"end\">\n                    <ClearButton onClear={() => onChangeName()} />\n                </InputAdornment>\n            ) : null;\n\n        return (\n            <InputField\n                className={classes.filterField}\n                placeholder={i18n.t('Search for a dashboard')}\n                startAdornment={startAdornment}\n                endAdornment={endAdornment}\n                value={this.state.value}\n                onChange={this.setFilterValue}\n                onKeyUp={this.handleKeyUp}\n            />\n        );\n    }\n}\n\nFilter.propTypes = {\n    classes: PropTypes.object,\n    name: PropTypes.string,\n    onChangeName: PropTypes.func,\n    onKeypressEnter: PropTypes.func,\n};\n\nFilter.defaultProps = {\n    name: '',\n    onChangeName: Function.prototype,\n};\n\nexport default withStyles(styles)(Filter);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport ControlBar from './ControlBar';\nimport arraySort from 'd2-utilizr/lib/arraySort';\nimport PropTypes from 'prop-types';\n\nimport Chip from './DashboardItemChip';\nimport AddCircleIcon from '../../icons/AddCircle';\nimport Filter from './Filter';\nimport ShowMoreButton from './ShowMoreButton';\nimport {\n    FIRST_ROW_PADDING_HEIGHT,\n    MIN_ROW_COUNT,\n    getRowsHeight,\n    getControlBarHeight,\n    getNumRowsFromHeight,\n} from './controlBarDimensions';\nimport { sGetControlBarUserRows } from '../../reducers/controlBar';\nimport { sGetAllDashboards } from '../../reducers/dashboards';\nimport { sGetFilterName } from '../../reducers/dashboardsFilter';\nimport { sGetSelectedId } from '../../reducers/selected';\nimport { acSetControlBarUserRows } from '../../actions/controlBar';\nimport { acSetFilterName } from '../../actions/dashboardsFilter';\nimport { orObject, orArray } from '../../modules/util';\nimport { apiPostControlBarRows } from '../../api/controlBar';\n\nimport classes from './styles/DashboardsBar.module.css';\n\nexport const MAX_ROW_COUNT = 10;\n\nexport class DashboardsBar extends Component {\n    state = {\n        rows: MIN_ROW_COUNT,\n    };\n\n    setInitialDashboardState = rows => {\n        this.setState({ rows, isMaxHeight: rows === MAX_ROW_COUNT });\n    };\n\n    componentDidMount() {\n        this.setInitialDashboardState(this.props.userRows);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setInitialDashboardState(nextProps.userRows);\n    }\n\n    onChangeHeight = newHeight => {\n        const adjustedHeight = newHeight - 52; // don't rush the transition to a bigger row count\n        const newRows = Math.max(\n            MIN_ROW_COUNT,\n            getNumRowsFromHeight(adjustedHeight)\n        );\n\n        if (newRows !== this.state.rows) {\n            const newRowCount = Math.min(newRows, MAX_ROW_COUNT);\n\n            this.props.onChangeHeight(newRowCount);\n        }\n    };\n\n    onEndDrag = () => {\n        return apiPostControlBarRows(this.state.rows);\n    };\n\n    onToggleMaxHeight = () => {\n        const rows =\n            this.state.rows === MAX_ROW_COUNT\n                ? this.props.userRows\n                : MAX_ROW_COUNT;\n\n        this.setState({ rows, isMaxHeight: !this.state.isMaxHeight });\n    };\n\n    onSelectDashboard = () => {\n        this.props.history.push(`/${this.props.dashboards[0].id}`);\n    };\n\n    render() {\n        const { dashboards, name, selectedId, onChangeFilterName } = this.props;\n\n        const rowCount = this.state.isMaxHeight\n            ? MAX_ROW_COUNT\n            : this.state.rows;\n        const controlBarHeight = getControlBarHeight(rowCount);\n        const contentWrapperStyle = {\n            padding: `${FIRST_ROW_PADDING_HEIGHT}px 6px 0 6px`,\n            overflowY: this.state.isMaxHeight ? 'auto' : 'hidden',\n            height: getRowsHeight(rowCount) + FIRST_ROW_PADDING_HEIGHT,\n        };\n\n        return (\n            <ControlBar\n                height={controlBarHeight}\n                onChangeHeight={this.onChangeHeight}\n                onEndDrag={this.onEndDrag}\n                editMode={false}\n            >\n                <div style={contentWrapperStyle}>\n                    <div className={classes.leftControls}>\n                        <Link\n                            style={{\n                                display: 'inline-block',\n                                textDecoration: 'none',\n                                marginRight: 10,\n                                position: 'relative',\n                                top: '2px',\n                            }}\n                            to={'/new'}\n                        >\n                            <AddCircleIcon />\n                        </Link>\n                        <Filter\n                            name={name}\n                            onChangeName={onChangeFilterName}\n                            onKeypressEnter={this.onSelectDashboard}\n                        />\n                    </div>\n                    {orArray(dashboards).map(dashboard => (\n                        <Chip\n                            key={dashboard.id}\n                            label={dashboard.displayName}\n                            starred={dashboard.starred}\n                            dashboardId={dashboard.id}\n                            selected={dashboard.id === selectedId}\n                        />\n                    ))}\n                </div>\n                <ShowMoreButton\n                    onClick={this.onToggleMaxHeight}\n                    isMaxHeight={this.state.isMaxHeight}\n                    disabled={this.props.userRows === MAX_ROW_COUNT}\n                />\n            </ControlBar>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    dashboards: sGetAllDashboards(state),\n    name: sGetFilterName(state),\n    userRows: sGetControlBarUserRows(state),\n    selectedId: sGetSelectedId(state),\n});\n\nconst mapDispatchToProps = {\n    onChangeHeight: acSetControlBarUserRows,\n    onChangeFilterName: acSetFilterName,\n};\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    const dashboards = Object.values(orObject(stateProps.dashboards));\n    const displayDashboards = arraySort(\n        dashboards.filter(d =>\n            d.displayName.toLowerCase().includes(stateProps.name.toLowerCase())\n        ),\n        'ASC',\n        'displayName'\n    );\n\n    return {\n        ...stateProps,\n        ...ownProps,\n        ...dispatchProps,\n        dashboards: [\n            ...displayDashboards.filter(d => d.starred),\n            ...displayDashboards.filter(d => !d.starred),\n        ],\n    };\n};\n\nDashboardsBar.propTypes = {\n    dashboards: PropTypes.array,\n    history: PropTypes.object,\n    name: PropTypes.string,\n    selectedId: PropTypes.string,\n    userRows: PropTypes.number,\n    onChangeFilterName: PropTypes.func,\n    onChangeHeight: PropTypes.func,\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps,\n        mergeProps\n    )(DashboardsBar)\n);\n","import {\n    SET_DASHBOARDS_FILTER_NAME,\n    SET_DASHBOARDS_FILTER_OWNER,\n    SET_DASHBOARDS_FILTER_ORDER,\n} from '../reducers/dashboardsFilter';\n\n// actions\n\nexport const acSetFilterName = value => ({\n    type: SET_DASHBOARDS_FILTER_NAME,\n    value,\n});\n\nexport const acSetFilterOwner = value => ({\n    type: SET_DASHBOARDS_FILTER_OWNER,\n    value,\n});\n\nexport const acSetFilterOrder = value => ({\n    type: SET_DASHBOARDS_FILTER_ORDER,\n    value,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n    getTopOffset,\n    MIN_ROW_COUNT,\n} from '../ControlBar/controlBarDimensions';\nimport { sGetControlBarUserRows } from '../../reducers/controlBar';\n\nconst DashboardVerticalOffset = props => {\n    const rows = props.editMode ? MIN_ROW_COUNT : props.userRows;\n    const marginTop = getTopOffset(rows);\n\n    return <div className=\"page-container-top-margin\" style={{ marginTop }} />;\n};\n\nconst mapStateToProps = state => ({\n    userRows: sGetControlBarUserRows(state),\n});\n\nDashboardVerticalOffset.propTypes = {\n    editMode: PropTypes.bool,\n    userRows: PropTypes.number,\n};\n\nexport default connect(mapStateToProps)(DashboardVerticalOffset);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { MenuItem, colors } from '@dhis2/ui-core';\n\nconst HeaderMenuItem = ({ title }) => (\n    <MenuItem\n        dense\n        key={title}\n        disabled\n        label={\n            <p style={{ color: colors.grey800, fontWeight: '600' }}>{title}</p>\n        }\n    />\n);\n\nHeaderMenuItem.propTypes = {\n    title: PropTypes.string.isRequired,\n};\n\nexport default HeaderMenuItem;\n","import React from 'react';\nimport { colors } from '@dhis2/ui-core';\nimport PropTypes from 'prop-types';\n\nconst LaunchIcon = ({ className }) => (\n    <svg\n        className={className}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"12\"\n        height=\"12\"\n        fill={colors.grey600}\n        viewBox=\"0 0 24 24\"\n    >\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\" />\n    </svg>\n);\n\nLaunchIcon.propTypes = {\n    className: PropTypes.string,\n};\n\nexport default LaunchIcon;\n","import React from 'react';\nimport { MenuItem, colors } from '@dhis2/ui-core';\nimport i18n from '@dhis2/d2-i18n';\nimport PropTypes from 'prop-types';\nimport { visTypeIcons } from '@dhis2/analytics';\n\nimport { getItemIcon, VISUALIZATION } from '../../modules/itemTypes';\nimport LaunchIcon from '../../icons/Launch';\n\nimport classes from './styles/ContentMenuItem.module.css';\n\nconst LaunchLink = ({ url }) => (\n    <a\n        onClick={e => e.stopPropagation()}\n        className={classes.launchLink}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={url}\n    >\n        <LaunchIcon />\n    </a>\n);\n\nLaunchLink.propTypes = {\n    url: PropTypes.string,\n};\n\nconst InsertButton = () => (\n    <button className={classes.buttonInsert}>{i18n.t('Insert')}</button>\n);\n\nconst ContentMenuItem = ({ type, name, onInsert, url, visType }) => {\n    const ItemIcon = getItemIcon(type);\n\n    const renderedItemIcon =\n        type === VISUALIZATION ? (\n            visTypeIcons[visType]\n        ) : (\n            <ItemIcon style={{ fill: colors.grey600 }} />\n        );\n\n    return (\n        <MenuItem\n            dense\n            onClick={onInsert}\n            label={\n                <div className={classes.menuItem}>\n                    <div className={classes.label}>\n                        <span style={{ margin: '6px' }}>\n                            {renderedItemIcon}\n                        </span>\n                        <span>{name}</span>\n                        {url ? <LaunchLink url={url} /> : null}\n                    </div>\n                    <InsertButton />\n                </div>\n            }\n        />\n    );\n};\n\nContentMenuItem.propTypes = {\n    name: PropTypes.string,\n    type: PropTypes.string,\n    url: PropTypes.string,\n    visType: PropTypes.string,\n    onInsert: PropTypes.func,\n};\n\nexport default ContentMenuItem;\n","import { sGetEditDashboardRoot } from '../../reducers/editDashboard';\nimport { itemTypeMap } from '../../modules/itemTypes';\nimport {\n    acAddDashboardItem,\n    acUpdateDashboardItem,\n} from '../../actions/editDashboard';\n\nexport const tAddListItemContent = (type, content) => (dispatch, getState) => {\n    const state = getState();\n    const listItemType = itemTypeMap[type].propName;\n    const dashboardItems = sGetEditDashboardRoot(state).dashboardItems;\n    const dashboardItemIndex = dashboardItems.findIndex(\n        item => item.type === type\n    );\n    let dashboardItem;\n\n    // Reports/Resources/Users dashboard item type already present in dashboard\n    if (dashboardItemIndex > -1) {\n        dashboardItem = dashboardItems[dashboardItemIndex];\n        dashboardItem[listItemType].push(content);\n\n        dispatch(acUpdateDashboardItem(dashboardItem));\n    } else {\n        dashboardItem = {\n            type: type,\n            content: [content],\n        };\n\n        dispatch(acAddDashboardItem(dashboardItem));\n    }\n};\n","import i18n from '@dhis2/d2-i18n';\nimport {\n    spacerContent,\n    VISUALIZATION,\n    MAP,\n    EVENT_CHART,\n    EVENT_REPORT,\n    USERS,\n    REPORTS,\n    RESOURCES,\n    APP,\n    MESSAGES,\n    TEXT,\n    SPACER,\n} from '../../modules/itemTypes';\n\nexport const singleItems = [\n    {\n        id: 'additional',\n        header: i18n.t('Additional items'),\n        items: [\n            {\n                type: TEXT,\n                name: i18n.t('Text box'),\n                content: '',\n            },\n            {\n                type: MESSAGES,\n                name: i18n.t('Messages'),\n                content: 'true',\n            },\n            {\n                type: SPACER,\n                name: i18n.t('Spacer'),\n                content: spacerContent,\n            },\n        ],\n    },\n];\n\n// categorizedItems are grouped in the item selector menu\nexport const categorizedItems = [\n    VISUALIZATION,\n    MAP,\n    EVENT_REPORT,\n    EVENT_CHART,\n    USERS,\n    REPORTS,\n    RESOURCES,\n    APP,\n];\n\n// listItemTypes are included in a single dashboard item\nexport const listItemTypes = [REPORTS, RESOURCES, USERS];\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\nimport { MenuItem, Divider } from '@dhis2/ui-core';\n\nimport HeaderMenuItem from './HeaderMenuItem';\nimport ContentMenuItem from './ContentMenuItem';\n\nimport { tAddListItemContent } from './actions';\nimport { acAddDashboardItem } from '../../actions/editDashboard';\nimport { getItemUrl, APP, VISUALIZATION } from '../../modules/itemTypes';\nimport { categorizedItems, listItemTypes } from './selectableItems';\n\nimport classes from './styles/CategorizedMenuGroup.module.css';\n\nclass CategorizedMenuGroup extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            seeMore: false,\n        };\n    }\n\n    addItem = item => () => {\n        const { type, acAddDashboardItem, tAddListItemContent } = this.props;\n\n        if (type === APP) {\n            acAddDashboardItem({ type, content: item.key });\n        } else {\n            const newItem = {\n                id: item.id,\n                name: item.displayName || item.name,\n            };\n\n            if (listItemTypes.includes(type)) {\n                tAddListItemContent(type, newItem);\n            } else {\n                acAddDashboardItem({ type, content: newItem });\n            }\n        }\n    };\n\n    toggleSeeMore = () => {\n        this.setState({ seeMore: !this.state.seeMore });\n\n        this.props.onChangeItemsLimit(this.props.type);\n    };\n\n    render() {\n        const { title, type, items, hasMore } = this.props;\n        return (\n            <Fragment>\n                <HeaderMenuItem title={title} />\n                {items.map(item => {\n                    const itemUrl = getItemUrl(type, item, this.context.d2);\n                    return (\n                        <ContentMenuItem\n                            key={item.id || item.key}\n                            type={type}\n                            visType={type === VISUALIZATION ? item.type : type}\n                            name={item.displayName || item.name}\n                            onInsert={this.addItem(item)}\n                            url={itemUrl}\n                        />\n                    );\n                })}\n                {hasMore ? (\n                    <MenuItem\n                        dense\n                        key={`showmore${title}`}\n                        onClick={this.toggleSeeMore}\n                        label={\n                            <button className={classes.showMoreButton}>\n                                {this.state.seeMore\n                                    ? i18n.t('Show fewer')\n                                    : i18n.t('Show more')}\n                            </button>\n                        }\n                    />\n                ) : null}\n                <Divider margin=\"8px 0px\" />\n            </Fragment>\n        );\n    }\n}\n\nCategorizedMenuGroup.propTypes = {\n    items: PropTypes.array.isRequired,\n    title: PropTypes.string.isRequired,\n    type: PropTypes.oneOf(categorizedItems).isRequired,\n    onChangeItemsLimit: PropTypes.func.isRequired,\n    acAddDashboardItem: PropTypes.func,\n    hasMore: PropTypes.bool,\n    tAddListItemContent: PropTypes.func,\n};\n\nCategorizedMenuGroup.contextTypes = {\n    d2: PropTypes.object.isRequired,\n};\n\nexport default connect(\n    null,\n    {\n        acAddDashboardItem,\n        tAddListItemContent,\n    }\n)(CategorizedMenuGroup);\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport HeaderMenuItem from './HeaderMenuItem';\nimport ContentMenuItem from './ContentMenuItem';\nimport { acAddDashboardItem } from '../../actions/editDashboard';\n\nexport const SinglesMenuGroup = ({ acAddDashboardItem, category }) => {\n    const addToDashboard = ({ type, content }) => () => {\n        acAddDashboardItem({ type, content });\n    };\n\n    return (\n        <Fragment>\n            <HeaderMenuItem title={category.header} />\n            {category.items.map(item => (\n                <ContentMenuItem\n                    key={item.type}\n                    type={item.type}\n                    name={item.name}\n                    onInsert={addToDashboard(item)}\n                />\n            ))}\n        </Fragment>\n    );\n};\n\nSinglesMenuGroup.propTypes = {\n    acAddDashboardItem: PropTypes.func,\n    category: PropTypes.object,\n};\n\nexport default connect(\n    null,\n    { acAddDashboardItem }\n)(SinglesMenuGroup);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport Popover from '@material-ui/core/Popover';\nimport { InputField, Menu } from '@dhis2/ui-core';\n\nimport CategorizedMenuGroup from './CategorizedMenuGroup';\nimport SinglesMenuGroup from './SinglesMenuGroup';\nimport { singleItems, categorizedItems } from './selectableItems';\nimport { itemTypeMap, getDefaultItemCount } from '../../modules/itemTypes';\n\nimport './styles/ItemSelector.css';\n\nconst ItemSearchField = props => (\n    <InputField\n        name=\"Dashboard item search\"\n        label={i18n.t('Search for items to add to this dashboard')}\n        type=\"text\"\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n        value={props.value}\n    />\n);\n\nclass ItemSelector extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            anchorEl: null,\n            open: false,\n            maxOptions: new Set(),\n            items: undefined,\n            filter: '',\n        };\n    }\n\n    closeList = () => {\n        this.setState({ open: false, filter: '' });\n    };\n\n    openList = (_, event) => {\n        this.fetchItems();\n\n        this.setState({\n            anchorEl: event.currentTarget,\n            open: true,\n        });\n    };\n\n    setFilter = (_, event) => {\n        this.setState({ filter: event.target.value }, this.fetchItems);\n    };\n\n    getCategorizedMenuGroups = () =>\n        categorizedItems\n            .filter(type => {\n                const itemType = itemTypeMap[type];\n                return (\n                    this.state.items && this.state.items[itemType.endPointName]\n                );\n            })\n            .map(type => {\n                const itemType = itemTypeMap[type];\n                const itemCount = getDefaultItemCount(type);\n                const allItems = this.state.items[itemType.endPointName];\n                const hasMore = allItems.length > itemCount;\n                const items = this.state.maxOptions.has(itemType.id)\n                    ? allItems\n                    : allItems.slice(0, itemCount);\n\n                return (\n                    <CategorizedMenuGroup\n                        key={type}\n                        type={type}\n                        title={itemType.pluralTitle}\n                        items={items}\n                        onChangeItemsLimit={this.fetchItems}\n                        hasMore={hasMore}\n                    />\n                );\n            });\n\n    getSinglesMenuGroups = () =>\n        singleItems.map(category => (\n            <SinglesMenuGroup key={category.id} category={category} />\n        ));\n\n    getMenuGroups = () =>\n        this.getCategorizedMenuGroups().concat(this.getSinglesMenuGroups());\n\n    fetchItems = async type => {\n        if (type) {\n            const maxOptions = this.state.maxOptions;\n\n            if (maxOptions.has(type)) {\n                maxOptions.delete(type);\n            } else {\n                maxOptions.add(type);\n            }\n\n            this.setState({ maxOptions });\n        } else {\n            this.setState({\n                maxOptions: new Set(),\n            });\n        }\n\n        let queryString = '?count=11';\n        if ([...this.state.maxOptions.values()].length) {\n            queryString +=\n                '&max=' + [...this.state.maxOptions.values()].join('&max=');\n        }\n\n        const filter = this.state.filter ? `/${this.state.filter}` : '';\n\n        this.context.d2.Api.getApi()\n            .get(`dashboards/q${filter}${queryString}`)\n            .then(response => this.setState({ items: response }))\n            .catch(console.error);\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <ItemSearchField\n                    value={this.state.filter}\n                    onChange={this.setFilter}\n                    onFocus={this.openList}\n                />\n                <Popover\n                    className=\"dashboard-item-selector\"\n                    open={this.state.open}\n                    onClose={this.closeList}\n                    anchorEl={this.state.anchorEl}\n                    anchorOrigin={{ horizontal: 'left', vertical: 'bottom' }}\n                    transformOrigin={{ horizontal: 'left', vertical: 'top' }}\n                    style={{ height: '70vh' }}\n                    PaperProps={{ style: { width: '700px' } }}\n                    disableAutoFocus={true}\n                    disableRestoreFocus={true}\n                >\n                    <Menu>{this.getMenuGroups()}</Menu>\n                </Popover>\n            </Fragment>\n        );\n    }\n}\n\nItemSearchField.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n};\n\nItemSelector.contextTypes = {\n    d2: PropTypes.object.isRequired,\n};\n\nexport default ItemSelector;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport i18n from '@dhis2/d2-i18n';\nimport { InputField, TextAreaField } from '@dhis2/ui-core';\n\nimport ItemSelector from '../ItemSelector/ItemSelector';\nimport {\n    acSetDashboardTitle,\n    acSetDashboardDescription,\n} from '../../actions/editDashboard';\nimport { orObject } from '../../modules/util';\nimport { sGetEditDashboardRoot } from '../../reducers/editDashboard';\n\nconst styles = {\n    section: { display: 'flex', justifyContent: 'space-between' },\n    titleDescription: {\n        flex: '3',\n        marginRight: '50px',\n    },\n    title: {\n        display: 'block',\n        clear: 'both',\n    },\n    description: {\n        display: 'block',\n        clear: 'both',\n        marginTop: '15px',\n    },\n    underline: {\n        '&::before': {\n            borderBottom: `none`,\n        },\n        '&:hover::before': {\n            borderBottom: `none!important`,\n        },\n    },\n    input: {\n        backgroundColor: 'rgba(0, 0, 10, 0.05)',\n        borderRadius: '4px',\n        width: '100%',\n        '&:hover': {\n            backgroundColor: 'rgba(0, 0, 10, 0.08)',\n        },\n    },\n    itemSelector: {\n        flex: '2',\n        position: 'relative',\n    },\n};\n\nexport const EditTitleBar = ({\n    name,\n    description,\n    onChangeTitle,\n    onChangeDescription,\n    classes,\n}) => {\n    const updateTitle = (_, e) => {\n        onChangeTitle(e.target.value);\n    };\n\n    const updateDescription = (_, e) => {\n        onChangeDescription(e.target.value);\n    };\n\n    return (\n        <section className={classes.section}>\n            <div className={classes.titleDescription}>\n                <InputField\n                    className={classes.title}\n                    name=\"Dashboard title input\"\n                    label={i18n.t('Dashboard title')}\n                    type=\"text\"\n                    onChange={updateTitle}\n                    value={name}\n                />\n                <TextAreaField\n                    className={classes.description}\n                    name=\"Dashboard description input\"\n                    label={i18n.t('Dashboard description')}\n                    onChange={updateDescription}\n                    value={description}\n                />\n            </div>\n            <div className={classes.itemSelector}>\n                <ItemSelector />\n            </div>\n        </section>\n    );\n};\n\nconst mapStateToProps = state => {\n    const selectedDashboard = orObject(sGetEditDashboardRoot(state));\n\n    return {\n        name: selectedDashboard.name,\n        description: selectedDashboard.description,\n    };\n};\n\nconst mapDispatchToProps = {\n    onChangeTitle: acSetDashboardTitle,\n    onChangeDescription: acSetDashboardDescription,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles)(EditTitleBar));\n\nEditTitleBar.propTypes = {\n    onChangeDescription: PropTypes.func.isRequired,\n    onChangeTitle: PropTypes.func.isRequired,\n    classes: PropTypes.object,\n    description: PropTypes.string,\n    name: PropTypes.string,\n};\n\nEditTitleBar.defaultProps = {\n    name: '',\n    description: '',\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@dhis2/ui-core';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport i18n from '@dhis2/d2-i18n';\n\nimport {\n    PeriodDimension,\n    DynamicDimension,\n    OrgUnitDimension,\n    DIMENSION_ID_PERIOD,\n    DIMENSION_ID_ORGUNIT,\n} from '@dhis2/analytics';\n\nconst peId = DIMENSION_ID_PERIOD;\nconst ouId = DIMENSION_ID_ORGUNIT;\n\nclass FilterDialog extends Component {\n    onConfirm = id => () => this.props.onConfirm(id);\n\n    dialogContent() {\n        const { displayNameProperty, dimension, selectedItems } = this.props;\n        const dialogId = dimension.id;\n\n        const commonProps = {\n            d2: this.context.d2,\n            onSelect: this.props.onSelect,\n            onDeselect: this.props.onDeselect,\n            onReorder: this.props.onReorder,\n        };\n\n        switch (dialogId) {\n            case peId: {\n                return (\n                    <PeriodDimension\n                        selectedPeriods={selectedItems}\n                        {...commonProps}\n                    />\n                );\n            }\n            case ouId:\n                return (\n                    <OrgUnitDimension\n                        displayNameProperty={displayNameProperty}\n                        ouItems={selectedItems}\n                        {...commonProps}\n                    />\n                );\n            default:\n                return (\n                    <DynamicDimension\n                        selectedItems={selectedItems}\n                        dialogId={dialogId}\n                        dialogTitle={dimension.name}\n                        {...commonProps}\n                    />\n                );\n        }\n    }\n\n    render() {\n        const { dimension, onClose } = this.props;\n        const dialogId = dimension.id;\n\n        return (\n            <Dialog\n                open={!!dialogId}\n                maxWidth=\"lg\"\n                disableEnforceFocus\n                onClose={onClose}\n            >\n                {dialogId && this.dialogContent()}\n                <DialogActions>\n                    <Button kind=\"secondary\" onClick={onClose}>\n                        {i18n.t('Cancel')}\n                    </Button>\n                    <Button kind=\"primary\" onClick={this.onConfirm(dialogId)}>\n                        {i18n.t('Confirm')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nFilterDialog.propTypes = {\n    dimension: PropTypes.object,\n    displayNameProperty: PropTypes.string,\n    selectedItems: PropTypes.array,\n    onClose: PropTypes.func,\n    onConfirm: PropTypes.func,\n    onDeselect: PropTypes.func,\n    onReorder: PropTypes.func,\n    onSelect: PropTypes.func,\n};\n\nFilterDialog.contextTypes = {\n    d2: PropTypes.object,\n};\n\nexport default FilterDialog;\n","export const SET_ACTIVE_MODAL_DIMENSION = 'SET_ACTIVE_MODAL_DIMENSION';\nexport const CLEAR_ACTIVE_MODAL_DIMENSION = 'CLEAR_ACTIVE_MODAL_DIMENSION';\n\nexport const DEFAULT_STATE_ACTIVE_MODAL_DIMENSION = {};\n\nexport default (state = DEFAULT_STATE_ACTIVE_MODAL_DIMENSION, action) => {\n    switch (action.type) {\n        case SET_ACTIVE_MODAL_DIMENSION: {\n            return action.value;\n        }\n        case CLEAR_ACTIVE_MODAL_DIMENSION: {\n            return DEFAULT_STATE_ACTIVE_MODAL_DIMENSION;\n        }\n        default:\n            return state;\n    }\n};\n\nexport const sGetActiveModalDimension = state => state.activeModalDimension;\n","import {\n    SET_ACTIVE_MODAL_DIMENSION,\n    CLEAR_ACTIVE_MODAL_DIMENSION,\n} from '../reducers/activeModalDimension';\n\nexport const acSetActiveModalDimension = value => ({\n    type: SET_ACTIVE_MODAL_DIMENSION,\n    value,\n});\n\nexport const acClearActiveModalDimension = () => ({\n    type: CLEAR_ACTIVE_MODAL_DIMENSION,\n});\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Popover from '@material-ui/core/Popover';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport { withTheme } from '@material-ui/core/styles';\n\nimport i18n from '@dhis2/d2-i18n';\nimport { DimensionsPanel } from '@dhis2/analytics';\n\nimport { Button } from '@dhis2/ui-core';\nimport FilterDialog from './FilterDialog';\n\nimport { sGetSettingsDisplayNameProperty } from '../../reducers/settings';\nimport { sGetActiveModalDimension } from '../../reducers/activeModalDimension';\nimport { sGetDimensions } from '../../reducers/dimensions';\nimport { sGetFiltersKeys } from '../../reducers/itemFilters';\nimport { sGetEditItemFiltersRoot } from '../../reducers/editItemFilters';\nimport { acAddItemFilter, acRemoveItemFilter } from '../../actions/itemFilters';\nimport {\n    acRemoveEditItemFilter,\n    acSetEditItemFilters,\n} from '../../actions/editItemFilters';\nimport {\n    acClearActiveModalDimension,\n    acSetActiveModalDimension,\n} from '../../actions/activeModalDimension';\n\nclass FilterSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            anchorEl: null,\n        };\n    }\n\n    openPanel = (_, event) => {\n        this.setState({ anchorEl: event.currentTarget });\n    };\n\n    closePanel = () => {\n        this.setState({ anchorEl: null });\n    };\n\n    closeDialog = () => {\n        this.setState({ anchorEl: null });\n\n        this.props.clearActiveModalDimension();\n    };\n\n    selectDimension = id => {\n        this.props.setActiveModalDimension(\n            this.props.dimensions.find(dimension => dimension.id === id)\n        );\n    };\n\n    onSelectItems = ({ dimensionId, items }) => {\n        this.props.setEditItemFilters({\n            ...this.props.selectedItems,\n            [dimensionId]: items,\n        });\n    };\n\n    onDeselectItems = ({ dimensionId, itemIdsToRemove }) => {\n        const oldList = this.props.selectedItems[dimensionId] || [];\n        const newList = oldList.filter(\n            item => !itemIdsToRemove.includes(item.id)\n        );\n\n        if (newList.length) {\n            this.props.setEditItemFilters({\n                ...this.props.selectedItems,\n                [dimensionId]: newList,\n            });\n        } else {\n            this.props.removeEditItemFilter(dimensionId);\n        }\n    };\n\n    onReorderItems = ({ dimensionId, itemIds }) => {\n        const oldList = this.props.selectedItems[dimensionId] || [];\n        const reorderedList = itemIds.map(id =>\n            oldList.find(item => item.id === id)\n        );\n\n        this.props.setEditItemFilters({\n            ...this.props.selectedItems,\n            [dimensionId]: reorderedList,\n        });\n    };\n\n    saveFilter = id => {\n        const filterItems = this.props.selectedItems[id];\n\n        if (filterItems && filterItems.length) {\n            this.props.addItemFilter({\n                id,\n                value: [...filterItems],\n            });\n        } else {\n            this.props.removeItemFilter(id);\n        }\n\n        this.closeDialog();\n    };\n\n    render() {\n        const {\n            theme,\n            displayNameProperty,\n            dimension,\n            dimensions,\n            selectedDimensions,\n            selectedItems,\n        } = this.props;\n\n        return (\n            <Fragment>\n                <Button onClick={this.openPanel}>\n                    {i18n.t('Add filter')}\n                    <ArrowDropDownIcon />\n                </Button>\n                <Popover\n                    open={Boolean(this.state.anchorEl)}\n                    anchorEl={this.state.anchorEl}\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n                    onClose={this.closePanel}\n                    style={{\n                        height: '100%',\n                        fontFamily: theme.typography.fontFamily,\n                    }}\n                >\n                    <DimensionsPanel\n                        style={{ width: '320px' }}\n                        dimensions={dimensions}\n                        onDimensionClick={this.selectDimension}\n                        selectedIds={selectedDimensions}\n                    />\n                </Popover>\n                {dimension ? (\n                    <FilterDialog\n                        displayNameProperty={displayNameProperty}\n                        dimension={dimension}\n                        selectedItems={selectedItems[dimension.id] || []}\n                        onSelect={this.onSelectItems}\n                        onDeselect={this.onDeselectItems}\n                        onReorder={this.onReorderItems}\n                        onClose={this.closeDialog}\n                        onConfirm={this.saveFilter}\n                    />\n                ) : null}\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    displayNameProperty: sGetSettingsDisplayNameProperty(state),\n    dimension: sGetActiveModalDimension(state),\n    dimensions: sGetDimensions(state),\n    selectedDimensions: sGetFiltersKeys(state),\n    selectedItems: sGetEditItemFiltersRoot(state),\n});\n\nFilterSelector.propTypes = {\n    addItemFilter: PropTypes.func,\n    clearActiveModalDimension: PropTypes.func,\n    dimension: PropTypes.object,\n    dimensions: PropTypes.array,\n    displayNameProperty: PropTypes.string,\n    removeEditItemFilter: PropTypes.func,\n    removeItemFilter: PropTypes.func,\n    selectedDimensions: PropTypes.array,\n    selectedItems: PropTypes.object,\n    setActiveModalDimension: PropTypes.func,\n    setEditItemFilters: PropTypes.func,\n    theme: PropTypes.object,\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        clearActiveModalDimension: acClearActiveModalDimension,\n        setActiveModalDimension: acSetActiveModalDimension,\n        addItemFilter: acAddItemFilter,\n        removeItemFilter: acRemoveItemFilter,\n        removeEditItemFilter: acRemoveEditItemFilter,\n        setEditItemFilters: acSetEditItemFilters,\n    }\n)(withTheme()(FilterSelector));\n","import React, { Component } from 'react';\nimport InfoOutlineIcon from '@material-ui/icons/InfoOutlined';\nimport { colors } from '@dhis2/ui-core';\nimport PropTypes from 'prop-types';\n\nclass Info extends Component {\n    show = false;\n\n    toggle() {\n        this.show = !this.show;\n        return this.show;\n    }\n\n    render() {\n        return (\n            <div onClick={() => this.props.onClick(this.toggle())}>\n                <InfoOutlineIcon style={{ fill: colors.grey600 }} />\n            </div>\n        );\n    }\n}\n\nInfo.propTypes = {\n    onClick: PropTypes.func,\n};\n\nexport default Info;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport i18n from '@dhis2/d2-i18n';\nimport SharingDialog from '@dhis2/d2-ui-sharing-dialog';\nimport Star from '@material-ui/icons/Star';\nimport StarBorder from '@material-ui/icons/StarBorder';\n\nimport { orObject } from '../../modules/util';\nimport { tStarDashboard } from '../../actions/dashboards';\nimport { acSetSelectedShowDescription } from '../../actions/selected';\nimport FilterSelector from '../ItemFilter/FilterSelector';\nimport { Button } from '@dhis2/ui-core';\nimport Info from './Info';\nimport {\n    sGetSelectedId,\n    sGetSelectedShowDescription,\n} from '../../reducers/selected';\nimport {\n    sGetDashboardById,\n    sGetDashboardItems,\n} from '../../reducers/dashboards';\nimport { colors } from '@dhis2/ui-core';\n\nconst NO_DESCRIPTION = i18n.t('No description');\n\nconst styles = {\n    actions: {\n        display: 'flex',\n        alignItems: 'center',\n        marginLeft: '20px',\n    },\n    starIcon: {\n        fill: colors.grey600,\n    },\n    textButton: {\n        minWidth: '30px',\n        top: '1px',\n    },\n    editLink: {\n        display: 'inline-block',\n        verticalAlign: 'top',\n        textDecoration: 'none',\n        marginRight: '4px',\n    },\n    titleBar: {\n        display: 'flex',\n        alignItems: 'flex-start',\n    },\n    titleBarIcon: {\n        marginLeft: 5,\n        position: 'relative',\n        top: 1,\n        cursor: 'pointer',\n    },\n};\n\nclass ViewTitleBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            sharingDialogIsOpen: false,\n        };\n    }\n\n    toggleSharingDialog = () =>\n        this.setState({ sharingDialogIsOpen: !this.state.sharingDialogIsOpen });\n\n    render() {\n        const {\n            id,\n            name,\n            description,\n            access,\n            style,\n            showDescription,\n            starred,\n            onStarClick,\n            onInfoClick,\n            classes,\n        } = this.props;\n\n        const titleStyle = Object.assign({}, style.title, {\n            cursor: 'default',\n            userSelect: 'text',\n            top: '7px',\n        });\n\n        const StarIcon = starred ? Star : StarBorder;\n\n        return (\n            <Fragment>\n                <div className={classes.titleBar}>\n                    <span style={titleStyle}>{name}</span>\n                    <div className={classes.actions}>\n                        <div\n                            className={classes.titleBarIcon}\n                            onClick={onStarClick}\n                        >\n                            <StarIcon className={classes.starIcon} />\n                        </div>\n                        <div className={classes.titleBarIcon}>\n                            <Info onClick={onInfoClick} />\n                        </div>\n                        <div style={{ marginLeft: '10px' }}>\n                            {access.update ? (\n                                <Link\n                                    className={classes.editLink}\n                                    to={`/${id}/edit`}\n                                >\n                                    <Button>{i18n.t('Edit')}</Button>\n                                </Link>\n                            ) : null}\n                            {access.manage ? (\n                                <span style={{ marginRight: '4px' }}>\n                                    <Button onClick={this.toggleSharingDialog}>\n                                        {i18n.t('Share')}\n                                    </Button>\n                                </span>\n                            ) : null}\n                            <span style={{ marginRight: '4px' }}>\n                                <FilterSelector />\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                {showDescription ? (\n                    <div\n                        className=\"dashboard-description\"\n                        style={Object.assign(\n                            { paddingTop: '5px', paddingBottom: '5px' },\n                            style.description,\n                            !description ? { color: '#888' } : {}\n                        )}\n                    >\n                        {description || NO_DESCRIPTION}\n                    </div>\n                ) : null}\n                {id ? (\n                    <SharingDialog\n                        d2={this.context.d2}\n                        id={id}\n                        type=\"dashboard\"\n                        open={this.state.sharingDialogIsOpen}\n                        onRequestClose={this.toggleSharingDialog}\n                    />\n                ) : null}\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const id = sGetSelectedId(state);\n    const dashboard = orObject(sGetDashboardById(state, id));\n\n    return {\n        id,\n        name: dashboard.displayName,\n        description: dashboard.displayDescription,\n        dashboardItems: sGetDashboardItems(state),\n        showDescription: sGetSelectedShowDescription(state),\n        starred: dashboard.starred,\n        access: orObject(dashboard.access),\n    };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    const { id, starred, showDescription } = stateProps;\n    const { dispatch } = dispatchProps;\n\n    return {\n        ...stateProps,\n        ...ownProps,\n        onStarClick: () => dispatch(tStarDashboard(id, !starred)),\n        onInfoClick: () =>\n            dispatch(acSetSelectedShowDescription(!showDescription)),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    null,\n    mergeProps\n)(withStyles(styles)(ViewTitleBar));\n\nViewTitleBar.propTypes = {\n    access: PropTypes.object,\n    classes: PropTypes.object,\n    description: PropTypes.string,\n    id: PropTypes.string,\n    name: PropTypes.string,\n    showDescription: PropTypes.bool,\n    starred: PropTypes.bool,\n    style: PropTypes.object,\n    onInfoClick: PropTypes.func,\n    onStarClick: PropTypes.func,\n};\n\nViewTitleBar.defaultProps = {\n    name: '',\n    description: '',\n    starred: false,\n    showDescription: false,\n    onInfoClick: null,\n};\n\nViewTitleBar.contextTypes = {\n    d2: PropTypes.object,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { colors } from '@dhis2/ui-core';\nimport EditTitleBar from './EditTitleBar';\nimport ViewTitleBar from './ViewTitleBar';\n\nimport './TitleBar.css';\n\nconst style = {\n    title: {\n        position: 'relative',\n        fontSize: 21,\n        fontWeight: 500,\n        color: colors.black,\n        minWidth: 50,\n    },\n    description: {\n        fontSize: 14,\n        color: colors.grey800,\n    },\n};\n\nconst TitleBar = ({ edit }) => {\n    return (\n        <div\n            className=\"titlebar-wrapper\"\n            style={{\n                padding: '20px 15px 5px 10px',\n            }}\n        >\n            {edit ? (\n                <EditTitleBar style={style} />\n            ) : (\n                <ViewTitleBar style={style} />\n            )}\n        </div>\n    );\n};\n\nTitleBar.propTypes = {\n    edit: PropTypes.bool,\n};\n\nexport default TitleBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport i18n from '@dhis2/d2-i18n';\n\nimport * as pluginManager from './plugin';\nimport { getBaseUrl, orObject } from '../../../modules/util';\nimport { getGridItemDomId } from '../../ItemGrid/gridUtil';\n\nconst pluginCredentials = d2 => {\n    return {\n        baseUrl: getBaseUrl(d2),\n        auth: d2.Api.getApi().defaultHeaders.Authorization,\n    };\n};\n\nclass DefaultPlugin extends Component {\n    pluginCredentials = null;\n\n    constructor(props, context) {\n        super(props);\n\n        this.d2 = context.d2;\n    }\n\n    shouldPluginReload = prevProps => {\n        // TODO - fix this hack, to handle bug with multiple\n        // rerendering while switching between dashboards.\n        //\n        // To determine if the rendering is happening because of a\n        // dashboard switch, check if the item reference has changed.\n        const reloadAllowed = this.props.item === prevProps.item;\n\n        const filtersChanged = prevProps.itemFilters !== this.props.itemFilters;\n        const vis = orObject(this.props.visualization);\n        const prevVis = orObject(prevProps.visualization);\n        const visChanged =\n            vis.id !== prevVis.id || vis.activeType !== prevVis.activeType;\n\n        return reloadAllowed && (visChanged || filtersChanged);\n    };\n\n    reloadPlugin = prevProps => {\n        if (\n            pluginManager.pluginIsAvailable(\n                this.props.item,\n                this.props.visualization\n            ) &&\n            this.shouldPluginReload(prevProps)\n        ) {\n            const prevVis = orObject(prevProps.visualization);\n            const currentVis = this.props.visualization;\n\n            const useActiveType =\n                currentVis.activeType !== prevVis.activeType ||\n                currentVis.activeType !== this.props.item.type;\n\n            if (\n                useActiveType ||\n                this.props.itemFilters !== prevProps.itemFilters\n            ) {\n                pluginManager.unmount(\n                    this.props.item,\n                    prevVis.activeType || this.props.item.type\n                );\n\n                pluginManager.load(this.props.item, this.props.visualization, {\n                    credentials: this.pluginCredentials,\n                    activeType: useActiveType ? currentVis.activeType : null,\n                });\n            }\n        }\n    };\n\n    componentDidMount() {\n        this.pluginCredentials = pluginCredentials(this.d2);\n\n        if (\n            pluginManager.pluginIsAvailable(\n                this.props.item,\n                this.props.visualization\n            )\n        ) {\n            pluginManager.load(this.props.item, this.props.visualization, {\n                credentials: this.pluginCredentials,\n                activeType: !this.props.editMode ? this.getActiveType() : null,\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        this.reloadPlugin(prevProps);\n    }\n\n    getActiveType = () =>\n        this.props.visualization.activeType || this.props.item.type;\n\n    render() {\n        const { classes, item, visualization, style } = this.props;\n        const pluginIsAvailable = pluginManager.pluginIsAvailable(\n            item,\n            visualization\n        );\n\n        return pluginIsAvailable ? (\n            <div id={getGridItemDomId(item.id)} style={style} />\n        ) : (\n            <div className={classes.textDiv}>\n                {i18n.t('Unable to load the plugin for this item')}\n            </div>\n        );\n    }\n}\n\nDefaultPlugin.contextTypes = {\n    d2: PropTypes.object,\n};\n\nDefaultPlugin.propTypes = {\n    classes: PropTypes.object,\n    editMode: PropTypes.bool,\n    item: PropTypes.object,\n    itemFilters: PropTypes.object,\n    style: PropTypes.object,\n    visualization: PropTypes.object,\n};\n\nDefaultPlugin.defaultProps = {\n    style: {},\n    item: {},\n    itemFilters: {},\n    visualization: {},\n};\n\nexport default DefaultPlugin;\n","import React from 'react';\nimport { colors } from '@dhis2/ui-core';\n\nexport const ThreeDots = () => (\n    <svg\n        height=\"18\"\n        viewBox=\"0 0 18 18\"\n        width=\"18\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path\n            d=\"m4 7.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm10 0c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm-5 0c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z\"\n            fill=\"#6e7a8a\"\n        />\n    </svg>\n);\n\nexport const SpeechBubble = () => (\n    <svg\n        height=\"20\"\n        viewBox=\"0 0 20 20\"\n        width=\"20\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        style={{ margin: '3px 2px 0 2px' }} // Temporary fix for the misaligned icon, should be removed once the icon is replaced\n    >\n        <path\n            d=\"m20 2h-16c-1.1 0-1.99.9-1.99 2l-.01 18 4-4h14c1.1 0 2-.9 2-2v-12c0-1.1-.9-2-2-2zm-2 12h-12v-2h12zm0-3h-12v-2h12zm0-3h-12v-2h12z\"\n            fill=\"#6e7a8a\"\n            fillRule=\"evenodd\"\n            transform=\"translate(-2 -2)\"\n        />\n    </svg>\n);\n\nexport const Warning = () => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        fill={colors.grey600}\n    >\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\" />\n    </svg>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Warning } from './assets/icons';\n\nimport classes from './styles/FatalErrorBoundary.module.css';\n\nclass FatalErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            errorFound: false,\n        };\n    }\n    componentDidCatch(error, info) {\n        this.setState({\n            errorFound: true,\n        });\n        console.log('error: ', error);\n        console.log('info: ', info);\n    }\n    render() {\n        if (this.state.errorFound) {\n            return (\n                <p className={classes.container}>\n                    <span className={classes.icon}>\n                        <Warning />\n                    </span>\n                    <span className={classes.message}>\n                        {i18n.t(\n                            'There was a problem loading this dashboard item'\n                        )}\n                    </span>\n                </p>\n            );\n        }\n        return this.props.children;\n    }\n}\n\nFatalErrorBoundary.propTypes = {\n    children: PropTypes.node,\n};\n\nexport default FatalErrorBoundary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { colors } from '@dhis2/ui-core';\n\nimport classes from './styles/DeleteItemButton.module.css';\n\nconst DeleteItemButton = ({ onClick }) => (\n    <button\n        type=\"button\"\n        className={classes.deleteItemButton}\n        onClick={onClick}\n        title={i18n.t(`Delete item`)}\n    >\n        <DeleteIcon style={{ fill: colors.red500 }} />\n    </button>\n);\n\nDeleteItemButton.propTypes = {\n    onClick: PropTypes.func,\n};\n\nexport default DeleteItemButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { sGetIsEditing } from '../../reducers/editDashboard';\nimport { acRemoveDashboardItem } from '../../actions/editDashboard';\nimport DeleteItemButton from './DeleteItemButton';\n\nimport classes from './styles/ItemHeader.module.css';\n\n// This is the margin-top + margin-bottom defined in the css file\nexport const HEADER_MARGIN_HEIGHT = 12;\n\nconst ItemHeader = props => {\n    const {\n        title,\n        editMode,\n        actionButtons,\n        itemId,\n        acRemoveDashboardItem,\n        forwardedRef,\n    } = props;\n\n    const handleDeleteItem = () => acRemoveDashboardItem(itemId);\n\n    return (\n        <div className={classes.itemHeaderWrap} ref={forwardedRef}>\n            <p className={classes.itemTitle}>{title}</p>\n            {editMode ? (\n                <div className={classes.itemActionsWrap}>\n                    <DeleteItemButton onClick={handleDeleteItem} />\n                </div>\n            ) : (\n                actionButtons && (\n                    <div className={classes.itemActionsWrap}>\n                        {actionButtons}\n                    </div>\n                )\n            )}\n        </div>\n    );\n};\n\nItemHeader.propTypes = {\n    acRemoveDashboardItem: PropTypes.func,\n    actionButtons: PropTypes.node,\n    editMode: PropTypes.bool,\n    forwardedRef: PropTypes.object,\n    itemId: PropTypes.string,\n    title: PropTypes.string,\n};\n\nItemHeader.defaultProps = {\n    forwardedRef: {},\n};\n\nconst mapStateToProps = state => ({\n    editMode: sGetIsEditing(state),\n});\n\nconst mapDispatchToProps = {\n    acRemoveDashboardItem,\n};\n\nconst ConnectedItemHeader = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ItemHeader);\n\n// TODO this is a false positive that is fixed in eslint-plugin-react v7.15\n// github.com/yannickcr/eslint-plugin-react/blob/master/CHANGELOG.md\n/* eslint-disable react/display-name */\nexport default React.forwardRef((props, ref) => (\n    <ConnectedItemHeader {...props} forwardedRef={ref} />\n));\n/* eslint-enable react/display-name */\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    isSingleValue,\n    isYearOverYear,\n    VIS_TYPE_GAUGE,\n    VIS_TYPE_PIE,\n} from '@dhis2/analytics';\nimport { Button, Menu, MenuItem, Divider, colors } from '@dhis2/ui-core';\nimport i18n from '@dhis2/d2-i18n';\nimport Popover from '@material-ui/core/Popover';\nimport TableIcon from '@material-ui/icons/ViewList';\nimport ChartIcon from '@material-ui/icons/InsertChart';\nimport MapIcon from '@material-ui/icons/Public';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nimport { ThreeDots, SpeechBubble } from './assets/icons';\nimport { pluginIsAvailable, getLink } from './plugin';\nimport {\n    CHART,\n    MAP,\n    REPORT_TABLE,\n    EVENT_CHART,\n    EVENT_REPORT,\n    isTrackerDomainType,\n    hasMapView,\n    getAppName,\n} from '../../../modules/itemTypes';\n\nconst iconFill = { fill: colors.grey600 };\n\nconst ItemHeaderButtons = props => {\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const { item, visualization, onSelectActiveType, d2, activeType } = props;\n\n    const isTrackerType = isTrackerDomainType(item.type);\n\n    const onViewTable = () => {\n        handleClose();\n        onSelectActiveType(isTrackerType ? EVENT_REPORT : REPORT_TABLE);\n    };\n\n    const onViewChart = () => {\n        handleClose();\n        onSelectActiveType(isTrackerType ? EVENT_CHART : CHART);\n    };\n\n    const onViewMap = () => {\n        handleClose();\n        onSelectActiveType(MAP);\n    };\n\n    const itemHasMapView = () => hasMapView(item.type);\n\n    const handleMenuClick = (_, event) => setAnchorEl(event.currentTarget);\n\n    const handleInterpretationClick = () => {\n        props.onToggleFooter();\n        if (anchorEl !== null) {\n            handleClose();\n        }\n    };\n\n    const handleClose = () => setAnchorEl(null);\n\n    const type = visualization.type || item.type;\n    const canViewAs =\n        !isSingleValue(type) &&\n        !isYearOverYear(type) &&\n        type !== VIS_TYPE_GAUGE &&\n        type !== VIS_TYPE_PIE;\n\n    const interpretationMenuLabel = props.activeFooter\n        ? i18n.t(`Hide interpretations and details`)\n        : i18n.t(`Show interpretations and details`);\n\n    const ViewAsMenuItems = () => (\n        <>\n            {activeType !== CHART && activeType !== EVENT_CHART && (\n                <MenuItem\n                    dense\n                    label={i18n.t('View as Chart')}\n                    onClick={onViewChart}\n                    icon={<ChartIcon style={iconFill} />}\n                />\n            )}\n            {activeType !== REPORT_TABLE && activeType !== EVENT_REPORT && (\n                <MenuItem\n                    dense\n                    label={i18n.t('View as Table')}\n                    onClick={onViewTable}\n                    icon={<TableIcon style={iconFill} />}\n                />\n            )}\n            {itemHasMapView() && activeType !== MAP && (\n                <MenuItem\n                    dense\n                    label={i18n.t('View as Map')}\n                    onClick={onViewMap}\n                    icon={<MapIcon style={iconFill} />}\n                />\n            )}\n        </>\n    );\n\n    return pluginIsAvailable(item, visualization) ? (\n        <>\n            <Button small secondary onClick={handleMenuClick}>\n                <ThreeDots />\n            </Button>\n            {anchorEl && (\n                <Popover\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                    anchorEl={anchorEl}\n                >\n                    <Menu>\n                        {canViewAs && (\n                            <>\n                                <ViewAsMenuItems />\n                                <Divider />\n                            </>\n                        )}\n                        <MenuItem\n                            dense\n                            icon={<LaunchIcon style={{ fill: '#6e7a8a' }} />}\n                            label={i18n.t('Open in {{appName}} app', {\n                                appName: getAppName(item.type),\n                            })}\n                            href={getLink(item, d2)}\n                            target=\"_blank\"\n                        />\n                        <MenuItem\n                            dense\n                            icon={<SpeechBubble />}\n                            label={interpretationMenuLabel}\n                            onClick={handleInterpretationClick}\n                        />\n                    </Menu>\n                </Popover>\n            )}\n        </>\n    ) : null;\n};\n\nItemHeaderButtons.propTypes = {\n    activeFooter: PropTypes.bool,\n    activeType: PropTypes.string,\n    d2: PropTypes.object,\n    item: PropTypes.object,\n    visualization: PropTypes.object,\n    onSelectActiveType: PropTypes.func,\n    onToggleFooter: PropTypes.func,\n};\n\nexport default ItemHeaderButtons;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { colors } from '@dhis2/ui-core';\nimport { getId } from './plugin';\nimport InterpretationsComponent from '@dhis2/d2-ui-interpretations';\n\nconst style = {\n    scrollContainer: {\n        overflowY: 'auto',\n        height: '340px',\n    },\n    line: {\n        margin: '-1px 0px 0px',\n        height: '1px',\n        border: 'none',\n        backgroundColor: colors.grey100,\n    },\n};\n\nclass ItemFooter extends Component {\n    render() {\n        const objectId = getId(this.props.item);\n\n        return (\n            <div className=\"dashboard-item-footer\">\n                <hr style={style.line} />\n                <div style={style.scrollContainer}>\n                    <InterpretationsComponent\n                        d2={this.context.d2}\n                        item={this.props.item}\n                        type={this.props.item.type.toLowerCase()}\n                        id={objectId}\n                        appName=\"dashboard\"\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nItemFooter.contextTypes = {\n    d2: PropTypes.object.isRequired,\n};\n\nItemFooter.propTypes = {\n    item: PropTypes.object.isRequired,\n};\n\nexport default ItemFooter;\n","// Note that this ignores discrepancies in 'this', so shouldn't be used with bound functions\n// This is useful instead of lodash/memoize when we only need to memoize a single value\n// Inspiration: https://github.com/alexreardon/memoize-one\n\nconst memoizeOne = fn => {\n    let lastArgs = undefined;\n    let lastValue = undefined;\n\n    return (...args) => {\n        if (\n            lastArgs &&\n            args.length === lastArgs.length &&\n            args.every((arg, i) => arg === lastArgs[i])\n        ) {\n            return lastValue;\n        }\n        lastArgs = args;\n        lastValue = fn(...args);\n        return lastValue;\n    };\n};\n\nexport default memoizeOne;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = theme => ({\n    progress: {\n        margin: theme.spacing.unit * 2,\n        maxWidth: 200,\n        textAlign: 'center',\n        alignSelf: 'center',\n    },\n    outer: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100%',\n    },\n});\n\nfunction CircularIndeterminate(props) {\n    const { classes } = props;\n    return (\n        <div className={classes.outer}>\n            <CircularProgress className={classes.progress} />\n        </div>\n    );\n}\n\nCircularIndeterminate.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CircularIndeterminate);\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport uniqueId from 'lodash/uniqueId';\nimport VisualizationPlugin from '@dhis2/data-visualizer-plugin';\nimport i18n from '@dhis2/d2-i18n';\n\nimport DefaultPlugin from './DefaultPlugin';\nimport FatalErrorBoundary from './FatalErrorBoundary';\nimport ItemHeader, { HEADER_MARGIN_HEIGHT } from '../ItemHeader';\nimport ItemHeaderButtons from './ItemHeaderButtons';\nimport ItemFooter from './ItemFooter';\nimport * as pluginManager from './plugin';\nimport { sGetVisualization } from '../../../reducers/visualizations';\nimport { sGetItemFiltersRoot } from '../../../reducers/itemFilters';\nimport {\n    acAddVisualization,\n    acSetActiveVisualizationType,\n} from '../../../actions/visualizations';\nimport {\n    VISUALIZATION,\n    MAP,\n    CHART,\n    REPORT_TABLE,\n} from '../../../modules/itemTypes';\nimport memoizeOne from '../../../modules/memoizeOne';\n\nimport { colors } from '@dhis2/ui-core';\nimport { getVisualizationConfig } from './plugin';\nimport LoadingMask from './LoadingMask';\n\nconst styles = {\n    icon: {\n        width: 16,\n        height: 16,\n        marginLeft: 3,\n        cursor: 'pointer',\n        fill: colors.grey600,\n    },\n    title: {\n        overflow: 'hidden',\n        maxWidth: '85%',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n    },\n    textDiv: {\n        fontSize: '14px',\n        fontStretch: 'normal',\n        padding: '10px',\n        lineHeight: '20px',\n    },\n    loadingCover: {\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        left: 0,\n        top: 0,\n        zIndex: 100,\n        background: '#ffffffab',\n    },\n};\n\nexport class Item extends Component {\n    state = {\n        showFooter: false,\n        configLoaded: false,\n        pluginIsLoaded: false,\n    };\n\n    constructor(props, context) {\n        super(props);\n\n        this.d2 = context.d2;\n\n        this.contentRef = React.createRef();\n        this.headerRef = React.createRef();\n\n        this.memoizedApplyFilters = memoizeOne(this.applyFilters);\n\n        this.memoizedGetVisualizationConfig = memoizeOne(\n            getVisualizationConfig\n        );\n\n        this.memoizedGetContentStyle = memoizeOne(this.getContentStyle);\n    }\n\n    async componentDidMount() {\n        this.props.onVisualizationLoaded(\n            // TODO do not call fetch on the pluginManager, do it here as the manager will eventually be removed...\n            await pluginManager.fetch(this.props.item)\n        );\n\n        this.setState({\n            configLoaded: true,\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (\n            prevState.pluginIsLoaded &&\n            (prevProps.visualization !== this.props.visualization ||\n                prevProps.itemFilters !== this.props.itemFilters)\n        ) {\n            this.setState({\n                pluginIsLoaded: false,\n            });\n        }\n    }\n\n    applyFilters = (visualization, filters) => {\n        if (!Object.keys(filters).length) {\n            return visualization;\n        }\n\n        // deep clone objects in filters to avoid changing the visualization in the Redux store\n        const visRows = visualization.rows.map(obj => ({ ...obj }));\n        const visColumns = visualization.columns.map(obj => ({ ...obj }));\n        const visFilters = visualization.filters.map(obj => ({ ...obj }));\n\n        Object.keys(filters).forEach(dimensionId => {\n            if (filters[dimensionId]) {\n                let dimensionFound = false;\n\n                [visRows, visColumns, visFilters].forEach(dimensionObjects =>\n                    dimensionObjects\n                        .filter(obj => obj.dimension === dimensionId)\n                        .forEach(obj => {\n                            dimensionFound = true;\n                            obj.items = filters[dimensionId];\n                        })\n                );\n\n                // add dimension to filters if not already present elsewhere\n                if (!dimensionFound) {\n                    visFilters.push({\n                        dimension: dimensionId,\n                        items: filters[dimensionId],\n                    });\n                }\n            }\n        });\n\n        return {\n            ...visualization,\n            rows: visRows,\n            columns: visColumns,\n            filters: visFilters,\n        };\n    };\n\n    getUniqueKey = memoizeOne(() => uniqueId());\n\n    pluginCredentials = null;\n\n    getPluginComponent = () => {\n        const activeType = this.getActiveType();\n        const visualization = this.memoizedGetVisualizationConfig(\n            this.props.visualization,\n            this.props.item.type,\n            activeType\n        );\n\n        if (!visualization) {\n            return (\n                <div className={this.props.classes.textDiv}>\n                    {i18n.t('No data to display')}\n                </div>\n            );\n        }\n\n        const props = {\n            ...this.props,\n            visualization,\n            style: this.memoizedGetContentStyle(\n                this.props.item.originalHeight,\n                this.headerRef.current.clientHeight,\n                this.contentRef ? this.contentRef.offsetHeight : null\n            ),\n        };\n\n        switch (activeType) {\n            case VISUALIZATION:\n            case CHART:\n            case REPORT_TABLE: {\n                return (\n                    <Fragment>\n                        {!this.state.pluginIsLoaded ? (\n                            <div style={styles.loadingCover}>\n                                <LoadingMask />\n                            </div>\n                        ) : null}\n                        <VisualizationPlugin\n                            d2={this.d2}\n                            visualization={this.memoizedApplyFilters(\n                                visualization,\n                                props.itemFilters\n                            )}\n                            onLoadingComplete={this.onLoadingComplete}\n                            forDashboard={true}\n                            style={props.style}\n                        />\n                    </Fragment>\n                );\n            }\n            case MAP: {\n                if (props.item.type === MAP) {\n                    // apply filters only to thematic and event layers\n                    // for maps AO\n                    const mapViews = props.visualization.mapViews.map(obj => {\n                        if (\n                            obj.layer.includes('thematic') ||\n                            obj.layer.includes('event')\n                        ) {\n                            return this.memoizedApplyFilters(\n                                obj,\n                                props.itemFilters\n                            );\n                        }\n\n                        return obj;\n                    });\n\n                    props.visualization = {\n                        ...props.visualization,\n                        mapViews,\n                    };\n                } else {\n                    // this is the case of a non map AO passed to the maps plugin\n                    // due to a visualization type switch in dashboard item\n                    // maps plugin takes care of converting the AO to a suitable format\n                    props.visualization = this.memoizedApplyFilters(\n                        props.visualization,\n                        props.itemFilters\n                    );\n                }\n\n                return <DefaultPlugin {...props} />;\n            }\n            default: {\n                props.visualization = this.memoizedApplyFilters(\n                    props.visualization,\n                    props.itemFilters\n                );\n\n                return <DefaultPlugin {...props} />;\n            }\n        }\n    };\n\n    onLoadingComplete = () => {\n        this.setState({\n            pluginIsLoaded: true,\n        });\n    };\n\n    onToggleFooter = () => {\n        this.setState(\n            { showFooter: !this.state.showFooter },\n            this.props.onToggleItemExpanded(this.props.item.id)\n        );\n    };\n\n    onSelectActiveType = type => {\n        if (type === this.getActiveType()) {\n            return;\n        }\n\n        pluginManager.unmount(this.props.item, this.getActiveType());\n\n        this.props.onSelectActiveType(this.props.visualization.id, type);\n    };\n\n    getActiveType = () =>\n        this.props.visualization.activeType || this.props.item.type;\n\n    pluginIsAvailable = () =>\n        pluginManager.pluginIsAvailable(\n            this.props.item,\n            this.props.visualization\n        );\n\n    getContentStyle = (originalHeight, headerHeight, measuredHeight) => {\n        const calculatedHeight =\n            originalHeight - headerHeight - HEADER_MARGIN_HEIGHT;\n\n        return {\n            height: measuredHeight || calculatedHeight,\n        };\n    };\n\n    render() {\n        const { item, editMode, itemFilters } = this.props;\n        const { showFooter } = this.state;\n\n        const actionButtons = (\n            <ItemHeaderButtons\n                item={item}\n                visualization={this.props.visualization}\n                onSelectActiveType={this.onSelectActiveType}\n                onToggleFooter={this.onToggleFooter}\n                d2={this.d2}\n                activeType={this.getActiveType()}\n                activeFooter={this.state.showFooter}\n            />\n        );\n\n        return (\n            <>\n                <ItemHeader\n                    title={pluginManager.getName(item)}\n                    itemId={item.id}\n                    actionButtons={actionButtons}\n                    ref={this.headerRef}\n                />\n                <FatalErrorBoundary>\n                    <div\n                        key={this.getUniqueKey(itemFilters)}\n                        className=\"dashboard-item-content\"\n                        ref={ref => (this.contentRef = ref)}\n                    >\n                        {this.state.configLoaded && this.getPluginComponent()}\n                    </div>\n                </FatalErrorBoundary>\n                {!editMode && showFooter ? <ItemFooter item={item} /> : null}\n            </>\n        );\n    }\n}\n\nItem.contextTypes = {\n    d2: PropTypes.object,\n};\n\nItem.propTypes = {\n    classes: PropTypes.object,\n    editMode: PropTypes.bool,\n    item: PropTypes.object,\n    itemFilters: PropTypes.object,\n    visualization: PropTypes.object,\n    onSelectActiveType: PropTypes.func,\n    onToggleItemExpanded: PropTypes.func,\n    onVisualizationLoaded: PropTypes.func,\n};\n\nItem.defaultProps = {\n    item: {},\n    editMode: false,\n    onToggleItemExpanded: Function.prototype,\n    itemFilters: {},\n    visualization: {},\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    itemFilters: sGetItemFiltersRoot(state),\n    visualization: sGetVisualization(\n        state,\n        pluginManager.extractFavorite(ownProps.item).id\n    ),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onVisualizationLoaded: visualization =>\n        dispatch(acAddVisualization(visualization)),\n    onSelectActiveType: (id, type, activeType) =>\n        dispatch(acSetActiveVisualizationType(id, type, activeType)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles)(Item));\n","import React from 'react';\nimport { colors } from '@dhis2/ui-core';\n\nconst style = {\n    backgroundColor: colors.grey200,\n    border: 'none',\n    height: '1px',\n    margin: '0px 0px 5px 0px',\n};\n\nconst Line = () => <hr style={style} />;\n\nexport default Line;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\n\nimport { sGetMessagesRoot } from '../../../reducers/messages';\nimport { formatDate } from '../../../modules/util';\nimport { colors } from '@dhis2/ui-core';\nimport ItemHeader from '../ItemHeader';\nimport Line from '../../../widgets/Line';\n\nimport './MessagesItem.css';\n\nconst PRIVATE = 'PRIVATE';\n\nconst messageTypes = {\n    [PRIVATE]: 'Private',\n    VALIDATION_RESULT: 'Validation',\n    TICKET: 'Ticket',\n    SYSTEM: 'System',\n};\n\nconst style = {\n    list: {\n        listStyleType: 'none',\n        paddingLeft: '0px',\n    },\n    seeAll: {\n        textAlign: 'center',\n        fontSize: '13px',\n        marginBottom: '5px',\n    },\n    sender: {\n        fontSize: '13px',\n        lineHeight: '15px',\n        margin: 0,\n        color: colors.grey800,\n    },\n    snippet: {\n        color: colors.grey800,\n        fontSize: '13px',\n        lineHeight: '15px',\n        maxHeight: '30px',\n        overflow: 'hidden',\n    },\n};\n\nclass MessagesItem extends Component {\n    state = {\n        uiLocale: '',\n    };\n\n    async componentDidMount() {\n        const uiLocale = await this.context.d2.currentUser.userSettings.get(\n            'keyUiLocale'\n        );\n\n        this.setState({ uiLocale });\n    }\n\n    getMessageHref = msg => {\n        const msgIdentifier = msg ? `#/${msg.messageType}/${msg.id}` : '';\n        return `${this.context.baseUrl}/dhis-web-messaging/${msgIdentifier}`;\n    };\n\n    getMessageSender = msg => {\n        const latestMsg = msg.messages.slice(-1)[0];\n        return latestMsg.sender ? latestMsg.sender.displayName : '';\n    };\n\n    getMessageItems = () => {\n        const editClass = !this.props.editMode ? 'view' : null;\n\n        return this.props.messages.map(msg => {\n            const redirectToMsg = () => {\n                if (!this.props.editMode) {\n                    document.location.href = this.getMessageHref(msg);\n                }\n            };\n\n            const sender =\n                msg.messageType === PRIVATE\n                    ? this.getMessageSender(msg)\n                    : messageTypes[msg.messageType];\n\n            const readClass = !msg.read ? 'unread' : null;\n            const latestMsg = msg.messages.slice(-1)[0];\n            const msgDate = latestMsg.lastUpdated;\n\n            return (\n                <li\n                    className={`message-item ${editClass}`}\n                    key={msg.id}\n                    onClick={redirectToMsg}\n                >\n                    <p className={`message-title ${readClass}`}>\n                        {msg.displayName} ({msg.messageCount})\n                    </p>\n                    <p style={style.sender}>\n                        {sender} - {formatDate(msgDate, this.state.uiLocale)}\n                    </p>\n                    <p style={style.snippet}>{latestMsg.text}</p>\n                </li>\n            );\n        });\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <ItemHeader\n                    title={i18n.t('Messages')}\n                    itemId={this.props.item.id}\n                />\n                <Line />\n                {this.props.messages.length > 0 && (\n                    <div className=\"dashboard-item-content\">\n                        <ul style={style.list}>{this.getMessageItems()}</ul>\n                        <div style={style.seeAll}>\n                            <a href={this.getMessageHref()}>\n                                {i18n.t('See all messages')}\n                            </a>\n                        </div>\n                    </div>\n                )}\n            </Fragment>\n        );\n    }\n}\n\nMessagesItem.propTypes = {\n    editMode: PropTypes.bool,\n    item: PropTypes.object,\n    messages: PropTypes.array,\n};\n\nMessagesItem.contextTypes = {\n    d2: PropTypes.object,\n    baseUrl: PropTypes.string,\n};\n\nconst mapStateToProps = state => {\n    return {\n        messages: Object.values(sGetMessagesRoot(state)),\n    };\n};\n\nconst MessagesContainer = connect(\n    mapStateToProps,\n    null\n)(MessagesItem);\n\nexport default MessagesContainer;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport ItemHeader from '../ItemHeader';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\n\nconst NotSupportedItem = props => (\n    <Fragment>\n        <ItemHeader\n            title={i18n.t('Item type \"{{type}}\" not supported', {\n                type: props.item.type,\n            })}\n            itemId={props.item.id}\n        />\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '90%',\n            }}\n        >\n            <NotInterestedIcon\n                style={{ width: 100, height: 100, align: 'center' }}\n                color=\"disabled\"\n            />\n        </div>\n    </Fragment>\n);\n\nNotSupportedItem.propTypes = {\n    item: PropTypes.object,\n};\n\nexport default NotSupportedItem;\n","import React from 'react';\nimport { colors } from '@dhis2/ui-core';\nimport PropTypes from 'prop-types';\n\nconst DescriptionIcon = ({ className }) => (\n    <svg\n        className={className}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill={colors.grey500}\n    >\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\" />\n    </svg>\n);\n\nDescriptionIcon.propTypes = {\n    className: PropTypes.string,\n};\n\nexport default DescriptionIcon;\n","import React from 'react';\nimport { colors } from '@dhis2/ui-core';\nimport PropTypes from 'prop-types';\n\nconst DeleteIcon = ({ className }) => (\n    <svg\n        className={className}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"18\"\n        height=\"18\"\n        viewBox=\"0 0 24 24\"\n        fill={colors.red500}\n    >\n        <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>\n);\n\nDeleteIcon.propTypes = {\n    className: PropTypes.string,\n};\n\nexport default DeleteIcon;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { colors } from '@dhis2/ui-core';\nimport DescriptionIcon from '../../../icons/Description';\n\nimport DeleteIcon from '../../../icons/Delete';\nimport Line from '../../../widgets/Line';\nimport { itemTypeMap, getItemUrl } from '../../../modules/itemTypes';\nimport { orArray } from '../../../modules/util';\nimport { tRemoveListItemContent } from './actions';\nimport ItemHeader from '../ItemHeader';\nimport classes from './Item.module.css';\n\nconst getItemTitle = item => itemTypeMap[item.type].pluralTitle;\n\nconst getContentItems = item =>\n    orArray(item[itemTypeMap[item.type].propName]).filter(\n        (item, index, array) =>\n            array.findIndex(el => el.id === item.id) === index\n    );\n\nconst ListItem = (props, context) => {\n    const { item, editMode, tRemoveListItemContent } = props;\n    const contentItems = getContentItems(item);\n\n    const getLink = contentItem => {\n        const deleteButton = (\n            <button\n                className={classes.deletebutton}\n                onClick={() => tRemoveListItemContent(item, contentItem)}\n            >\n                <DeleteIcon className={classes.deleteicon} />\n            </button>\n        );\n\n        return (\n            <Fragment>\n                <a\n                    className={classes.link}\n                    style={{ color: colors.grey900 }}\n                    href={getItemUrl(item.type, contentItem, context.d2)}\n                >\n                    {contentItem.name}\n                </a>\n                {editMode ? deleteButton : null}\n            </Fragment>\n        );\n    };\n\n    return (\n        <Fragment>\n            <ItemHeader title={getItemTitle(item)} itemId={item.id} />\n            <Line />\n            <div className=\"dashboard-item-content\">\n                <ul className={classes.list}>\n                    {contentItems.map(contentItem => (\n                        <li className={classes.item} key={contentItem.id}>\n                            <DescriptionIcon className={classes.itemicon} />\n                            {getLink(contentItem)}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </Fragment>\n    );\n};\n\nListItem.propTypes = {\n    editMode: PropTypes.bool,\n    item: PropTypes.object,\n    tRemoveListItemContent: PropTypes.func,\n};\n\nListItem.contextTypes = {\n    d2: PropTypes.object,\n};\n\nexport default connect(\n    null,\n    {\n        tRemoveListItemContent,\n    }\n)(ListItem);\n","import {\n    acUpdateDashboardItem,\n    acRemoveDashboardItem,\n} from '../../../actions/editDashboard';\nimport { itemTypeMap } from '../../../modules/itemTypes';\n\nexport const tRemoveListItemContent = (dashboardItem, content) => dispatch => {\n    const listItemType = itemTypeMap[dashboardItem.type].propName;\n\n    const newContent = dashboardItem[listItemType].filter(\n        item => item.id !== content.id\n    );\n\n    if (newContent.length) {\n        dashboardItem[listItemType] = newContent;\n        dispatch(acUpdateDashboardItem(dashboardItem));\n    } else {\n        dispatch(acRemoveDashboardItem(dashboardItem));\n    }\n};\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\nimport PropTypes from 'prop-types';\n\nimport Input from '@material-ui/core/Input';\nimport {\n    Parser as RichTextParser,\n    Editor as RichTextEditor,\n} from '@dhis2/d2-ui-rich-text';\n\nimport { acUpdateDashboardItem } from '../../../actions/editDashboard';\nimport { sGetEditDashboardItems } from '../../../reducers/editDashboard';\nimport { sGetDashboardItems } from '../../../reducers/dashboards';\nimport ItemHeader from '../ItemHeader';\nimport Line from '../../../widgets/Line';\n\nconst style = {\n    textDiv: {\n        padding: '10px',\n        whiteSpace: 'pre-line',\n        lineHeight: '20px',\n    },\n    textField: {\n        fontSize: '14px',\n        fontStretch: 'normal',\n        width: '90%',\n        margin: '0 auto',\n        display: 'block',\n        lineHeight: '24px',\n    },\n    container: {\n        marginBottom: '20px',\n        marginTop: '20px',\n    },\n};\n\nconst TextItem = props => {\n    const { item, editMode, text, acUpdateDashboardItem } = props;\n\n    const onChangeText = event => {\n        const updatedItem = {\n            ...item,\n            text: event.target.value,\n        };\n\n        acUpdateDashboardItem(updatedItem);\n    };\n\n    const viewItem = () => {\n        const textDivStyle = Object.assign({}, style.textField, style.textDiv);\n        return (\n            <div className=\"dashboard-item-content\" style={style.container}>\n                <RichTextParser style={textDivStyle}>{text}</RichTextParser>\n            </div>\n        );\n    };\n\n    const editItem = () => {\n        return (\n            <Fragment>\n                <ItemHeader title={i18n.t('Text item')} itemId={item.id} />\n                <Line />\n                <div className=\"dashboard-item-content\">\n                    <RichTextEditor onEdit={onChangeText}>\n                        <Input\n                            value={text}\n                            multiline\n                            fullWidth\n                            style={style.textField}\n                            placeholder={i18n.t('Add text here')}\n                            onChange={onChangeText}\n                        />\n                    </RichTextEditor>\n                </div>\n            </Fragment>\n        );\n    };\n\n    return <Fragment>{editMode ? editItem() : viewItem()}</Fragment>;\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const items = ownProps.editMode\n        ? sGetEditDashboardItems(state)\n        : sGetDashboardItems(state);\n\n    const item = items.find(item => item.id === ownProps.item.id);\n\n    return {\n        text: item ? item.text : '',\n    };\n};\n\nTextItem.propTypes = {\n    acUpdateDashboardItem: PropTypes.func,\n    editMode: PropTypes.bool,\n    item: PropTypes.object,\n    text: PropTypes.string,\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        acUpdateDashboardItem,\n    }\n)(TextItem);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\n\nimport { FILTER_ORG_UNIT } from '../../../actions/itemFilters';\nimport { sGetItemFiltersRoot } from '../../../reducers/itemFilters';\nimport ItemHeader from '../ItemHeader';\nimport Line from '../../../widgets/Line';\n\nconst getIframeSrc = (appDetails, item, itemFilters) => {\n    let iframeSrc = `${appDetails.launchUrl}?dashboardItemId=${item.id}`;\n\n    if (\n        itemFilters &&\n        itemFilters[FILTER_ORG_UNIT] &&\n        itemFilters[FILTER_ORG_UNIT].length\n    ) {\n        const ouIds = itemFilters[FILTER_ORG_UNIT].map(\n            ouPath => ouPath.split('/').slice(-1)[0]\n        );\n\n        iframeSrc += `&userOrgUnit=${ouIds.join(',')}`;\n    }\n\n    return iframeSrc;\n};\n\nconst AppItem = ({ item, itemFilters }, context) => {\n    let appDetails;\n\n    const appKey = item.appKey;\n\n    if (appKey) {\n        appDetails = context.d2.system.installedApps.find(\n            app => app.key === appKey\n        );\n    }\n\n    return appDetails && appDetails.name && appDetails.launchUrl ? (\n        <Fragment>\n            <ItemHeader title={appDetails.name} itemId={item.id} />\n            <Line />\n            <iframe\n                title={appDetails.name}\n                src={getIframeSrc(appDetails, item, itemFilters)}\n                className=\"dashboard-item-content\"\n                style={{ border: 'none' }}\n            />\n        </Fragment>\n    ) : (\n        <Fragment>\n            <ItemHeader title={`${appKey} app not found`} />\n            <Line />\n            <div\n                className=\"dashboard-item-content\"\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    height: '90%',\n                }}\n            >\n                <NotInterestedIcon\n                    color=\"disabled\"\n                    disabled\n                    style={{ width: 100, height: 100, align: 'center' }}\n                />\n            </div>\n        </Fragment>\n    );\n};\n\nAppItem.propTypes = {\n    item: PropTypes.object,\n    itemFilters: PropTypes.object,\n};\n\nAppItem.contextTypes = {\n    d2: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n    itemFilters: sGetItemFiltersRoot(state),\n});\n\nexport default connect(mapStateToProps)(AppItem);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\n\nimport { colors } from '@dhis2/ui-core';\nimport ItemHeader from '../ItemHeader';\n\nconst style = {\n    margin: '21px 28px',\n    fontSize: '14px',\n    lineHeight: '18px',\n    color: colors.grey600,\n};\n\nconst SpacerItem = props => {\n    return (\n        <Fragment>\n            <ItemHeader title={i18n.t('Spacer')} itemId={props.item.id} />\n            <p style={style}>\n                {i18n.t(\n                    'Use a spacer to create empty vertical space between other dashboard items.'\n                )}\n            </p>\n        </Fragment>\n    );\n};\n\nSpacerItem.propTypes = {\n    item: PropTypes.object,\n};\n\nexport default SpacerItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport VisualizationItem from './VisualizationItem/Item';\nimport MessagesItem from './MessagesItem/Item';\nimport NotSupportedItem from './NotSupportedItem/Item';\nimport ListItem from './ListItem/Item';\nimport TextItem from './TextItem/Item';\nimport AppItem from './AppItem/Item';\nimport SpacerItem from './SpacerItem/Item';\nimport {\n    APP,\n    VISUALIZATION,\n    REPORT_TABLE,\n    CHART,\n    MAP,\n    EVENT_CHART,\n    EVENT_REPORT,\n    MESSAGES,\n    REPORTS,\n    RESOURCES,\n    USERS,\n    TEXT,\n    SPACER,\n} from '../../modules/itemTypes';\nimport { DEFAULT_STATE_ITEM_FILTERS } from '../../reducers/itemFilters';\n\nconst getGridItem = type => {\n    switch (type) {\n        case VISUALIZATION:\n        case REPORT_TABLE:\n        case CHART:\n        case MAP:\n        case EVENT_CHART:\n        case EVENT_REPORT:\n            return VisualizationItem;\n        case MESSAGES:\n            return MessagesItem;\n        case REPORTS:\n        case RESOURCES:\n        case USERS:\n            return ListItem;\n        case TEXT:\n            return TextItem;\n        case SPACER:\n            return SpacerItem;\n        case APP:\n            return AppItem;\n        default:\n            return NotSupportedItem;\n    }\n};\n\nexport const Item = props => {\n    const GridItem = getGridItem(props.item.type);\n\n    return (\n        <GridItem\n            item={props.item}\n            editMode={props.editMode}\n            itemFilters={\n                props.editMode ? DEFAULT_STATE_ITEM_FILTERS : props.itemFilters\n            }\n            onToggleItemExpanded={props.onToggleItemExpanded}\n        />\n    );\n};\n\nItem.propTypes = {\n    editMode: PropTypes.bool,\n    item: PropTypes.object,\n    itemFilters: PropTypes.object,\n    onToggleItemExpanded: PropTypes.func,\n};\n","import React from 'react';\nimport { colors } from '@dhis2/ui-core';\nimport PropTypes from 'prop-types';\n\nexport const NoContentMessage = ({ text }) => (\n    <div\n        style={{\n            padding: '50px 10px',\n            textAlign: 'center',\n            fontSize: '15px',\n            fontWeight: 500,\n            color: colors.grey600,\n        }}\n    >\n        {text}\n    </div>\n);\n\nNoContentMessage.propTypes = {\n    text: PropTypes.string,\n};\n\nexport default NoContentMessage;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport pick from 'lodash/pick';\n\nconst defaultDebounceMs = 100;\nconst defaultBufferFactor = 0.25;\n\nclass ProgressiveLoadingContainer extends Component {\n    static propTypes = {\n        children: PropTypes.node.isRequired,\n        bufferFactor: PropTypes.number,\n        className: PropTypes.string,\n        debounceMs: PropTypes.number,\n        style: PropTypes.object,\n    };\n    static defaultProps = {\n        debounceMs: defaultDebounceMs,\n        bufferFactor: defaultBufferFactor,\n    };\n\n    state = {\n        shouldLoad: false,\n    };\n    containerRef = null;\n    shouldLoadHandler = null;\n\n    checkShouldLoad() {\n        const bufferPx = this.props.bufferFactor * window.innerHeight;\n\n        if (!this.containerRef) {\n            return;\n        }\n\n        const rect = this.containerRef.getBoundingClientRect();\n        if (\n            rect.bottom > -bufferPx &&\n            rect.top < window.innerHeight + bufferPx\n        ) {\n            this.setState({\n                shouldLoad: true,\n            });\n\n            this.removeHandler();\n        }\n    }\n\n    registerHandler() {\n        this.shouldLoadHandler = debounce(\n            () => this.checkShouldLoad(),\n            this.props.debounceMs\n        );\n\n        window.addEventListener('scroll', this.shouldLoadHandler);\n    }\n    removeHandler() {\n        window.removeEventListener('scroll', this.shouldLoadHandler);\n    }\n\n    componentDidMount() {\n        this.registerHandler();\n        this.checkShouldLoad();\n    }\n\n    componentWillUnmount() {\n        this.removeHandler();\n    }\n\n    render() {\n        const { children, className, style, ...props } = this.props;\n        const { shouldLoad } = this.state;\n\n        const eventProps = pick(props, [\n            'onMouseDown',\n            'onTouchStart',\n            'onMouseUp',\n            'onTouchEnd',\n        ]);\n\n        return (\n            <div\n                ref={ref => (this.containerRef = ref)}\n                style={style}\n                className={className}\n                {...eventProps}\n            >\n                {shouldLoad && children}\n            </div>\n        );\n    }\n}\n\nexport default ProgressiveLoadingContainer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport memoize from 'lodash/memoize';\nimport i18n from '@dhis2/d2-i18n';\nimport ReactGridLayout from 'react-grid-layout';\nimport { CircularLoader, ScreenCover } from '@dhis2/ui-core';\n\nimport {\n    acUpdateDashboardLayout,\n    acRemoveDashboardItem,\n} from '../../actions/editDashboard';\nimport { Item } from '../Item/Item';\nimport { resize as pluginResize } from '../Item/VisualizationItem/plugin';\nimport { isVisualizationType } from '../../modules/itemTypes';\nimport {\n    GRID_ROW_HEIGHT,\n    GRID_COMPACT_TYPE,\n    ITEM_MIN_HEIGHT,\n    MARGIN,\n    getGridColumns,\n    hasShape,\n    onItemResize,\n} from './gridUtil';\nimport { orArray } from '../../modules/util';\n\nimport NoContentMessage from '../../widgets/NoContentMessage';\n\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\n\nimport './ItemGrid.css';\nimport { sGetSelectedId, sGetSelectedIsLoading } from '../../reducers/selected';\nimport {\n    sGetEditDashboardRoot,\n    sGetEditDashboardItems,\n} from '../../reducers/editDashboard';\nimport {\n    sGetDashboardById,\n    sGetDashboardItems,\n} from '../../reducers/dashboards';\nimport ProgressiveLoadingContainer from '../Item/ProgressiveLoadingContainer';\n\n// Component\n\nconst EXPANDED_HEIGHT = 17;\n\nexport class ItemGrid extends Component {\n    state = {\n        expandedItems: {},\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.getMemoizedItem = memoize(this.getItem);\n    }\n\n    onToggleItemExpanded = clickedId => {\n        const isExpanded =\n            typeof this.state.expandedItems[clickedId] === 'boolean'\n                ? this.state.expandedItems[clickedId]\n                : false;\n\n        const expandedItems = { ...this.state.expandedItems };\n        expandedItems[clickedId] = !isExpanded;\n        this.setState({ expandedItems });\n    };\n\n    onRemoveItem = clickedId => {\n        this.props.acRemoveDashboardItem(clickedId);\n    };\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.edit) {\n            this.setState({ expandedItems: {} });\n        }\n    }\n\n    onLayoutChange = newLayout => {\n        if (this.props.edit) {\n            this.props.acUpdateDashboardLayout(newLayout);\n        }\n    };\n\n    onResizeStop = (layout, oldItem, newItem) => {\n        onItemResize(newItem.i);\n\n        const dashboardItem = this.props.dashboardItems.find(\n            item => item.id === newItem.i\n        );\n\n        // call resize on the item component if it's a plugin type\n        if (dashboardItem && isVisualizationType(dashboardItem)) {\n            pluginResize(dashboardItem);\n        }\n    };\n\n    onRemoveItemWrapper = id => () => this.onRemoveItem(id);\n\n    getItem = dashboardItem => {\n        const expandedItem = this.state.expandedItems[dashboardItem.id];\n        const hProp = { h: dashboardItem.h };\n\n        if (expandedItem && expandedItem === true) {\n            hProp.h = dashboardItem.h + EXPANDED_HEIGHT;\n        }\n\n        return Object.assign({}, dashboardItem, hProp, {\n            i: dashboardItem.id,\n            minH: ITEM_MIN_HEIGHT,\n            randomNumber: Math.random(),\n        });\n    };\n\n    getItems = dashboardItems =>\n        dashboardItems.map(item => this.getMemoizedItem(item));\n\n    getItemComponent = item => {\n        const itemClassNames = [\n            item.type,\n            this.props.edit ? 'edit' : 'view',\n        ].join(' ');\n\n        return (\n            <ProgressiveLoadingContainer\n                key={item.i}\n                className={itemClassNames}\n            >\n                <Item\n                    item={item}\n                    editMode={this.props.edit}\n                    onToggleItemExpanded={this.onToggleItemExpanded}\n                />\n            </ProgressiveLoadingContainer>\n        );\n    };\n\n    getItemComponents = items => items.map(item => this.getItemComponent(item));\n\n    render() {\n        const { edit, isLoading, dashboardItems } = this.props;\n\n        if (!isLoading && !dashboardItems.length) {\n            return (\n                <NoContentMessage\n                    text={i18n.t('There are no items on this dashboard')}\n                />\n            );\n        }\n\n        const items = edit\n            ? this.getItems(dashboardItems)\n            : dashboardItems.map(this.getItem);\n\n        return (\n            <div className=\"grid-wrapper\">\n                {isLoading ? (\n                    <ScreenCover>\n                        <CircularLoader />\n                    </ScreenCover>\n                ) : null}\n                <ReactGridLayout\n                    onLayoutChange={this.onLayoutChange}\n                    onResizeStop={this.onResizeStop}\n                    className=\"layout\"\n                    layout={items}\n                    margin={MARGIN}\n                    cols={getGridColumns()}\n                    rowHeight={GRID_ROW_HEIGHT}\n                    width={window.innerWidth}\n                    compactType={GRID_COMPACT_TYPE}\n                    isDraggable={edit}\n                    isResizable={edit}\n                    draggableCancel=\"input,textarea\"\n                >\n                    {this.getItemComponents(items)}\n                </ReactGridLayout>\n            </div>\n        );\n    }\n}\n\nItemGrid.propTypes = {\n    acRemoveDashboardItem: PropTypes.func,\n    acUpdateDashboardLayout: PropTypes.func,\n    dashboardItems: PropTypes.array,\n    edit: PropTypes.bool,\n    isLoading: PropTypes.bool,\n};\n\nItemGrid.defaultProps = {\n    dashboardItems: [],\n};\n\n// Container\n\nconst mapStateToProps = (state, ownProps) => {\n    const selectedDashboard = ownProps.edit\n        ? sGetEditDashboardRoot(state)\n        : sGetDashboardById(state, sGetSelectedId(state));\n\n    const dashboardItems = ownProps.edit\n        ? sGetEditDashboardItems(state)\n        : sGetDashboardItems(state);\n\n    return {\n        isLoading: sGetSelectedIsLoading(state) || !selectedDashboard,\n        dashboardItems,\n    };\n};\n\nconst mapDispatchToProps = {\n    acUpdateDashboardLayout,\n    acRemoveDashboardItem,\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    const validItems = orArray(stateProps.dashboardItems).filter(hasShape);\n\n    return {\n        ...dispatchProps,\n        edit: ownProps.edit,\n        isLoading: stateProps.isLoading,\n        dashboardItems: validItems,\n        onItemResize,\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(ItemGrid);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport i18n from '@dhis2/d2-i18n';\n\nimport { colors } from '@dhis2/ui-core';\n\nconst styles = {\n    badgeContainer: {\n        margin: '2px',\n        padding: '0 16px',\n        borderRadius: '4px',\n        color: colors.white,\n        backgroundColor: '#212934',\n        height: 36,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    badge: {\n        fontSize: '13px',\n        cursor: 'pointer',\n        whiteSpace: 'nowrap',\n    },\n    badgeRemove: {\n        fontSize: '12px',\n        textDecoration: 'underline',\n        marginLeft: '24px',\n        cursor: 'pointer',\n    },\n};\n\nclass FilterBadge extends Component {\n    onClick = id => () => this.props.onClick(id);\n    onRemove = id => () => this.props.onRemove(id);\n\n    render() {\n        const { data } = this.props;\n\n        return (\n            <div style={styles.badgeContainer}>\n                <span style={styles.badge} onClick={this.onClick(data.id)}>\n                    {`${data.name}: ${\n                        data.values.length > 1\n                            ? i18n.t('{{count}} selected', {\n                                  count: data.values.length,\n                              })\n                            : data.values[0].name\n                    }`}\n                </span>\n                <span\n                    style={styles.badgeRemove}\n                    onClick={this.onRemove(data.id)}\n                >\n                    {i18n.t('Remove')}\n                </span>\n            </div>\n        );\n    }\n}\n\nFilterBadge.propTypes = {\n    data: PropTypes.object.isRequired,\n    onClick: PropTypes.func.isRequired,\n    onRemove: PropTypes.func.isRequired,\n};\n\nFilterBadge.defaultProps = {\n    onClick: Function.prototype,\n    onRemove: Function.prototype,\n};\n\nexport default FilterBadge;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createSelector } from 'reselect';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { sGetDimensions } from '../../reducers/dimensions';\nimport { sGetItemFiltersRoot } from '../../reducers/itemFilters';\nimport { sGetControlBarUserRows } from '../../reducers/controlBar';\nimport { getTopOffset } from '../ControlBar/controlBarDimensions';\nimport { acRemoveItemFilter } from '../../actions/itemFilters';\nimport { acRemoveEditItemFilter } from '../../actions/editItemFilters';\nimport { acSetActiveModalDimension } from '../../actions/activeModalDimension';\n\nimport FilterBadge from './FilterBadge';\n\nconst styles = {\n    bar: {\n        position: 'sticky',\n        zIndex: 7,\n        padding: '8px 0',\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n    },\n};\n\nexport class FilterBar extends Component {\n    onBadgeRemove = id => {\n        this.props.removeItemFilter(id);\n        this.props.removeEditItemFilter(id);\n    };\n\n    onBadgeClick = id => {\n        this.props.setActiveModalDimension({\n            id,\n            name: this.props.filters.find(item => item.id === id).name,\n        });\n    };\n\n    render() {\n        const { filters, userRows, classes } = this.props;\n        const top = getTopOffset(userRows) + 10;\n\n        return filters.length ? (\n            <div className={classes.bar} style={{ top }}>\n                {filters.map(filter => (\n                    <FilterBadge\n                        key={filter.id}\n                        data={filter}\n                        onClick={this.onBadgeClick}\n                        onRemove={this.onBadgeRemove}\n                    />\n                ))}\n            </div>\n        ) : null;\n    }\n}\n\nFilterBar.propTypes = {\n    filters: PropTypes.array.isRequired,\n    removeEditItemFilter: PropTypes.func.isRequired,\n    removeItemFilter: PropTypes.func.isRequired,\n    classes: PropTypes.object,\n    setActiveModalDimension: PropTypes.func,\n    userRows: PropTypes.number,\n};\n\nFilterBar.defaultProps = {\n    filters: [],\n    removeItemFIlter: Function.prototype,\n    removeEditItemFilter: Function.prototype,\n};\n\n// simplify the filters structure to:\n// [{ id: 'pe', name: 'Period', values: [{ id: 2019: name: '2019' }, {id: 'LAST_MONTH', name: 'Last month' }]}, ...]\nconst filtersSelector = createSelector(\n    [sGetItemFiltersRoot, sGetDimensions],\n    (filters, dimensions) =>\n        Object.keys(filters).reduce((arr, id) => {\n            arr.push({\n                id: id,\n                name: dimensions.find(dimension => dimension.id === id).name,\n                values: filters[id].map(value => ({\n                    id: value.id,\n                    name: value.displayName || value.name,\n                })),\n            });\n\n            return arr;\n        }, [])\n);\n\nconst mapStateToProps = state => ({\n    filters: filtersSelector(state),\n    userRows: sGetControlBarUserRows(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    {\n        setActiveModalDimension: acSetActiveModalDimension,\n        removeItemFilter: acRemoveItemFilter,\n        removeEditItemFilter: acRemoveEditItemFilter,\n    }\n)(withStyles(styles)(FilterBar));\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport TitleBar from '../TitleBar/TitleBar';\nimport ItemGrid from '../ItemGrid/ItemGrid';\nimport FilterBar from '../FilterBar/FilterBar';\n\nexport const DashboardContent = props => (\n    <Fragment>\n        <TitleBar edit={props.editMode} />\n        <FilterBar />\n        <ItemGrid edit={props.editMode} />\n    </Fragment>\n);\n\nDashboardContent.propTypes = {\n    editMode: PropTypes.bool,\n};\n\nexport default DashboardContent;\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport isEmpty from 'lodash/isEmpty';\nimport i18n from '@dhis2/d2-i18n';\nimport PropTypes from 'prop-types';\n\nimport {\n    sGetAllDashboards,\n    sDashboardsIsFetching,\n} from '../../reducers/dashboards';\nimport { sGetSelectedId } from '../../reducers/selected';\nimport DashboardsBar from '../ControlBar/DashboardsBar';\nimport DashboardVerticalOffset from './DashboardVerticalOffset';\nimport DashboardContent from './DashboardContent';\nimport NoContentMessage from '../../widgets/NoContentMessage';\n\nexport const Content = ({ hasDashboardContent, dashboardsIsEmpty }) => {\n    const msg = dashboardsIsEmpty\n        ? i18n.t(\n              'No dashboards found. Use the + button to create a new dashboard.'\n          )\n        : i18n.t('Requested dashboard not found');\n\n    return hasDashboardContent ? (\n        <DashboardContent editMode={false} />\n    ) : (\n        <NoContentMessage text={msg} />\n    );\n};\n\nContent.propTypes = {\n    dashboardsIsEmpty: PropTypes.bool,\n    hasDashboardContent: PropTypes.bool,\n};\n\nexport const ViewDashboard = ({ id, dashboardsIsEmpty, dashboardsLoaded }) => {\n    const hasDashboardContent = id && !dashboardsIsEmpty;\n    const contentNotReady = !dashboardsLoaded || id === null;\n\n    return (\n        <Fragment>\n            <DashboardsBar />\n            <DashboardVerticalOffset />\n            <div className=\"dashboard-wrapper\">\n                {contentNotReady ? null : (\n                    <Content\n                        hasDashboardContent={hasDashboardContent}\n                        dashboardsIsEmpty={dashboardsIsEmpty}\n                    />\n                )}\n            </div>\n        </Fragment>\n    );\n};\n\nViewDashboard.propTypes = {\n    dashboardsIsEmpty: PropTypes.bool,\n    dashboardsLoaded: PropTypes.bool,\n    id: PropTypes.string,\n};\n\nconst mapStateToProps = state => {\n    const dashboards = sGetAllDashboards(state);\n\n    return {\n        id: sGetSelectedId(state),\n        dashboardsIsEmpty: isEmpty(dashboards),\n        dashboardsLoaded: !sDashboardsIsFetching(state),\n    };\n};\n\nexport default connect(mapStateToProps)(ViewDashboard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { Button } from '@dhis2/ui-core';\n\nexport const ConfirmDeleteDialog = ({\n    dashboardName,\n    onDeleteConfirmed,\n    onContinueEditing,\n    open,\n}) => {\n    const actions = [\n        <Button key=\"cancel\" secondary onClick={onContinueEditing}>\n            {i18n.t('Cancel')}\n        </Button>,\n        <Button key=\"delete\" destructive onClick={onDeleteConfirmed}>\n            {i18n.t('Delete')}\n        </Button>,\n    ];\n\n    return (\n        <Dialog open={open} onClose={onContinueEditing}>\n            <DialogTitle style={{ fontSize: '1.25rem', fontWeight: '450' }}>\n                {i18n.t('Delete dashboard')}\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText style={{ fontSize: '0.875rem' }}>\n                    {i18n.t(\n                        'Deleting dashboard \"{{ dashboardName }}\" will remove it for all users. This action cannot be undone. Are you sure you want to permanently delete this dashboard?',\n                        { dashboardName }\n                    )}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>{actions}</DialogActions>\n        </Dialog>\n    );\n};\n\nConfirmDeleteDialog.propTypes = {\n    dashboardName: PropTypes.string,\n    open: PropTypes.bool,\n    onContinueEditing: PropTypes.func,\n    onDeleteConfirmed: PropTypes.func,\n};\n\nexport default ConfirmDeleteDialog;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport i18n from '@dhis2/d2-i18n';\nimport ControlBar from './ControlBar';\nimport TranslationDialog from '@dhis2/d2-ui-translation-dialog';\nimport { Button } from '@dhis2/ui-core';\n\nimport ConfirmDeleteDialog from './ConfirmDeleteDialog';\nimport {\n    tSaveDashboard,\n    acClearEditDashboard,\n} from '../../actions/editDashboard';\nimport {\n    tDeleteDashboard,\n    acSetDashboardDisplayName,\n} from '../../actions/dashboards';\nimport {\n    sGetEditDashboardRoot,\n    sGetIsNewDashboard,\n} from '../../reducers/editDashboard';\nimport {\n    CONTROL_BAR_ROW_HEIGHT,\n    MIN_ROW_COUNT,\n    getControlBarHeight,\n} from './controlBarDimensions';\nimport { apiFetchDashboard } from '../../api/dashboards';\n\nimport classes from './styles/DashboardsBar.module.css';\n\nconst buttonBarStyle = {\n    height: CONTROL_BAR_ROW_HEIGHT,\n    paddingTop: '15px',\n    marginLeft: '15px',\n    marginRight: '15px',\n};\n\nexport class EditBar extends Component {\n    state = {\n        translationDialogIsOpen: false,\n        dashboardModel: undefined,\n        confirmDeleteDialogOpen: false,\n        redirectUrl: undefined,\n    };\n\n    onConfirmDelete = () => {\n        this.setState({ confirmDeleteDialogOpen: true });\n    };\n\n    onSave = () => {\n        this.props.onSave().then(newId => {\n            this.setState({ redirectUrl: `/${newId}` });\n        });\n    };\n\n    onDiscard = () => {\n        this.props.onDiscardChanges();\n        const redirectUrl = this.props.dashboardId\n            ? `/${this.props.dashboardId}`\n            : '/';\n        this.setState({ redirectUrl });\n    };\n\n    onContinueEditing = () => {\n        this.setState({ confirmDeleteDialogOpen: false });\n    };\n\n    onDeleteConfirmed = () => {\n        this.setState({ confirmDeleteDialogOpen: false });\n        this.props.onDelete(this.props.dashboardId).then(() => {\n            this.setState({ redirectUrl: '/' });\n        });\n    };\n\n    onTranslationsSaved = async translations => {\n        if (translations && translations.length) {\n            const dbLocale = await this.context.d2.currentUser.userSettings.get(\n                'keyDbLocale'\n            );\n\n            const translation = translations.find(\n                t => t.locale === dbLocale && t.property === 'NAME'\n            );\n\n            if (translation && translation.value) {\n                this.props.onTranslate(\n                    this.props.dashboardId,\n                    translation.value\n                );\n            }\n        }\n    };\n\n    fetchDashboardModel = () => {\n        if (this.props.dashboardId && !this.state.dashboardModel) {\n            apiFetchDashboard(this.props.dashboardId).then(dashboardModel =>\n                this.setState({ dashboardModel })\n            );\n        }\n    };\n\n    componentDidMount() {\n        this.fetchDashboardModel();\n    }\n\n    componentDidUpdate() {\n        this.fetchDashboardModel();\n    }\n\n    toggleTranslationDialog = () => {\n        this.setState({\n            translationDialogIsOpen: !this.state.translationDialogIsOpen,\n        });\n    };\n\n    confirmDeleteDialog = () =>\n        this.props.deleteAccess && this.props.dashboardId ? (\n            <ConfirmDeleteDialog\n                dashboardName={this.props.dashboardName}\n                onDeleteConfirmed={this.onDeleteConfirmed}\n                onContinueEditing={this.onContinueEditing}\n                open={this.state.confirmDeleteDialogOpen}\n            />\n        ) : null;\n\n    translationDialog = () =>\n        this.state.dashboardModel && this.state.dashboardModel.id ? (\n            <TranslationDialog\n                className=\"translation-dialog\"\n                d2={this.context.d2}\n                open={this.state.translationDialogIsOpen}\n                onRequestClose={this.toggleTranslationDialog}\n                objectToTranslate={this.state.dashboardModel}\n                fieldsToTranslate={['name', 'description']}\n                // TODO handle messages in snackbar\n                onTranslationSaved={this.onTranslationsSaved}\n                onTranslationError={err =>\n                    console.log('translation update error', err)\n                }\n            />\n        ) : null;\n\n    render() {\n        if (this.state.redirectUrl) {\n            return <Redirect to={this.state.redirectUrl} />;\n        }\n\n        const { dashboardId, deleteAccess, updateAccess } = this.props;\n        const controlBarHeight = getControlBarHeight(MIN_ROW_COUNT);\n\n        const discardBtnText = updateAccess\n            ? i18n.t('Exit without saving')\n            : i18n.t('Go to dashboards');\n\n        return (\n            <Fragment>\n                <ControlBar height={controlBarHeight} editMode={true}>\n                    <div style={buttonBarStyle}>\n                        {updateAccess ? (\n                            <div className={classes.leftControls}>\n                                <span style={{ marginRight: '15px' }}>\n                                    <Button primary onClick={this.onSave}>\n                                        {i18n.t('Save changes')}\n                                    </Button>\n                                </span>\n\n                                {dashboardId ? (\n                                    <span style={{ marginRight: '15px' }}>\n                                        <Button\n                                            onClick={\n                                                this.toggleTranslationDialog\n                                            }\n                                        >\n                                            {i18n.t('Translate')}\n                                        </Button>\n                                    </span>\n                                ) : null}\n                                {dashboardId && deleteAccess ? (\n                                    <Button onClick={this.onConfirmDelete}>\n                                        {i18n.t('Delete')}\n                                    </Button>\n                                ) : null}\n                            </div>\n                        ) : null}\n\n                        <div className={classes.rightControls}>\n                            <Button secondary onClick={this.onDiscard}>\n                                {discardBtnText}\n                            </Button>\n                        </div>\n                    </div>\n                </ControlBar>\n                {this.translationDialog()}\n                {this.confirmDeleteDialog()}\n            </Fragment>\n        );\n    }\n}\n\nEditBar.propTypes = {\n    dashboardId: PropTypes.string,\n    dashboardName: PropTypes.string,\n    deleteAccess: PropTypes.bool,\n    updateAccess: PropTypes.bool,\n    onDelete: PropTypes.func,\n    onDiscardChanges: PropTypes.func,\n    onSave: PropTypes.func,\n    onTranslate: PropTypes.func,\n};\n\nEditBar.contextTypes = {\n    d2: PropTypes.object,\n};\n\nconst mapStateToProps = state => {\n    const dashboard = sGetEditDashboardRoot(state);\n\n    let deleteAccess;\n    let updateAccess;\n    if (sGetIsNewDashboard(state)) {\n        deleteAccess = true;\n        updateAccess = true;\n    } else {\n        updateAccess = dashboard.access ? dashboard.access.update : false;\n        deleteAccess = dashboard.access ? dashboard.access.delete : false;\n    }\n\n    return {\n        dashboardId: dashboard.id,\n        dashboardName: dashboard.name,\n        deleteAccess,\n        updateAccess,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onSave: () => dispatch(tSaveDashboard()).then(id => id),\n    onDelete: id => dispatch(tDeleteDashboard(id)),\n    onDiscardChanges: () => dispatch(acClearEditDashboard()),\n    onTranslate: (id, value) => dispatch(acSetDashboardDisplayName(id, value)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EditBar);\n","import React, { Fragment, Component } from 'react';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\nimport PropTypes from 'prop-types';\n\nimport { acSetEditDashboard } from '../../actions/editDashboard';\nimport { sGetSelectedId } from '../../reducers/selected';\nimport {\n    sGetDashboardById,\n    sGetDashboardItems,\n    sDashboardsIsFetching,\n} from '../../reducers/dashboards';\nimport DashboardVerticalOffset from './DashboardVerticalOffset';\nimport DashboardContent from './DashboardContent';\nimport EditBar from '../ControlBar/EditBar';\nimport NoContentMessage from '../../widgets/NoContentMessage';\n\nexport const Content = ({ updateAccess }) => {\n    return updateAccess ? (\n        <DashboardContent editMode={true} />\n    ) : (\n        <NoContentMessage text={i18n.t('No access')} />\n    );\n};\n\nContent.propTypes = {\n    updateAccess: PropTypes.bool,\n};\nexport class EditDashboard extends Component {\n    state = {\n        initialized: false,\n    };\n\n    initEditDashboard = () => {\n        if (this.props.dashboard) {\n            this.setState({ initialized: true });\n            this.props.setEditDashboard(this.props.dashboard, this.props.items);\n        }\n    };\n\n    componentDidMount() {\n        this.initEditDashboard();\n    }\n\n    componentDidUpdate() {\n        if (!this.state.initialized) {\n            this.initEditDashboard();\n        }\n    }\n\n    getDashboardContent = () => {\n        const contentNotReady =\n            !this.props.dashboardsLoaded || this.props.id === null;\n\n        return (\n            <div className=\"dashboard-wrapper\">\n                {contentNotReady ? null : (\n                    <Content updateAccess={this.props.updateAccess} />\n                )}\n            </div>\n        );\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <EditBar />\n                <DashboardVerticalOffset editMode={true} />\n                {this.getDashboardContent()}\n            </Fragment>\n        );\n    }\n}\n\nEditDashboard.propTypes = {\n    dashboard: PropTypes.object,\n    dashboardsLoaded: PropTypes.bool,\n    id: PropTypes.string,\n    items: PropTypes.array,\n    setEditDashboard: PropTypes.func,\n    updateAccess: PropTypes.bool,\n};\n\nconst mapStateToProps = state => {\n    const id = sGetSelectedId(state);\n    const dashboard = id ? sGetDashboardById(state, id) : null;\n\n    const updateAccess =\n        dashboard && dashboard.access ? dashboard.access.update : false;\n\n    return {\n        dashboard,\n        id,\n        updateAccess,\n        items: sGetDashboardItems(state),\n        dashboardsLoaded: !sDashboardsIsFetching(state),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        setEditDashboard: acSetEditDashboard,\n    }\n)(EditDashboard);\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { acSetEditNewDashboard } from '../../actions/editDashboard';\nimport DashboardVerticalOffset from './DashboardVerticalOffset';\nimport EditBar from '../ControlBar/EditBar';\nimport DashboardContent from './DashboardContent';\n\nclass NewDashboard extends Component {\n    componentDidMount() {\n        this.props.setNewDashboard();\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <EditBar />\n                <DashboardVerticalOffset editMode={true} />\n                <div className=\"dashboard-wrapper\">\n                    <DashboardContent editMode={true} />\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nNewDashboard.propTypes = {\n    setNewDashboard: PropTypes.func,\n};\n\nexport default connect(\n    null,\n    {\n        setNewDashboard: acSetEditNewDashboard,\n    }\n)(NewDashboard);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { tSelectDashboard } from '../../actions/dashboards';\nimport { sDashboardsIsFetching } from '../../reducers/dashboards';\nimport { EDIT, NEW } from './dashboardModes';\nimport ViewDashboard from './ViewDashboard';\nimport EditDashboard from './EditDashboard';\nimport NewDashboard from './NewDashboard';\n\nclass Dashboard extends Component {\n    setDashboard = () => {\n        if (this.props.dashboardsLoaded) {\n            const id = this.props.match.params.dashboardId || null;\n\n            this.props.selectDashboard(id);\n\n            this.scrollToTop();\n        }\n    };\n\n    scrollToTop = () => {\n        window.scrollTo(0, 0);\n    };\n\n    componentDidMount() {\n        this.setDashboard();\n    }\n\n    componentDidUpdate() {\n        this.setDashboard();\n    }\n\n    render() {\n        switch (this.props.mode) {\n            case EDIT:\n                return <EditDashboard />;\n            case NEW:\n                return <NewDashboard />;\n            default:\n                return <ViewDashboard />;\n        }\n    }\n}\n\nDashboard.propTypes = {\n    dashboardsLoaded: PropTypes.bool,\n    match: PropTypes.object,\n    mode: PropTypes.string,\n    selectDashboard: PropTypes.func,\n};\n\nconst mapStateToProps = state => {\n    return { dashboardsLoaded: !sDashboardsIsFetching(state) };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        selectDashboard: tSelectDashboard,\n    }\n)(Dashboard);\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { HeaderBar } from '@dhis2/ui-widgets';\nimport { CssVariables } from '@dhis2/ui-core';\n\nimport { EDIT, VIEW, NEW } from './Dashboard/dashboardModes';\nimport { acReceivedUser } from '../actions/user';\nimport { tFetchDashboards } from '../actions/dashboards';\nimport { tSetControlBarRows } from '../actions/controlBar';\nimport { tSetDimensions } from '../actions/dimensions';\nimport Dashboard from './Dashboard/Dashboard';\nimport SnackbarMessage from './SnackbarMessage/SnackbarMessage';\n\nimport 'typeface-roboto';\nimport './App.css';\n\nexport class App extends Component {\n    componentDidMount() {\n        this.props.setCurrentUser(this.props.d2.currentUser);\n        this.props.fetchDashboards();\n        this.props.setControlBarRows();\n        this.props.setDimensions(this.props.d2);\n    }\n\n    getChildContext() {\n        return { baseUrl: this.props.baseUrl, i18n, d2: this.props.d2 };\n    }\n\n    render() {\n        return (\n            <>\n                <CssVariables colors spacers />\n                <div className=\"app-wrapper\">\n                    <div className=\"dashboard-header-bar\">\n                        <HeaderBar appName={i18n.t('Dashboard')} />\n                    </div>\n                    <Router>\n                        <Switch>\n                            <Route\n                                exact\n                                path=\"/\"\n                                render={props => (\n                                    <Dashboard {...props} mode={VIEW} />\n                                )}\n                            />\n                            <Route\n                                exact\n                                path=\"/new\"\n                                render={props => (\n                                    <Dashboard {...props} mode={NEW} />\n                                )}\n                            />\n                            <Route\n                                exact\n                                path=\"/:dashboardId\"\n                                render={props => (\n                                    <Dashboard {...props} mode={VIEW} />\n                                )}\n                            />\n                            <Route\n                                exact\n                                path=\"/:dashboardId/edit\"\n                                render={props => (\n                                    <Dashboard {...props} mode={EDIT} />\n                                )}\n                            />\n                        </Switch>\n                    </Router>\n                    <SnackbarMessage />\n                </div>\n            </>\n        );\n    }\n}\n\nApp.propTypes = {\n    fetchDashboards: PropTypes.func.isRequired,\n    setControlBarRows: PropTypes.func.isRequired,\n    setCurrentUser: PropTypes.func.isRequired,\n    setDimensions: PropTypes.func.isRequired,\n    baseUrl: PropTypes.string,\n    d2: PropTypes.object,\n};\n\nApp.childContextTypes = {\n    baseUrl: PropTypes.string,\n    i18n: PropTypes.object,\n    d2: PropTypes.object,\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentUser: currentUser => dispatch(acReceivedUser(currentUser)),\n        fetchDashboards: () => dispatch(tFetchDashboards()),\n        setControlBarRows: () => dispatch(tSetControlBarRows()),\n        setDimensions: d2 => dispatch(tSetDimensions(d2)),\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(App);\n","import { RECEIVED_USER } from '../reducers/user';\n\nexport const acReceivedUser = value => ({\n    type: RECEIVED_USER,\n    value,\n});\n","//------------------------------------------------------------------------------\n// <auto-generated>\n// This code was generated by d2-i18n-generate.\n//\n// Changes to this file may cause incorrect behavior and will be lost if\n// the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\nimport i18n from '@dhis2/d2-i18n';\nimport moment from 'moment';\nimport 'moment/locale/ar';\nimport 'moment/locale/es';\nimport 'moment/locale/fr';\nimport 'moment/locale/lo';\nimport 'moment/locale/pt';\nimport 'moment/locale/ru';\nimport 'moment/locale/sv';\nimport 'moment/locale/tg';\nimport 'moment/locale/uk';\nimport 'moment/locale/ur';\nimport 'moment/locale/vi';\nimport 'moment/locale/zh-cn';\n\nimport arTranslations from './ar/translations.json';\nimport daTranslations from './da/translations.json';\nimport enTranslations from './en/translations.json';\nimport esTranslations from './es/translations.json';\nimport frTranslations from './fr/translations.json';\nimport idTranslations from './id/translations.json';\nimport kmTranslations from './km/translations.json';\nimport loTranslations from './lo/translations.json';\nimport myTranslations from './my/translations.json';\nimport prsTranslations from './prs/translations.json';\nimport psTranslations from './ps/translations.json';\nimport ptTranslations from './pt/translations.json';\nimport pt_BRTranslations from './pt_BR/translations.json';\nimport ruTranslations from './ru/translations.json';\nimport svTranslations from './sv/translations.json';\nimport tetTranslations from './tet/translations.json';\nimport tgTranslations from './tg/translations.json';\nimport ukTranslations from './uk/translations.json';\nimport urTranslations from './ur/translations.json';\nimport viTranslations from './vi/translations.json';\nimport zhTranslations from './zh/translations.json';\nimport zh_CNTranslations from './zh_CN/translations.json';\n\nconst namespace = 'dashboards-app';\nmoment.locale('en');\n\ni18n.addResources('ar', namespace, arTranslations);\ni18n.addResources('da', namespace, daTranslations);\ni18n.addResources('en', namespace, enTranslations);\ni18n.addResources('es', namespace, esTranslations);\ni18n.addResources('fr', namespace, frTranslations);\ni18n.addResources('id', namespace, idTranslations);\ni18n.addResources('km', namespace, kmTranslations);\ni18n.addResources('lo', namespace, loTranslations);\ni18n.addResources('my', namespace, myTranslations);\ni18n.addResources('prs', namespace, prsTranslations);\ni18n.addResources('ps', namespace, psTranslations);\ni18n.addResources('pt', namespace, ptTranslations);\ni18n.addResources('pt_BR', namespace, pt_BRTranslations);\ni18n.addResources('ru', namespace, ruTranslations);\ni18n.addResources('sv', namespace, svTranslations);\ni18n.addResources('tet', namespace, tetTranslations);\ni18n.addResources('tg', namespace, tgTranslations);\ni18n.addResources('uk', namespace, ukTranslations);\ni18n.addResources('ur', namespace, urTranslations);\ni18n.addResources('vi', namespace, viTranslations);\ni18n.addResources('zh', namespace, zhTranslations);\ni18n.addResources('zh_CN', namespace, zh_CNTranslations);\n\ni18n.setDefaultNamespace(namespace);\ni18n.changeLanguage('en');\n\nexport default i18n;\n","/** @module reducers/selected */\nimport { validateReducer } from '../modules/util';\n\nexport const SET_STYLE = 'SET_STYLE';\n\nexport const DEFAULT_STATE_STYLE = 'LIST';\n\n/**\n * Reducer functions that computes and returns the new state based on the given action\n * @function\n * @param {Object} state The current state\n * @param {Object} action The action to be evaluated\n */\nconst style = (state = DEFAULT_STATE_STYLE, action) => {\n    switch (action.type) {\n        case SET_STYLE:\n            return validateReducer(action.value, DEFAULT_STATE_STYLE);\n        default:\n            return state;\n    }\n};\n\nexport default style;\n\n/**\n * Selectors that point to specific props in the state object\n * @function\n * @param {Object} state\n * @returns {Object}\n */\nexport const sGetStyleRoot = state => state.style;\n","import { combineReducers } from 'redux';\nimport arraySort from 'd2-utilizr/lib/arraySort';\n\nimport dashboards, { sGetDashboardsRoot } from './dashboards';\nimport selected from './selected';\nimport dashboardsFilter, {\n    ownerData,\n    sGetFilterName,\n    sGetFilterOrder,\n    sGetFilterOwner,\n} from './dashboardsFilter';\nimport controlBar from './controlBar';\nimport visualizations from './visualizations';\nimport editDashboard from './editDashboard';\nimport messages from './messages';\nimport user from './user';\nimport snackbar from './snackbar';\nimport itemFilters from './itemFilters';\nimport editItemFilters from './editItemFilters';\nimport style from './style';\nimport dimensions from './dimensions';\nimport settings from './settings';\nimport activeModalDimension from './activeModalDimension';\n\nconst USER = 'system';\n\n// Reducers\n\nexport default combineReducers({\n    dashboards,\n    selected,\n    dashboardsFilter,\n    controlBar,\n    visualizations,\n    messages,\n    user,\n    editDashboard,\n    itemFilters,\n    editItemFilters,\n    style,\n    snackbar,\n    dimensions,\n    settings,\n    activeModalDimension,\n});\n\n// Map constants to data\nconst mapConstToData = {\n    NAME: 'name',\n    ITEMS: 'numberOfItems',\n    CREATED: 'created',\n    OWNER: 'owner',\n};\n\n// Selectors\n\n// Filter dashboards by name\nexport const sFilterDashboardsByName = (dashboards, filter) =>\n    dashboards.filter(d =>\n        d.displayName.toLowerCase().includes(filter.toLowerCase())\n    );\n\n// Filter dashboards by owner, TODO FIXME\nexport const sFilterDashboardsByOwner = (dashboards, filter) => {\n    const ME = ownerData[1]; // TODO\n    const OTHERS = ownerData[2]; // TODO\n\n    switch (filter) {\n        case ME:\n            return dashboards.filter(d => d.owner === USER);\n        case OTHERS:\n            return dashboards.filter(d => d.owner !== USER);\n        default:\n            return dashboards;\n    }\n};\n\n// Filter dashboards by order\nexport const sFilterDashboardsByOrder = (dashboards, filter) => {\n    const filterValues = filter.split(':');\n\n    const key = filterValues[0];\n    const direction = filterValues[1];\n\n    return arraySort(dashboards, direction, mapConstToData[key]);\n};\n\n// Selectors dependency level 2\n\n// Get filtered dashboards\nexport const sGetFilteredDashboards = state => {\n    const dashboards = sGetDashboardsRoot(state);\n\n    const nameFilter = sGetFilterName(state);\n    const ownerFilter = sGetFilterOwner(state);\n    const orderFilter = sGetFilterOrder(state);\n\n    return sFilterDashboardsByOrder(\n        sFilterDashboardsByName(\n            sFilterDashboardsByOwner(dashboards, ownerFilter),\n            nameFilter\n        ),\n        orderFilter\n    );\n};\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\nconst configureStore = () => {\n    const middleware = [thunk];\n\n    // Enable Redux devtools if extension is installed instead of redux-logger\n    const composeEnhancers =\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    if (\n        !window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n        process.env.NODE_ENV !== 'production'\n    ) {\n        middleware.push(createLogger());\n    }\n\n    return createStore(\n        reducer,\n        composeEnhancers(applyMiddleware(...middleware))\n    );\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { init as d2Init, config, getManifest, getUserSettings } from 'd2';\nimport dhis2theme from '@dhis2/d2-ui-core/theme/mui3.theme';\n\nimport { Provider as RuntimeProvider } from '@dhis2/app-runtime';\nimport { CssReset } from '@dhis2/ui-core';\n\nimport App from './components/App';\nimport './index.css';\nimport i18n from './locales';\nimport configureStore from './configureStore';\n\nconst muiTheme = () => createMuiTheme(dhis2theme);\n\nconst configI18n = userSettings => {\n    const uiLocale = userSettings.keyUiLocale;\n\n    if (uiLocale && uiLocale !== 'en') {\n        config.i18n.sources.add(`./i18n/i18n_module_${uiLocale}.properties`);\n    }\n\n    config.i18n.sources.add('./i18n/i18n_module_en.properties');\n    i18n.changeLanguage(uiLocale);\n};\n\nconst init = async () => {\n    const manifest = await getManifest('./manifest.webapp');\n\n    // log app info\n    console.info(\n        `Dashboards app, v${manifest.version}, ${\n            manifest.manifest_generated_at\n        }`\n    );\n\n    const isProd = process.env.NODE_ENV === 'production';\n\n    if (\n        !isProd &&\n        (!process.env.REACT_APP_DHIS2_BASE_URL ||\n            !process.env.REACT_APP_DHIS2_AUTHORIZATION)\n    ) {\n        throw new Error(\n            'Missing env variables REACT_APP_DHIS2_BASE_URL and REACT_APP_DHIS2_AUTHORIZATION'\n        );\n    }\n\n    // api config\n    const baseUrl = isProd\n        ? manifest.activities.dhis.href\n        : process.env.REACT_APP_DHIS2_BASE_URL;\n    const authorization = process.env.REACT_APP_DHIS2_AUTHORIZATION;\n\n    config.baseUrl = `${baseUrl}/api/${manifest.dhis2.apiVersion}`;\n    config.headers = isProd ? null : { Authorization: authorization };\n    config.schemas = [\n        'chart',\n        'map',\n        'report',\n        'reportTable',\n        'eventChart',\n        'eventReport',\n        'dashboard',\n        'organisationUnit',\n        'userGroup',\n    ];\n\n    getUserSettings()\n        .then(configI18n)\n        .then(() => d2Init(config))\n        .then(initializedD2 => {\n            ReactDOM.render(\n                <RuntimeProvider\n                    config={{\n                        baseUrl: baseUrl,\n                        apiVersion: manifest.dhis2.apiVersion,\n                    }}\n                >\n                    <CssReset />\n                    <Provider store={configureStore()}>\n                        <MuiThemeProvider theme={muiTheme()}>\n                            <App baseUrl={baseUrl} d2={initializedD2} />\n                        </MuiThemeProvider>\n                    </Provider>\n                </RuntimeProvider>,\n                document.getElementById('root')\n            );\n        });\n};\n\ninit();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftControls\":\"DashboardsBar_leftControls__3bKI1\",\"rightControls\":\"DashboardsBar_rightControls__2-8Pe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menuItem\":\"ContentMenuItem_menuItem__1VcsV\",\"launchLink\":\"ContentMenuItem_launchLink__nMb80\",\"label\":\"ContentMenuItem_label__15SZV\",\"buttonInsert\":\"ContentMenuItem_buttonInsert__2btkK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemWrap\":\"ItemHeader_itemWrap__2nCVP\",\"itemHeaderWrap\":\"ItemHeader_itemHeaderWrap__3yb6e\",\"itemTitle\":\"ItemHeader_itemTitle__1tL0I\",\"itemActionsWrap\":\"ItemHeader_itemActionsWrap__30avn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ControlBar_root__1ZBpF\",\"content\":\"ControlBar_content__27Lrq\",\"draghandle\":\"ControlBar_draghandle__3TUgE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FatalErrorBoundary_container__fzxUi\",\"icon\":\"FatalErrorBoundary_icon__1gJza\",\"message\":\"FatalErrorBoundary_message__13Cfm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ClearButton_button__13ETW\",\"icon\":\"ClearButton_icon__3hatQ\"};","import isObject from 'lodash/isObject';\nimport { VIS_TYPE_COLUMN, VIS_TYPE_PIVOT_TABLE } from '@dhis2/analytics';\nimport { apiFetchFavorite, getMapFields } from '../../../api/metadata';\nimport {\n    REPORT_TABLE,\n    CHART,\n    MAP,\n    EVENT_REPORT,\n    EVENT_CHART,\n    itemTypeMap,\n} from '../../../modules/itemTypes';\nimport { getBaseUrl, getWithoutId } from '../../../modules/util';\nimport { getGridItemDomId } from '../../ItemGrid/gridUtil';\n\n//external plugins\nconst itemTypeToExternalPlugin = {\n    [MAP]: 'mapPlugin',\n    [EVENT_REPORT]: 'eventReportPlugin',\n    [EVENT_CHART]: 'eventChartPlugin',\n};\nconst hasIntegratedPlugin = type => [CHART, REPORT_TABLE].includes(type);\n\nconst getPlugin = type => {\n    if (hasIntegratedPlugin(type)) {\n        return true;\n    }\n    const pluginName = itemTypeToExternalPlugin[type];\n\n    return global[pluginName];\n};\n\nexport const THEMATIC_LAYER = 'thematic';\n\nexport const pluginIsAvailable = (item = {}, visualization = {}) => {\n    const type = visualization.activeType || item.type;\n\n    return !!getPlugin(type);\n};\n\nexport const extractFavorite = item => {\n    if (!isObject(item)) {\n        return null;\n    }\n\n    const propName = itemTypeMap[item.type].propName;\n\n    return (\n        item[propName] ||\n        (item.reportTable ||\n            item.chart ||\n            item.map ||\n            item.eventReport ||\n            item.eventChart ||\n            {})\n    );\n};\n\nexport const extractMapView = map =>\n    map.mapViews && map.mapViews.find(mv => mv.layer.includes(THEMATIC_LAYER));\n\nexport const loadPlugin = (plugin, config, credentials) => {\n    if (!(plugin && plugin.load)) {\n        return;\n    }\n\n    plugin.url = credentials.baseUrl;\n    plugin.loadingIndicator = true;\n    plugin.dashboard = true;\n    if (credentials.auth) {\n        plugin.auth = credentials.auth;\n    }\n    plugin.load(config);\n};\n\nexport const getId = item => extractFavorite(item).id;\nexport const getName = item => extractFavorite(item).name;\nexport const getDescription = item => extractFavorite(item).description;\nexport const getLink = (item, d2) => {\n    const baseUrl = getBaseUrl(d2);\n    const appUrl = itemTypeMap[item.type].appUrl(getId(item));\n\n    return `${baseUrl}/${appUrl}`;\n};\n\nexport const load = async (\n    item,\n    visualization,\n    { credentials, activeType }\n) => {\n    const config = {\n        ...visualization,\n        el: getGridItemDomId(item.id),\n    };\n\n    const type = activeType || item.type;\n    const plugin = getPlugin(type);\n\n    loadPlugin(plugin, config, credentials);\n};\n\nexport const fetch = async item => {\n    const fetchedFavorite = await apiFetchFavorite(getId(item), item.type, {\n        fields: item.type === MAP ? getMapFields() : null,\n    });\n\n    return fetchedFavorite;\n};\n\nexport const resize = item => {\n    const plugin = getPlugin(item.type);\n\n    if (plugin && plugin.resize) {\n        plugin.resize(getGridItemDomId(item.id));\n    }\n};\n\nexport const unmount = (item, activeType) => {\n    const plugin = getPlugin(activeType);\n\n    if (plugin && plugin.unmount) {\n        plugin.unmount(getGridItemDomId(item.id));\n    }\n};\n\nexport const getVisualizationConfig = (\n    visualization,\n    originalType,\n    activeType\n) => {\n    if (originalType === MAP && originalType !== activeType) {\n        const extractedMapView = extractMapView(visualization);\n\n        if (extractedMapView === undefined) {\n            return null;\n        }\n\n        return getWithoutId({\n            ...visualization,\n            ...extractedMapView,\n            mapViews: undefined,\n            type: activeType === CHART ? VIS_TYPE_COLUMN : VIS_TYPE_PIVOT_TABLE,\n        });\n    } else if (originalType === REPORT_TABLE && activeType === CHART) {\n        return getWithoutId({ ...visualization, type: VIS_TYPE_COLUMN });\n    } else if (originalType === CHART && activeType === REPORT_TABLE) {\n        return getWithoutId({\n            ...visualization,\n            type: VIS_TYPE_PIVOT_TABLE,\n        });\n    }\n\n    return getWithoutId(visualization);\n};\n","import isFunction from 'd2-utilizr/lib/isFunction';\n\nimport { orObject } from '../../modules/util';\n\n// Dimensions for the react-grid-layout\n\nexport const GRID_COMPACT_TYPE = 'vertical'; // vertical | horizonal | null\nexport const GRID_ROW_HEIGHT = 10;\nconst GRID_COLUMN_WIDTH_PX = 20;\nconst GRID_LAYOUT = 'FLEXIBLE'; // FIXED | FLEXIBLE\nexport const MARGIN = [10, 10];\n\nexport const NEW_ITEM_SHAPE = { x: 0, y: 0, w: 20, h: 29 };\nexport const ITEM_MIN_HEIGHT = 4;\n\n// Dimensions for getShape\n\nconst NUMBER_OF_ITEM_COLS = 2;\nconst GRID_COLUMNS = 60;\n\nexport const getGridColumns = () => {\n    switch (GRID_LAYOUT) {\n        case 'FLEXIBLE':\n            return GRID_COLUMNS;\n        case 'FIXED':\n            return Math.floor((window.innerWidth - 20) / GRID_COLUMN_WIDTH_PX);\n        default:\n            return GRID_COLUMNS;\n    }\n};\n\n// isNonNegativeInteger\n\nconst isNonNegativeInteger = x => Number.isInteger(x) && x >= 0;\n\n// Does the item have all the shape properties?\n\nexport const hasShape = item =>\n    isNonNegativeInteger(item.x) &&\n    isNonNegativeInteger(item.y) &&\n    isNonNegativeInteger(item.w) &&\n    isNonNegativeInteger(item.h);\n\n// returns a rectangular grid block dimensioned with x, y, w, h in grid units.\n// based on a grid with 3 items across\nexport const getShape = i => {\n    if (!isNonNegativeInteger(i)) {\n        throw new Error('Invalid grid block number');\n    }\n\n    const col = i % NUMBER_OF_ITEM_COLS;\n    const row = Math.floor(i / NUMBER_OF_ITEM_COLS);\n    const itemWidth = Math.floor((GRID_COLUMNS - 1) / NUMBER_OF_ITEM_COLS);\n    const itemHeight = GRID_ROW_HEIGHT * 2;\n\n    return {\n        x: col * itemWidth,\n        y: row * itemHeight,\n        w: itemWidth,\n        h: itemHeight,\n    };\n};\n\n/**\n * Calculates the grid item's original height in pixels based\n * on the height in grid units. This calculation\n * is copied directly from react-grid-layout GridItem.js (calcPosition)\n *\n * @param {Object} item item containing shape (x, y, w, h)\n */\nconst getOriginalHeight = item => {\n    const originalHeight = Math.round(\n        GRID_ROW_HEIGHT * item.h + Math.max(0, item.h - 1) * MARGIN[1]\n    );\n\n    return { originalHeight };\n};\n\n/**\n * Returns an array of items containing the x, y, w, h dimensions\n * and the item's originalheight in pixels\n * @function\n * @param {Array} items\n * @returns {Array}\n */\n\nexport const withShape = items =>\n    items.map((item, index) => {\n        const itemWithShape = hasShape(item)\n            ? item\n            : Object.assign({}, item, getShape(index));\n\n        return Object.assign(\n            {},\n            itemWithShape,\n            getOriginalHeight(itemWithShape)\n        );\n    });\n\nexport const getGridItemDomId = id => `item-${id}`;\n\nexport function onItemResize(id) {\n    const el = orObject(document.querySelector(`#${getGridItemDomId(id)}`));\n    if (isFunction(el.setViewportSize))\n        setTimeout(\n            () => el.setViewportSize(el.clientWidth - 5, el.clientHeight - 5),\n            10\n        );\n}\n"],"sourceRoot":""}