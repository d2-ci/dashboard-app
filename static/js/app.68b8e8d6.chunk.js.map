{"version":3,"sources":["D2App/components/ControlBar/styles/ControlBar.module.css","D2App/components/ControlBar/styles/DashboardItemChip.module.css","D2App/components/ControlBar/styles/ClearButton.module.css","D2App/components/ControlBar/styles/Filter.module.css","D2App/components/ControlBar/styles/ShowMoreButton.module.css","D2App/components/ControlBar/styles/DashboardsBar.module.css","D2App/components/ItemFilter/styles/FilterSelector.module.css","D2App/components/TitleBar/styles/ViewTitleBar.module.css","D2App/components/Item/VisualizationItem/Visualization/styles/NoVisualizationMessage.module.css","D2App/components/Item/VisualizationItem/Visualization/styles/LoadingMask.module.css","D2App/components/Item/VisualizationItem/styles/FatalErrorBoundary.module.css","D2App/components/Item/ItemHeader/styles/DeleteItemButton.module.css","D2App/components/Item/ItemHeader/styles/PrintItemInfo.module.css","D2App/components/Item/VisualizationItem/styles/ItemFooter.module.css","D2App/components/Item/ListItem/Item.module.css","D2App/components/Item/PrintTitlePageItem/styles/Item.module.css","D2App/components/ItemGrid/styles/ViewItemGrid.module.css","D2App/components/FilterBar/styles/FilterBar.module.css","D2App/components/ItemSelector/styles/HeaderMenuItem.module.css","D2App/components/ItemSelector/styles/ContentMenuItem.module.css","D2App/components/ItemSelector/styles/CategorizedMenuGroup.module.css","D2App/components/ItemSelector/styles/ItemSelector.module.css","D2App/components/TitleBar/styles/EditTitleBar.module.css","D2App/modules/itemTypes.js","D2App/modules/util.js","D2App/components/ItemGrid/gridUtil.js","D2App/components/ControlBar/styles/ConfirmDeleteDialog.module.css","D2App/components/ControlBar/styles/EditBar.module.css","D2App/components/Dashboard/styles/NotSupportedNotice.module.css","D2App/components/Dashboard/styles/PrintInfo.module.css","D2App/components/Dashboard/styles/PrintActionsBar.module.css","D2App/components/Dashboard/styles/PrintLayoutDashboard.module.css","D2App/components/Dashboard/styles/PrintDashboard.module.css","D2App/components/WindowDimensionsProvider.js","D2App/components/ControlBar/ControlBar.js","D2App/icons/Star.js","D2App/api/dataStatistics.js","D2App/components/ControlBar/DashboardItemChip.js","D2App/icons/AddCircle.js","D2App/icons/Search.js","D2App/icons/Clear.js","D2App/components/ControlBar/ClearButton.js","D2App/reducers/dashboardsFilter.js","D2App/modules/isSmallScreen.js","D2App/components/ControlBar/Filter.js","D2App/actions/dashboardsFilter.js","D2App/components/ControlBar/assets/icons.js","D2App/components/ControlBar/ShowMoreButton.js","D2App/components/ControlBar/controlBarDimensions.js","D2App/reducers/controlBar.js","D2App/modules/uiBackendItemConverter.js","D2App/reducers/dashboards.js","D2App/reducers/selected.js","D2App/api/userDataStore.js","D2App/api/controlBar.js","D2App/actions/controlBar.js","D2App/components/ControlBar/DashboardsBar.js","D2App/widgets/NoContentMessage.js","D2App/components/Item/VisualizationItem/assets/icons.js","D2App/reducers/user.js","D2App/reducers/dimensions.js","D2App/reducers/itemFilters.js","D2App/actions/itemFilters.js","D2App/reducers/messages.js","D2App/api/messages.js","D2App/components/Item/MessagesItem/actions.js","D2App/reducers/alert.js","D2App/actions/alert.js","D2App/reducers/visualizations.js","D2App/actions/visualizations.js","D2App/api/metadata.js","D2App/api/index.js","D2App/api/dashboards.js","D2App/api/description.js","D2App/actions/selected.js","D2App/api/localStorage.js","D2App/actions/dashboards.js","D2App/components/ItemFilter/FilterDialog.js","D2App/reducers/settings.js","D2App/reducers/activeModalDimension.js","D2App/actions/activeModalDimension.js","D2App/components/ItemFilter/FilterSelector.js","D2App/components/TitleBar/ViewTitleBar.js","D2App/components/Item/VisualizationItem/Visualization/DefaultPlugin.js","D2App/components/Item/VisualizationItem/Visualization/NoVisualizationMessage.js","D2App/components/Item/VisualizationItem/Visualization/MapPlugin.js","D2App/components/Item/VisualizationItem/Visualization/LoadingMask.js","D2App/components/Item/VisualizationItem/Visualization/getFilteredVisualization.js","D2App/components/Item/VisualizationItem/Visualization/getVisualizationConfig.js","D2App/modules/memoizeOne.js","D2App/components/Item/VisualizationItem/Visualization/Visualization.js","D2App/components/Item/VisualizationItem/FatalErrorBoundary.js","D2App/components/Item/ItemHeader/ViewItemActions.js","D2App/components/Item/ItemHeader/DeleteItemButton.js","D2App/reducers/editDashboard.js","D2App/api/editDashboard.js","D2App/actions/editDashboard.js","D2App/components/Item/ItemHeader/EditItemActions.js","D2App/icons/Info.js","D2App/components/Item/ItemHeader/PrintItemInfo.js","D2App/components/Dashboard/dashboardModes.js","D2App/components/Item/ItemHeader/ItemHeader.js","D2App/components/Item/VisualizationItem/ItemHeaderButtons.js","D2App/components/Item/VisualizationItem/ItemFooter.js","D2App/components/Item/VisualizationItem/Item.js","D2App/widgets/Line.js","D2App/components/Item/MessagesItem/Item.js","D2App/components/Item/NotSupportedItem/Item.js","D2App/icons/Description.js","D2App/icons/Delete.js","D2App/components/Item/ListItem/Item.js","D2App/components/Item/ListItem/actions.js","D2App/reducers/printDashboard.js","D2App/components/Item/TextItem/Item.js","D2App/components/Item/AppItem/Item.js","D2App/components/Item/SpacerItem/Item.js","D2App/components/Item/PageBreakItem/Item.js","D2App/components/Item/PrintTitlePageItem/Item.js","D2App/components/Item/Item.js","D2App/components/Item/ProgressiveLoadingContainer.js","D2App/components/ItemGrid/ViewItemGrid.js","D2App/components/FilterBar/FilterBadge.js","D2App/components/FilterBar/FilterBar.js","D2App/reducers/windowHeight.js","D2App/actions/printDashboard.js","D2App/components/Dashboard/ViewDashboard.js","D2App/components/ItemSelector/ItemSearchField.js","D2App/components/ItemSelector/HeaderMenuItem.js","D2App/icons/Launch.js","D2App/components/ItemSelector/ContentMenuItem.js","D2App/components/ItemSelector/actions.js","D2App/components/ItemSelector/selectableItems.js","D2App/components/ItemSelector/CategorizedMenuGroup.js","D2App/components/ItemSelector/SinglesMenuGroup.js","D2App/components/ItemSelector/ItemSelector.js","D2App/components/TitleBar/EditTitleBar.js","D2App/components/ItemGrid/EditItemGrid.js","D2App/components/ControlBar/ConfirmDeleteDialog.js","D2App/components/ControlBar/EditBar.js","D2App/components/Dashboard/NotSupportedNotice.js","D2App/components/Dashboard/PrintInfo.js","D2App/icons/LessHorizontal.js","D2App/components/Dashboard/PrintActionsBar.js","D2App/modules/printUtils.js","D2App/components/ItemGrid/PrintLayoutItemGrid.js","D2App/components/Dashboard/PrintLayoutDashboard.js","D2App/components/Dashboard/EditDashboard.js","D2App/components/Dashboard/NewDashboard.js","D2App/components/ItemGrid/PrintItemGrid.js","D2App/components/Dashboard/PrintDashboard.js","D2App/actions/windowHeight.js","D2App/components/Dashboard/Dashboard.js","D2App/components/AlertBar/AlertBar.js","D2App/actions/user.js","D2App/api/settings.js","D2App/components/App.js","D2App/actions/dimensions.js","D2App/actions/settings.js","D2App/reducers/style.js","D2App/reducers/index.js","D2App/configureStore.js","D2App/locales/index.js","D2App/AppWrapper.js","D2App/modules/item.js","D2App/components/Item/VisualizationItem/Visualization/plugin.js","D2App/components/Item/ItemHeader/styles/ItemHeader.module.css"],"names":["module","exports","VISUALIZATION","REPORT_TABLE","CHART","MAP","EVENT_REPORT","EVENT_CHART","APP","REPORTS","RESOURCES","USERS","MESSAGES","TEXT","SPACER","PAGEBREAK","PRINT_TITLE_PAGE","DOMAIN_TYPE_AGGREGATE","DOMAIN_TYPE_TRACKER","isVisualizationType","item","itemTypeMap","type","hasMapView","itemType","domainType","isTrackerDomainType","getDefaultItemCount","defaultItemCount","getAppName","appName","id","endPointName","propName","pluralTitle","i18n","t","appUrl","dataStatisticsName","Date","getTime","getEndPointName","getDataStatisticsName","getItemUrl","baseUrl","url","launchUrl","getItemIcon","TableIcon","ChartIcon","MapIcon","ExtensionIcon","DescriptionIcon","PersonIcon","FontDownloadIcon","EmailIcon","CropFreeIcon","NotInterestedIcon","orArray","param","Array","isArray","orObject","isObject","arrayToIdMap","array","reduce","obj","formatDate","value","uiLocale","global","Intl","DateTimeFormat","locale","year","month","day","format","substr","replace","validateReducer","defaultValue","undefined","GRID_COMPACT_TYPE","GRID_ROW_HEIGHT","MARGIN","SM_SCREEN_GRID_COLUMNS","NEW_ITEM_SHAPE","x","y","w","h","MAX_ITEM_GRID_HEIGHT","MAX_ITEM_GRID_HEIGHT_OIPP","MAX_ITEM_GRID_WIDTH_OIPP","A4_LANDSCAPE_WIDTH_PX","getGridColumns","isNonNegativeInteger","Number","isInteger","hasShape","withShape","items","map","i","Object","assign","col","row","Math","floor","itemWidth","MAX_ITEM_GRID_WIDTH","itemHeight","getShape","originalH","smallOriginalH","getProportionalHeight","ratioWH","getSmallLayout","getGridItemProperties","itemId","minH","getPageBreakItemShape","yPos","isStatic","GRID_COLUMNS","static","getPrintTitlePageItemShape","isOneItemPerPage","getItemHeightPx","isSmallScreen","round","max","getGridItemDomId","WindowDimensionsCtx","createContext","windowDims","height","window","innerHeight","width","innerWidth","WindowDimensionsProvider","children","dimensions","setDimensions","useState","useEffect","handleResize","debounce","addEventListener","removeEventListener","Provider","useWindowDimensions","useContext","ControlBar","React","Component","constructor","props","super","onStartDrag","this","setState","dragging","onDrag","onEndDrag","event","preventDefault","stopPropagation","newHeight","clientY","onChangeHeight","requestAnimationFrame","renderDragHandle","data-testid","className","classes","draghandle","style","onMouseDown","state","render","rootClass","cx","root","content","defaultProps","StarIcon","xmlns","viewBox","d","fill","apiPostDataStatistics","async","eventType","d2","getInstance","Api","getApi","post","DashboardItemChip","starred","selected","label","dashboardId","onClick","chipProps","selectedState","unselected","icon","Star","debouncedPostStatistics","link","to","data-test","AddCircleIcon","colors","teal600","SearchIcon","ClearIcon","grey800","ClearButton","onClear","button","Clear","color","SET_DASHBOARDS_FILTER","CLEAR_DASHBOARDS_FILTER","sGetDashboardsFilter","dashboardsFilter","mapDispatchToProps","setDashboardsFilter","clearDashboardsFilter","connect","filterText","isMaxHeight","onKeypressEnter","onToggleMaxHeight","focusedClassName","setFocusedClassName","searchButton","Search","searchIcon","container","onFocus","focused","onBlur","input","placeholder","onChange","target","onKeyUp","keyCode","ChevronDown","ChevronUp","ShowMoreButton","disabled","buttonLabel","placement","showMore","aria-label","getRowsHeight","rows","getControlBarHeight","FIRST_ROW_PADDING_HEIGHT","SET_CONTROLBAR_USER_ROWS","combineReducers","userRows","action","sGetControlBarUserRows","controlBar","sGetControlBarRoot","spacerContent","emptyTextItemContent","isTextType","text","convertUiItemsToBackend","isUiSpacerType","convertBackendItemsToUi","isBackendSpacerType","gridProperties","SET_DASHBOARDS","ADD_DASHBOARDS","SET_DASHBOARD_STARRED","SET_DASHBOARD_DISPLAY_NAME","SET_DASHBOARD_ITEMS","DEFAULT_STATE_DASHBOARDS","byId","EMPTY_DASHBOARD","updateDashboardProp","prop","sGetDashboardsRoot","dashboards","sGetDashboardById","sDashboardsIsFetching","sGetAllDashboards","sGetDashboardItems","sGetStarredDashboards","values","filter","dashboard","sGetUnstarredDashboards","getCustomDashboards","data","arrayFrom","name","displayName","description","displayDescription","favorite","owner","user","created","split","join","lastUpdated","access","numberOfItems","dashboardItems","length","SET_SELECTED_ID","SET_SELECTED_ISLOADING","SET_SELECTED_SHOWDESCRIPTION","SET_SELECTED_ITEM_ACTIVE_TYPE","CLEAR_SELECTED_ITEM_ACTIVE_TYPES","DEFAULT_STATE_SELECTED_SHOWDESCRIPTION","DEFAULT_STATE_SELECTED_ITEM_ACTIVE_TYPES","isLoading","showDescription","itemActiveTypes","activeType","sGetSelectedRoot","sGetSelectedId","sGetSelectedIsLoading","sGetSelectedShowDescription","sGetSelectedItemActiveType","NAMESPACE","hasNamespace","currentUser","dataStore","has","getNamespace","get","create","apiPostUserDataStoreValue","key","set","apiGetUserDataStoreValue","namespace","keys","find","k","console","log","KEY_CONTROLBAR_ROWS","acSetControlBarUserRows","withRouter","selectedId","history","setRows","ref","createRef","scrollToTop","current","scroll","toggleMaxHeight","newRows","cancelMaxHeight","getFilteredDashboards","filteredDashboards","arraySort","toLowerCase","includes","containerClass","expanded","collapsed","viewableRows","rowHeightProp","min","apiPostControlBarRows","controls","newLink","AddCircle","Filter","push","chips","chipContainerClasses","chipContainer","getDashboardChips","marginTop","NoContentMessage","padding","textAlign","fontSize","fontWeight","grey600","ThreeDots","SpeechBubble","margin","fillRule","transform","Warning","Fullscreen","ExitFullscreen","RECEIVED_USER","DEFAULT_STATE_USER","username","isSuperuser","sGetUserUsername","SET_DIMENSIONS","DEFAULT_DIMENSIONS","getDimensionById","DIMENSION_ID_PERIOD","DIMENSION_ID_ORGUNIT","sGetDimensions","CLEAR_ITEM_FILTERS","SET_ITEM_FILTERS","ADD_ITEM_FILTER","REMOVE_ITEM_FILTER","DEFAULT_STATE_ITEM_FILTERS","sGetItemFiltersRoot","itemFilters","sGetNamedItemFilters","createSelector","filters","arr","dimension","acRemoveItemFilter","RECEIVED_MESSAGES","sGetMessagesRoot","messages","messageConversationsQuery","resource","params","fields","order","pageSize","tGetMessages","dataEngine","messageConversations","query","error","getMessages","dispatch","err","SET_ALERT_MESSAGE","CLEAR_ALERT_MESSAGE","sGetAlertMessage","alert","acClearAlertMessage","ADD_VISUALIZATION","CLEAR_VISUALIZATIONS","DEFAULT_STATE_VISUALIZATIONS","isEmpty","p","sGetVisualization","visualizations","sGetVisualizationsRoot","acAddVisualization","getIdNameFields","rename","getDimensionFields","withItems","arrayClean","getAxesFields","getFavoriteFields","withDimensions","withOptions","getFavoritesFields","apiFetchVisualization","getVisualizationId","onError","getDashboardItemsFields","withFavorite","getDashboardFields","dashboardsQuery","paging","dashboardQuery","starDashboardMutation","unstarDashboardMutation","deleteDashboardMutation","apiFetchDashboard","variables","KEY_SHOW_DESCRIPTION","acSetSelectedId","acSetSelectedIsLoading","acSetSelectedShowDescription","tSetSelectedDashboardById","getState","alertTimeout","setTimeout","onSuccess","acAppendDashboards","customDashboard","acSetDashboardItems","localStorage","setItem","forEach","getVisualizationFromItem","clearTimeout","tUpdateShowDescription","apiPostShowDescription","tFetchDashboards","acSetDashboards","apiFetchDashboards","tStarDashboard","isStarred","acSetDashboardStarred","mutate","apiStarDashboard","tDeleteDashboard","apiDeleteDashboard","Promise","resolve","initiallySelectedItems","addItemFilter","removeItemFilter","displayNameProperty","onClose","setFilters","useD2","onSelectItems","dimensionId","onDeselectItems","itemIdsToRemove","newList","onReorderItems","itemIds","oldList","reorderedList","dataTest","position","large","commonProps","onSelect","onDeselect","onReorder","selectedItems","selectedPeriods","ouItems","renderDialogContent","secondary","primary","filterItems","ADD_SETTINGS","DEFAULT_SETTINGS","keyDateFormat","keyAnalysisRelativePeriod","keyAnalysisDigitGroupSeparator","rootOrganisationUnit","keyGatherAnalyticalObjectStatisticsInDashboardViews","sGetSettings","settings","sGetSettingsDisplayNameProperty","sGatherAnalyticalObjectStatisticsInDashboardViews","SET_ACTIVE_MODAL_DIMENSION","CLEAR_ACTIVE_MODAL_DIMENSION","DEFAULT_STATE_ACTIVE_MODAL_DIMENSION","sGetActiveModalDimension","activeModalDimension","acSetActiveModalDimension","clearActiveModalDimension","setActiveModalDimension","showPopover","setShowPopover","useRef","onCloseDialog","buttonContainer","onClickOutside","reference","arrow","onDimensionClick","selectedIds","ViewTitleBar","moreOptionsIsOpen","setMoreOptionsIsOpen","sharingDialogIsOpen","setSharingDialogIsOpen","redirectUrl","setRedirectUrl","onToggleStarredDashboard","onShowHideDescription","toggleSharingDialog","toggleMoreOptions","StarBorder","showHideDescriptionLabel","toggleStarredDashboardLabel","buttonRef","userAccess","descriptionClasses","descContainer","desc","noDesc","titleBar","title","actions","titleBarIcon","strip","update","editLink","manage","shareButton","small","moreButton","dense","open","onRequestClose","stateProps","dispatchProps","ownProps","DefaultPlugin","visualization","options","useConfig","credentials","auth","defaultHeaders","Authorization","prevItem","prevActiveType","load","unmount","shouldPluginReload","reloadAllowed","visChanged","NoVisualizationMessage","message","MapPlugin","applyFilters","mapViews","mapView","layer","pluginIsAvailable","hideTitle","LoadingMask","center","getFilteredVisualization","visRows","visColumns","columns","visFilters","dimensionFound","dimensionObjects","getWithoutId","object","getVisualizationConfig","originalType","extractedMapView","mv","VIS_TYPE_COLUMN","VIS_TYPE_PIVOT_TABLE","layout","getAdaptedUiLayoutByType","memoizeOne","fn","lastArgs","lastValue","args","every","arg","Visualization","pluginLoaded","onLoadingComplete","memoizedGetFilteredVisualization","memoizedGetVisualizationConfig","availableHeight","availableWidth","pluginProps","d2Config","forDashboard","FatalErrorBoundary","errorFound","componentDidCatch","info","ViewItemActions","actionButtons","itemActionsWrap","DeleteItemButton","deleteItemButton","red500","RECEIVED_EDIT_DASHBOARD","RECEIVED_NOT_EDITING","START_NEW_DASHBOARD","RECEIVED_TITLE","RECEIVED_DESCRIPTION","ADD_DASHBOARD_ITEM","REMOVE_DASHBOARD_ITEM","UPDATE_DASHBOARD_ITEM","RECEIVED_DASHBOARD_LAYOUT","SET_PRINT_PREVIEW_VIEW","CLEAR_PRINT_PREVIEW_VIEW","DEFAULT_STATE_EDIT_DASHBOARD","NEW_DASHBOARD_STATE","printPreviewView","sGetEditDashboardRoot","editDashboard","sGetIsEditing","sGetIsPrintPreviewView","sGetEditDashboardItems","createDashboardMutation","updateDashboardMutation","generatePayload","acClearEditDashboard","acAddDashboardItem","itemPropName","generateUid","gridItemProperties","shape","acUpdateDashboardItem","acRemoveDashboardItem","tSaveDashboard","dashboardToSave","response","uid","updateDashboard","postDashboard","WarningIcon","PrintWarning","warning","Info","EDIT","NEW","VIEW","PRINT","PRINT_LAYOUT","isEditMode","mode","isPrintMode","isViewMode","ItemHeader","forwardRef","dashboardMode","isShortened","rest","Actions","EditItemActions","PrintItemInfo","getItemActionsMap","itemHeaderWrap","itemTitle","iconFill","ItemHeaderButtons","menuIsOpen","setMenuIsOpen","onSelectActiveType","isTrackerType","onViewTable","closeMenu","onViewChart","onViewMap","canViewAs","isSingleValue","isYearOverYear","VIS_TYPE_GAUGE","VIS_TYPE_PIE","interpretationMenuLabel","activeFooter","ViewAsMenuItems","isFullscreen","onToggleFullscreen","href","getLink","onToggleFooter","fullscreenSupported","ItemFooter","line","scrollContainer","Item","showFooter","configLoaded","isFullscreenSupported","el","document","querySelector","itemDomElSelector","requestFullscreen","webkitRequestFullscreen","handleFullscreenChange","fullscreenElement","webkitFullscreenElement","exitFullscreen","webkitExitFullscreen","getUniqueKey","uniqueId","onToggleItemExpanded","setActiveType","getActiveType","isEditing","getAvailableHeight","context","calculatedHeight","headerRef","clientHeight","memoizedGetContentHeight","contentRef","offsetHeight","getAvailableWidth","rect","getBoundingClientRect","ITEM_CONTENT_PADDING","measuredHeight","preferMeasured","updateVisualization","gatherDataStatistics","e","onfullscreenchange","onwebkitfullscreenchange","componentWillUnmount","componentDidUpdate","prevProps","gridWidth","setViewportSize","clientWidth","pluginResize","getVisualizationName","shortened","contextType","Function","prototype","backgroundColor","grey200","border","Line","PRIVATE","messageTypes","VALIDATION_RESULT","TICKET","SYSTEM","list","listStyleType","paddingLeft","seeAll","marginBottom","sender","lineHeight","snippet","maxHeight","overflow","MessagesContainer","setUiLocale","userSettings","getUiLocale","getMessageHref","msg","msgIdentifier","messageType","modeClass","latestMsg","slice","getMessageSender","readClass","read","msgDate","location","messageCount","getMessageItems","NotSupportedItem","display","justifyContent","alignItems","align","grey500","DeleteIcon","getItemTitle","tRemoveListItemContent","dashboardItem","listItemType","newContent","contentItems","index","findIndex","getContentItems","contentItem","deleteButton","deletebutton","deleteicon","grey900","Description","itemicon","SET_PRINT_DASHBOARD","CLEAR_PRINT_DASHBOARD","ADD_PRINT_DASHBOARD_ITEM","SET_PRINT_DASHBOARD_LAYOUT","REMOVE_PRINT_DASHBOARD_ITEM","UPDATE_PRINT_DASHBOARD_ITEM","DEFAULT_STATE_PRINT_DASHBOARD","DEFAULT_DASHBOARD_ITEMS","NEW_PRINT_DASHBOARD_STATE","sGetPrintDashboardRoot","printDashboard","sGetIsPrinting","sGetPrintDashboardItems","textDiv","whiteSpace","textField","fontStretch","onChangeText","updatedItem","viewItem","textDivStyle","editItem","onEdit","multiline","fullWidth","printItem","textItem","getIframeSrc","appDetails","iframeSrc","ouIds","ouFilter","path","appKey","system","installedApps","app","dashboardWidget","src","SpacerItem","PageBreakItem","PrintTitlePageItem","titlePage","filterTitle","listItems","filterListItem","val","filterList","getItemFilterList","viewDashboard","sGetPrintDashboardName","sGetPrintDashboardDescription","GridItem","VisualizationItem","MessagesItem","ListItem","TextItem","AppItem","getGridItem","ProgressiveLoadingContainer","shouldLoad","containerRef","shouldLoadHandler","handlerOptions","passive","checkShouldLoad","bufferPx","bufferFactor","bottom","top","removeHandler","registerHandler","debounceMs","getElementsByClassName","componentDidMount","eventProps","pick","selectedDashboard","expandedItems","setExpandedItems","displayItems","setDisplayItems","layoutSm","setLayoutSm","setGridWidth","getItemsWithAdjustedHeight","clickedId","isExpanded","newExpandedItems","expandedItem","gridContainer","translucent","rowHeight","cols","lg","sm","breakpoints","SMALL_SCREEN_BREAKPOINT","layouts","compactType","containerPadding","isDraggable","isResizable","draggableCancel","onWidthChange","containerWidth","getItemComponent","styles","badgeContainer","borderRadius","white","badge","cursor","badgeRemove","textDecoration","marginLeft","FilterBadge","onRemove","count","FilterBar","onBadgeRemove","onBadgeClick","bar","removeItemFIlter","SET_WINDOW_HEIGHT","DEFAULT_STATE_WINDOW_HEIGHT","sGetWindowHeight","windowHeight","acSetPrintDashboard","acClearPrintDashboard","acAddPrintDashboardItem","acUpdatePrintDashboardItem","dashboardIsEditing","dashboardIsPrinting","controlBarRows","clearEditDashboard","clearPrintDashboard","ViewItemGrid","ItemSearchField","HeaderMenuItem","LaunchIcon","LaunchLink","launchLink","rel","InsertButton","buttonInsert","ContentMenuItem","onInsert","visType","ItemIcon","renderedItemIcon","visTypeIcons","menuItem","marginRight","singleItems","header","categorizedItems","listItemTypes","tAddListItemContent","dashboardItemIndex","hasMore","onChangeItemsLimit","seeMore","setSeeMore","addItem","newItem","itemUrl","showMoreButton","category","addToDashboard","ItemSelector","isOpen","setIsOpen","setFilter","setItems","maxOptions","setMaxOptions","Set","queryString","filterStr","then","catch","updateMaxOptions","delete","add","inputRef","maxWidth","menu","itemCount","allItems","concat","EditTitleBar","onChangeTitle","onChangeDescription","section","titleDescription","_","itemSelector","acUpdateDashboardLayout","onLayoutChange","newLayout","onResizeStop","oldItem","onItemResize","ConfirmDeleteDialog","dashboardName","onDeleteConfirmed","onContinueEditing","destructive","deleteAccess","updateAccess","sGetIsNewDashboard","isPrintPreviewView","clearPrintPreview","onSave","onDelete","onDiscardChanges","onTranslate","acSetDashboardDisplayName","showPrintPreview","useDataEngine","translationDlgIsOpen","setTranslationDlgIsOpen","setDashboard","confirmDeleteDlgIsOpen","setConfirmDeleteDlgIsOpen","dboard","onConfirmDelete","newId","onPrintPreview","onTranslationsSaved","translations","dbLocale","translation","property","toggleTranslationDialog","discardBtnText","editBar","objectToTranslate","modelDefinition","fieldsToTranslate","onTranslationSaved","onTranslationError","NotSupportedNotice","noticeContainer","PrintInfo","isLayout","layoutStyle","printSuggestions","divider","LessHorizontalIcon","PrintActionsBar","isSmall","inner","LessHorizontal","print","topMargin","getTransformYPx","elStyle","transformY","match","parseInt","isLeapPage","n","getMultiple","factor","multiple","PrintLayoutItemGrid","updateDashboardLayout","isFirstPageBreak","pageBreaks","sortedPageBreaks","sortBy","itemClassNames","getItemComponents","hideExtraPageBreaks","sortedElements","elements","types","elementsWithBoundingRect","from","classList","indexOf","bottomY","getDomGridItemsSortedByYPos","querySelectorAll","pageBreakBottom","lastItemBottom","foundNonPageBreak","thisItemBottom","gridElement","firstBreak","scrollArea","EDIT_BAR_HEIGHT","addPageBreaks","addDashboardItem","yPosList","pageNum","getPageBreakPositions","fromEdit","setPrintDashboard","updateDashboardItem","actionBarHeight","wrapper","paddingTop","spacers","dp24","pageOuter","setEditDashboard","renderGrid","setNewDashboard","PrintItemGrid","removeDashboardItem","sortedItems","spacerCount","dashboardMap","dashboardsIsEmpty","dashboardsLoaded","routeId","selectDashboard","dashboardToSelect","preferredId","getItem","dash","sGetDashboardsSortedByStarred","setWindowHeight","getElementsByTagName","remove","setHeaderbarVisibility","onResize","onHidden","permanent","SYSTEM_SETTINGS","fetchDashboards","setControlBarRows","apiGetControlBarRows","setCurrentUser","acSetDimensions","displayNameProp","apiFetchDimensions","dim","dimensionType","dataDimensionType","setShowDescription","apiGetShowDescription","addSettings","extraSettings","fetchedSettings","s","apiFetchSystemSettings","exact","AlertBar","DEFAULT_STATE_STYLE","objectClean","conversations","$merge","d2Object","keyUiLocale","authorities","newState","$splice","$unshift","idToRemove","stateItems","layoutHasChanged","newStateItems","stateItem","si","configureStore","middleware","thunk","withExtraArgument","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducer","applyMiddleware","addResources","arTranslations","ar_IQTranslations","ckbTranslations","csTranslations","daTranslations","enTranslations","esTranslations","frTranslations","idTranslations","kmTranslations","loTranslations","myTranslations","nbTranslations","prsTranslations","psTranslations","ptTranslations","pt_BRTranslations","ruTranslations","svTranslations","tetTranslations","tgTranslations","ukTranslations","urTranslations","uzTranslations","uz_CyrlTranslations","viTranslations","zhTranslations","zh_CNTranslations","schemas","authorization","process","REACT_APP_DHIS2_AUTHORIZATION","headers","AppWrapper","store","theme","createMuiTheme","dhis2theme","i18nRoot","reportTable","chart","eventReport","eventChart","itemTypeToExternalPlugin","getPlugin","hasIntegratedPlugin","config","plugin","loadingIndicator","loadPlugin","resize"],"mappings":"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","file":"static/js/app.68b8e8d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ControlBar_root__iikeX\",\"dragging\":\"ControlBar_dragging__3lq79\",\"content\":\"ControlBar_content__26Z33\",\"draghandle\":\"ControlBar_draghandle__27zum\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"DashboardItemChip_link__21drZ\",\"icon\":\"DashboardItemChip_icon__2hcIR\",\"selected\":\"DashboardItemChip_selected__r00uP\",\"unselected\":\"DashboardItemChip_unselected__2H9l2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ClearButton_button__33ZbK\",\"icon\":\"ClearButton_icon__vTJm3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__1Vxdh\",\"input\":\"Filter_input__14lhU\",\"focused\":\"Filter_focused__Lvyz3\",\"searchIcon\":\"Filter_searchIcon__2ojUp\",\"searchButton\":\"Filter_searchButton__1tMTB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ShowMoreButton_container__riJz_\",\"showMore\":\"ShowMoreButton_showMore__3S3He\",\"disabled\":\"ShowMoreButton_disabled__2FQNA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DashboardsBar_container__1xuCo\",\"expanded\":\"DashboardsBar_expanded__3lVl8\",\"controls\":\"DashboardsBar_controls__3PhmY\",\"newLink\":\"DashboardsBar_newLink__2PkLQ\",\"collapsed\":\"DashboardsBar_collapsed__3CY9n\",\"chipContainer\":\"DashboardsBar_chipContainer__IRxuN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonContainer\":\"FilterSelector_buttonContainer__O_amY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ViewTitleBar_container__VivO0\",\"actions\":\"ViewTitleBar_actions__2UTRz\",\"editLink\":\"ViewTitleBar_editLink__d_HzW\",\"titleBar\":\"ViewTitleBar_titleBar__eiwJS\",\"titleBarIcon\":\"ViewTitleBar_titleBarIcon__2cBxv\",\"strip\":\"ViewTitleBar_strip__3xR4U\",\"title\":\"ViewTitleBar_title__2GhTR\",\"descContainer\":\"ViewTitleBar_descContainer__3rF10\",\"desc\":\"ViewTitleBar_desc__3QW6Z\",\"noDesc\":\"ViewTitleBar_noDesc__Jettc\",\"moreButton\":\"ViewTitleBar_moreButton__1HduK\",\"shareButton\":\"ViewTitleBar_shareButton__3yEKR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"NoVisualizationMessage_message__22IPi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"center\":\"LoadingMask_center__KHIYy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FatalErrorBoundary_container__3SViR\",\"icon\":\"FatalErrorBoundary_icon__2UbeP\",\"message\":\"FatalErrorBoundary_message__3FzrY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteItemButton\":\"DeleteItemButton_deleteItemButton__3TJm9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"warning\":\"PrintItemInfo_warning__123PK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"line\":\"ItemFooter_line__3Ko0R\",\"scrollContainer\":\"ItemFooter_scrollContainer__tuq4P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Item_list__1_nkQ\",\"item\":\"Item_item__3-6QE\",\"itemicon\":\"Item_itemicon__QlouX\",\"link\":\"Item_link___3c_q\",\"deleteicon\":\"Item_deleteicon__3usrl\",\"deletebutton\":\"Item_deletebutton__1DpBW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titlePage\":\"Item_titlePage__18CNQ\",\"name\":\"Item_name__3nuTV\",\"description\":\"Item_description__1gFQd\",\"filterTitle\":\"Item_filterTitle__2p7TQ\",\"filterList\":\"Item_filterList__qc_G3\",\"filterListItem\":\"Item_filterListItem__sPbBY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridContainer\":\"ViewItemGrid_gridContainer__2viZg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"FilterBar_bar__1Ma3p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"HeaderMenuItem_item__313hC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menuItem\":\"ContentMenuItem_menuItem__vbKn3\",\"launchLink\":\"ContentMenuItem_launchLink__2Nql9\",\"label\":\"ContentMenuItem_label__ANfH1\",\"buttonInsert\":\"ContentMenuItem_buttonInsert__1joHg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"showMoreButton\":\"CategorizedMenuGroup_showMoreButton__2RbRp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"ItemSelector_menu__2VYae\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"EditTitleBar_section__LIaIC\",\"titleDescription\":\"EditTitleBar_titleDescription__1YsU6\",\"title\":\"EditTitleBar_title__3mUbt\",\"description\":\"EditTitleBar_description__24U5X\",\"itemSelector\":\"EditTitleBar_itemSelector__1cFEp\"};","import i18n from '@dhis2/d2-i18n';\nimport TableIcon from '@material-ui/icons/ViewList';\nimport ChartIcon from '@material-ui/icons/InsertChart';\nimport MapIcon from '@material-ui/icons/Public';\nimport ExtensionIcon from '@material-ui/icons/Extension';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport PersonIcon from '@material-ui/icons/Person';\nimport FontDownloadIcon from '@material-ui/icons/FontDownload';\nimport EmailIcon from '@material-ui/icons/Email';\nimport CropFreeIcon from '@material-ui/icons/CropFree';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested'; // Item types\n\nexport const VISUALIZATION = 'VISUALIZATION';\nexport const REPORT_TABLE = 'REPORT_TABLE';\nexport const CHART = 'CHART';\nexport const MAP = 'MAP';\nexport const EVENT_REPORT = 'EVENT_REPORT';\nexport const EVENT_CHART = 'EVENT_CHART';\nexport const APP = 'APP';\nexport const REPORTS = 'REPORTS';\nexport const RESOURCES = 'RESOURCES';\nexport const USERS = 'USERS';\nexport const MESSAGES = 'MESSAGES';\nexport const TEXT = 'TEXT';\nexport const SPACER = 'SPACER';\nexport const PAGEBREAK = 'PAGEBREAK';\nexport const PRINT_TITLE_PAGE = 'PRINT_TITLE_PAGE';\nconst DOMAIN_TYPE_AGGREGATE = 'AGGREGATE';\nconst DOMAIN_TYPE_TRACKER = 'TRACKER'; // Dashboard helpers\n\nexport const isVisualizationType = item => !!itemTypeMap[item.type].isVisualizationType;\nexport const hasMapView = itemType => itemTypeMap[itemType].domainType === DOMAIN_TYPE_AGGREGATE;\nexport const isTrackerDomainType = itemType => itemTypeMap[itemType].domainType === DOMAIN_TYPE_TRACKER;\nexport const getDefaultItemCount = itemType => itemTypeMap[itemType].defaultItemCount || 5;\nexport const getAppName = itemType => itemTypeMap[itemType].appName || ''; // Item type map\n\nexport const itemTypeMap = {\n  [VISUALIZATION]: {\n    id: VISUALIZATION,\n    endPointName: 'visualizations',\n    propName: 'visualization',\n    pluralTitle: i18n.t('Visualizations'),\n    appUrl: id => `dhis-web-data-visualizer/#/${id}`,\n    appName: 'Data Visualizer',\n    defaultItemCount: 10\n  },\n  [REPORT_TABLE]: {\n    id: REPORT_TABLE,\n    endPointName: 'visualizations',\n    dataStatisticsName: 'REPORT_TABLE_VIEW',\n    propName: 'visualization',\n    pluralTitle: i18n.t('Pivot tables'),\n    domainType: DOMAIN_TYPE_AGGREGATE,\n    isVisualizationType: true,\n    appUrl: id => `dhis-web-data-visualizer/#/${id}`,\n    appName: 'Data Visualizer'\n  },\n  [CHART]: {\n    id: CHART,\n    endPointName: 'visualizations',\n    propName: 'visualization',\n    dataStatisticsName: 'CHART_VIEW',\n    pluralTitle: i18n.t('Charts'),\n    domainType: DOMAIN_TYPE_AGGREGATE,\n    isVisualizationType: true,\n    appUrl: id => `dhis-web-data-visualizer/#/${id}`,\n    appName: 'Data Visualizer'\n  },\n  [MAP]: {\n    id: MAP,\n    endPointName: 'maps',\n    dataStatisticsName: 'MAP_VIEW',\n    propName: 'map',\n    pluralTitle: i18n.t('Maps'),\n    domainType: DOMAIN_TYPE_AGGREGATE,\n    isVisualizationType: true,\n    appUrl: id => `dhis-web-maps/?id=${id}`,\n    appName: 'Maps'\n  },\n  [EVENT_REPORT]: {\n    id: EVENT_REPORT,\n    endPointName: 'eventReports',\n    propName: 'eventReport',\n    pluralTitle: i18n.t('Event reports'),\n    domainType: DOMAIN_TYPE_TRACKER,\n    isVisualizationType: true,\n    appUrl: id => `dhis-web-event-reports/?id=${id}`,\n    appName: 'Event Reports'\n  },\n  [EVENT_CHART]: {\n    id: EVENT_CHART,\n    endPointName: 'eventCharts',\n    propName: 'eventChart',\n    pluralTitle: i18n.t('Event charts'),\n    domainType: DOMAIN_TYPE_TRACKER,\n    isVisualizationType: true,\n    appUrl: id => `dhis-web-event-visualizer/?id=${id}`,\n    appName: 'Event Visualizer'\n  },\n  [APP]: {\n    endPointName: 'apps',\n    propName: 'appKey',\n    pluralTitle: i18n.t('Apps')\n  },\n  [REPORTS]: {\n    id: REPORTS,\n    endPointName: 'reports',\n    propName: 'reports',\n    pluralTitle: i18n.t('Reports'),\n    appUrl: (id, type) => {\n      switch (type) {\n        case 'HTML':\n          return `dhis-web-reports/#/standard-report/view/${id}`;\n\n        case 'JASPER_REPORT_TABLE':\n        case 'JASPER_JDBC':\n        default:\n          return `api/reports/${id}/data.pdf?t=${new Date().getTime()}`;\n      }\n    }\n  },\n  [RESOURCES]: {\n    id: RESOURCES,\n    endPointName: 'resources',\n    propName: 'resources',\n    pluralTitle: i18n.t('Resources'),\n    appUrl: id => `api/documents/${id}/data`\n  },\n  [USERS]: {\n    id: USERS,\n    endPointName: 'users',\n    propName: 'users',\n    pluralTitle: i18n.t('Users'),\n    appUrl: id => `dhis-web-dashboard-integration/profile.action?id=${id}`\n  },\n  [TEXT]: {\n    id: TEXT,\n    propName: 'text'\n  },\n  [MESSAGES]: {\n    propName: 'messages'\n  },\n  [SPACER]: {\n    propName: 'text'\n  },\n  [PAGEBREAK]: {\n    propName: 'text'\n  },\n  [PRINT_TITLE_PAGE]: {\n    propName: 'text'\n  }\n};\nexport const getEndPointName = type => itemTypeMap[type].endPointName;\nexport const getDataStatisticsName = type => itemTypeMap[type].dataStatisticsName || null;\nexport const getItemUrl = (type, item, baseUrl) => {\n  let url;\n\n  if (type === APP) {\n    url = item.launchUrl;\n  }\n\n  if (itemTypeMap[type] && itemTypeMap[type].appUrl) {\n    url = `${baseUrl}/${itemTypeMap[type].appUrl(item.id, item.type)}`;\n  }\n\n  return url;\n};\nexport const getItemIcon = type => {\n  switch (type) {\n    case REPORT_TABLE:\n    case EVENT_REPORT:\n    case REPORTS:\n      return TableIcon;\n\n    case CHART:\n    case EVENT_CHART:\n      return ChartIcon;\n\n    case MAP:\n      return MapIcon;\n\n    case APP:\n      return ExtensionIcon;\n\n    case RESOURCES:\n      return DescriptionIcon;\n\n    case USERS:\n      return PersonIcon;\n\n    case TEXT:\n      return FontDownloadIcon;\n\n    case MESSAGES:\n      return EmailIcon;\n\n    case SPACER:\n      return CropFreeIcon;\n\n    default:\n      return NotInterestedIcon;\n  }\n};","import isObject from 'lodash/isObject'; // validation\n\nexport function orNull(param) {\n  return param === undefined ? null : param;\n}\nexport function orArray(param) {\n  return Array.isArray(param) ? param : [];\n}\nexport function orObject(param) {\n  return isObject(param) ? param : {};\n} // array\n\nexport function arrayGetById(array, id) {\n  return array.find(item => item.id === id);\n} // object\n\nexport function arrayToIdMap(array) {\n  return array.reduce((obj, item) => {\n    obj[item.id] = item;\n    return obj;\n  }, {});\n} // date\n\nexport function getDate() {\n  const y = Math.floor(Math.random() * 3) + 2015;\n  const M = Math.floor(Math.random() * 12) + 1;\n  const d = Math.floor(Math.random() * 28) + 1; // const h = Math.floor(Math.random() * 23) + 1;\n  // const m = Math.floor(Math.random() * 59) + 1;\n  // const s = Math.floor(Math.random() * 59) + 1;\n\n  return new Date(`${y}-${M}-${d}`).toJSON().replace('T', ' ').substr(0, 10);\n}\nexport const formatDate = (value, uiLocale) => {\n  if (typeof global.Intl !== 'undefined' && Intl.DateTimeFormat) {\n    const locale = uiLocale || 'en';\n    return new Intl.DateTimeFormat(locale, {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    }).format(new Date(value));\n  }\n\n  return value.substr(0, 19).replace('T', ' ');\n};\n/**\n * Sorts an array of objects based on provided date property\n *\n * @param {Array} items Array of objects\n * @param {String} dateProp Name of the date property to be used for sorting\n * @param {Boolean} ascending Whether to sort ascending or descending\n */\n\nexport const sortByDate = (items, dateProp, ascending = true) => {\n  const values = Object.values(items);\n  values.sort((a, b) => {\n    const aDate = new Date(a[dateProp]);\n    const bDate = new Date(b[dateProp]);\n    return ascending ? aDate - bDate : bDate - aDate;\n  });\n  return values;\n}; // reducer validator\n\nexport const validateReducer = (value, defaultValue) => value === undefined || value === null ? defaultValue : value;","// Dimensions for the react-grid-layout\nexport const GRID_COMPACT_TYPE = 'vertical'; // vertical | horizonal | null\n\nexport const GRID_ROW_HEIGHT = 10;\nconst GRID_COLUMN_WIDTH_PX = 20;\nconst GRID_LAYOUT = 'FLEXIBLE'; // FIXED | FLEXIBLE\n\nexport const MARGIN = [10, 10];\nconst SM_SCREEN_MIN_ITEM_GRID_HEIGHT = 16; //310px\n\nexport const SM_SCREEN_GRID_COLUMNS = 12;\nexport const NEW_ITEM_SHAPE = {\n  x: 0,\n  y: 0,\n  w: 20,\n  h: 29\n}; // Dimensions for getShape\n\nconst NUMBER_OF_ITEM_COLS = 2;\nconst GRID_COLUMNS = 60;\nconst MAX_ITEM_GRID_WIDTH = GRID_COLUMNS - 1;\nexport const MAX_ITEM_GRID_HEIGHT = 34;\nexport const MAX_ITEM_GRID_HEIGHT_OIPP = 35;\nexport const MAX_ITEM_GRID_WIDTH_OIPP = 56;\nconst MIN_ITEM_GRID_HEIGHT = 4; // for A4 landscape (297x210mm)\n// 794 px = (21cm / 2.54) * 96 pixels/inch\n// 1122 px = 29.7 /2.54 * 96 pixels/inch\n// const a4LandscapeHeightPx = 794\n\nexport const A4_LANDSCAPE_WIDTH_PX = 1102;\nexport const getGridColumns = () => {\n  switch (GRID_LAYOUT) {\n    case 'FLEXIBLE':\n      return GRID_COLUMNS;\n\n    case 'FIXED':\n      return Math.floor((window.innerWidth - 20) / GRID_COLUMN_WIDTH_PX);\n\n    default:\n      return GRID_COLUMNS;\n  }\n}; // isNonNegativeInteger\n\nconst isNonNegativeInteger = x => Number.isInteger(x) && x >= 0; // Does the item have all the shape properties?\n\n\nexport const hasShape = item => isNonNegativeInteger(item.x) && isNonNegativeInteger(item.y) && isNonNegativeInteger(item.w) && isNonNegativeInteger(item.h); // returns a rectangular grid block dimensioned with x, y, w, h in grid units.\n// based on a grid with 3 items across\n\nconst getShape = i => {\n  const col = i % NUMBER_OF_ITEM_COLS;\n  const row = Math.floor(i / NUMBER_OF_ITEM_COLS);\n  const itemWidth = Math.floor(MAX_ITEM_GRID_WIDTH / NUMBER_OF_ITEM_COLS);\n  const itemHeight = GRID_ROW_HEIGHT * 2;\n  return {\n    x: col * itemWidth,\n    y: row * itemHeight,\n    w: itemWidth,\n    h: itemHeight\n  };\n};\n/**\n * Returns an array of items containing the x, y, w, h dimensions\n * and the item's originalheight in pixels\n * and dimensions to create the small layout (x, y, w, h)\n * @function\n * @param {Array} items\n * @returns {Array}\n */\n\n\nexport const withShape = (items = []) => {\n  const itemsWithShape = items.map((item, i) => hasShape(item) ? item : Object.assign({}, item, getShape(i)));\n  return itemsWithShape.map(item => Object.assign({}, item, {\n    originalH: item.h,\n    smallOriginalH: getProportionalHeight(item)\n  }));\n};\nexport const getProportionalHeight = item => {\n  const ratioWH = item.w / item.h;\n  const h = Math.floor(SM_SCREEN_GRID_COLUMNS / ratioWH);\n  return h < SM_SCREEN_MIN_ITEM_GRID_HEIGHT ? SM_SCREEN_MIN_ITEM_GRID_HEIGHT : h;\n};\nexport const getSmallLayout = items => items.map(item => ({\n  id: item.id,\n  i: item.i,\n  x: item.x,\n  y: item.y,\n  w: SM_SCREEN_GRID_COLUMNS,\n  h: getProportionalHeight(item)\n}));\nexport const getGridItemProperties = itemId => {\n  return {\n    i: itemId,\n    minH: MIN_ITEM_GRID_HEIGHT\n  };\n};\nexport const getPageBreakItemShape = (yPos, isStatic = true) => {\n  return {\n    x: 0,\n    y: yPos,\n    w: MAX_ITEM_GRID_WIDTH,\n    h: 5,\n    static: !!isStatic,\n    minH: 1\n  };\n};\nexport const getPrintTitlePageItemShape = isOneItemPerPage => {\n  return {\n    x: 0,\n    y: 0,\n    w: isOneItemPerPage ? MAX_ITEM_GRID_WIDTH_OIPP : MAX_ITEM_GRID_WIDTH,\n    h: MAX_ITEM_GRID_HEIGHT,\n    static: true,\n    minH: 1\n  };\n};\n/**\n * Calculates the grid item's height in pixels based\n * on the height in grid units. This calculation\n * is copied directly from react-grid-layout GridItem.js (calcPosition)\n *\n * Each row's px height is the sum of the GRID_ROW_HEIGHT + MARGIN-Y\n * So the calculation is:\n * GRID_ROW_HEIGHT* Number of rows\n * +\n * Number of rows-1 * yMargin\n *\n * @param {Object} item item containing shape (x, y, w, h)\n */\n\nexport const getItemHeightPx = (item, isSmallScreen) => {\n  const h = isSmallScreen ? item.smallOriginalH : item.originalH;\n  return Math.round(GRID_ROW_HEIGHT * h + Math.max(0, h - 1) * MARGIN[1]);\n};\nexport const getGridItemDomId = id => `item-${id}`;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ConfirmDeleteDialog_content__EqswE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editBar\":\"EditBar_editBar__1d1xM\",\"controls\":\"EditBar_controls__1t0nO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noticeContainer\":\"NotSupportedNotice_noticeContainer__3z9Up\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PrintInfo_container__9gH0b\",\"title\":\"PrintInfo_title__2_VZd\",\"printSuggestions\":\"PrintInfo_printSuggestions__30tcU\",\"divider\":\"PrintInfo_divider__3wzx9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PrintActionsBar_container__2iQp7\",\"topMargin\":\"PrintActionsBar_topMargin__OpYDN\",\"inner\":\"PrintActionsBar_inner__uBqU7\",\"link\":\"PrintActionsBar_link__lFUmI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PrintLayoutDashboard_wrapper__1WDh4\",\"pageOuter\":\"PrintLayoutDashboard_pageOuter__22acI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PrintDashboard_wrapper__1O3s_\",\"pageOuter\":\"PrintDashboard_pageOuter__fl9tw\"};","import React, { createContext, useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nexport const WindowDimensionsCtx = createContext(null);\n\nconst windowDims = () => ({\n  height: window.innerHeight,\n  width: window.innerWidth\n});\n\nconst WindowDimensionsProvider = ({\n  children\n}) => {\n  const [dimensions, setDimensions] = useState(windowDims());\n  useEffect(() => {\n    const handleResize = debounce(() => {\n      setDimensions(windowDims());\n    }, 200);\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return <WindowDimensionsCtx.Provider value={dimensions}>\n            {children}\n        </WindowDimensionsCtx.Provider>;\n};\n\nWindowDimensionsProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default WindowDimensionsProvider;\nexport const useWindowDimensions = () => {\n  return useContext(WindowDimensionsCtx);\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport classes from './styles/ControlBar.module.css';\nexport const DRAG_HANDLE_HEIGHT = 7;\n\nclass ControlBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dragging: false\n    };\n  }\n\n  onStartDrag = () => {\n    this.setState({\n      dragging: true\n    });\n    window.addEventListener('mousemove', this.onDrag);\n    window.addEventListener('mouseup', this.onEndDrag);\n  };\n  onDrag = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    const newHeight = event.clientY;\n\n    if (this.props.onChangeHeight && newHeight !== this.props.height && newHeight > 0) {\n      requestAnimationFrame(() => {\n        this.props.onChangeHeight(newHeight);\n      });\n    }\n  };\n  onEndDrag = () => {\n    this.setState({\n      dragging: false\n    });\n    window.removeEventListener('mousemove', this.onDrag);\n    window.removeEventListener('mouseup', this.onEndDrag);\n\n    if (this.props.onEndDrag) {\n      this.props.onEndDrag();\n    }\n  };\n  renderDragHandle = () => typeof this.props.onChangeHeight === 'function' && <div data-testid=\"controlbar-drag-handle\" className={classes.draghandle} style={{\n    height: DRAG_HANDLE_HEIGHT\n  }} onMouseDown={this.onStartDrag} />;\n\n  render() {\n    const height = Math.max(this.props.height, 0) + DRAG_HANDLE_HEIGHT;\n    const rootClass = cx(classes.root, this.state.dragging && classes.dragging);\n    return <div style={{\n      height\n    }} className={rootClass}>\n                <div className={classes.content}>{this.props.children}</div>\n                {this.renderDragHandle()}\n            </div>;\n  }\n\n}\n\nControlBar.propTypes = {\n  /**\n   * The height of the control bar in number of lines. Must be a positive integer.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Callback function that is called when the control bar is resized.\n   * The callback receives one argument: The new height in pixels.\n   *\n   * If no callback is specified the control bar will not have a drag handle.\n   */\n  height: PropTypes.number.isRequired,\n\n  /**\n   * Callback function that is called when the control bar is dropped after being dragged.\n   * The callback receives one argument: The new height in pixels.\n   *\n   * Ignored if no \"onChangeHeight\" function is provided.\n   */\n  onChangeHeight: PropTypes.func,\n\n  /**\n   * The contents of the control bar.\n   */\n  onEndDrag: PropTypes.func\n};\nControlBar.defaultProps = {\n  onChangeHeight: null,\n  onEndDrag: null\n};\nexport default ControlBar;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst StarIcon = ({\n  className\n}) => <svg className={className} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>;\n\nStarIcon.propTypes = {\n  className: PropTypes.string\n};\nexport default StarIcon;","import { getInstance } from 'd2';\nexport const apiPostDataStatistics = async (eventType, id) => {\n  const d2 = await getInstance();\n  const url = `dataStatistics?eventType=${eventType}&favorite=${id}`;\n  d2.Api.getApi().post(url);\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Chip } from '@dhis2/ui';\nimport { Link } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\nimport StarIcon from '../../icons/Star';\nimport { apiPostDataStatistics } from '../../api/dataStatistics';\nimport classes from './styles/DashboardItemChip.module.css';\nexport const DashboardItemChip = ({\n  starred,\n  selected,\n  label,\n  dashboardId,\n  onClick\n}) => {\n  const chipProps = {\n    selected\n  };\n\n  if (starred) {\n    const selectedState = selected ? classes.selected : classes.unselected;\n    chipProps.icon = <StarIcon className={`${classes.icon} ${selectedState}`} />;\n  }\n\n  const debouncedPostStatistics = debounce(() => apiPostDataStatistics('DASHBOARD_VIEW', dashboardId), 500);\n\n  const handleClick = () => {\n    debouncedPostStatistics();\n    onClick();\n  };\n\n  return <Link className={classes.link} to={`/${dashboardId}`} onClick={handleClick} data-test=\"dashboard-chip\">\n            <Chip {...chipProps}>{label}</Chip>\n        </Link>;\n};\nDashboardItemChip.propTypes = {\n  dashboardId: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  selected: PropTypes.bool.isRequired,\n  starred: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  classes: PropTypes.object\n};\nexport default DashboardItemChip;","import React from 'react';\nimport { colors } from '@dhis2/ui';\n\nconst AddCircleIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill={colors.teal600} viewBox=\"0 0 24 24\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4 11h-3v3c0 .55-.45 1-1 1s-1-.45-1-1v-3H8c-.55 0-1-.45-1-1s.45-1 1-1h3V8c0-.55.45-1 1-1s1 .45 1 1v3h3c.55 0 1 .45 1 1s-.45 1-1 1z\" />\n    </svg>;\n\nexport default AddCircleIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchIcon = ({\n  className\n}) => <svg className={className} xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\" />\n    </svg>;\n\nSearchIcon.propTypes = {\n  className: PropTypes.string\n};\nexport default SearchIcon;","import React from 'react';\nimport { colors } from '@dhis2/ui';\nimport PropTypes from 'prop-types';\n\nconst ClearIcon = ({\n  className\n}) => <svg className={className} fill={colors.grey800} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>;\n\nClearIcon.propTypes = {\n  className: PropTypes.string\n};\nexport default ClearIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClearIcon from '../../icons/Clear';\nimport classes from './styles/ClearButton.module.css';\nexport const ClearButton = ({\n  onClear\n}) => <button className={classes.button} onClick={onClear}>\n        <span>\n            <ClearIcon className={classes.icon} color=\"action\" />\n        </span>\n    </button>;\nClearButton.propTypes = {\n  onClear: PropTypes.func.isRequired\n};\nexport default ClearButton;","import { validateReducer } from '../modules/util';\nexport const SET_DASHBOARDS_FILTER = 'SET_DASHBOARDS_FILTER';\nexport const CLEAR_DASHBOARDS_FILTER = 'CLEAR_DASHBOARDS_FILTER';\nexport const DEFAULT_STATE_DASHBOARDS_FILTER = '';\nexport default ((state = DEFAULT_STATE_DASHBOARDS_FILTER, action) => {\n  switch (action.type) {\n    case SET_DASHBOARDS_FILTER:\n      {\n        return validateReducer(action.value, DEFAULT_STATE_DASHBOARDS_FILTER);\n      }\n\n    case CLEAR_DASHBOARDS_FILTER:\n      {\n        return DEFAULT_STATE_DASHBOARDS_FILTER;\n      }\n\n    default:\n      return state;\n  }\n}); // selectors\n\nexport const sGetDashboardsFilter = state => state.dashboardsFilter;","const SMALL_SCREEN_BREAKPOINT = 480;\n\nconst isSmallScreen = width => width <= SMALL_SCREEN_BREAKPOINT;\n\nexport default isSmallScreen;","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport cx from 'classnames';\nimport SearchIcon from '../../icons/Search';\nimport ClearButton from './ClearButton';\nimport { useWindowDimensions } from '../WindowDimensionsProvider';\nimport { acSetDashboardsFilter, acClearDashboardsFilter } from '../../actions/dashboardsFilter';\nimport { sGetDashboardsFilter } from '../../reducers/dashboardsFilter';\nimport isSmallScreen from '../../modules/isSmallScreen';\nimport classes from './styles/Filter.module.css';\nexport const KEYCODE_ENTER = 13;\nexport const KEYCODE_ESCAPE = 27;\nexport const FilterUnconnected = ({\n  clearDashboardsFilter,\n  filterText,\n  isMaxHeight,\n  setDashboardsFilter,\n  onKeypressEnter,\n  onToggleMaxHeight\n}) => {\n  const [focusedClassName, setFocusedClassName] = useState('');\n  const {\n    width\n  } = useWindowDimensions();\n\n  const setFilterValue = event => {\n    event.preventDefault();\n    setDashboardsFilter(event.target.value);\n  };\n\n  const onKeyUp = event => {\n    switch (event.keyCode) {\n      case KEYCODE_ENTER:\n        onKeypressEnter();\n        clearDashboardsFilter();\n        break;\n\n      case KEYCODE_ESCAPE:\n        clearDashboardsFilter();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const onFocus = event => {\n    event.preventDefault();\n    setFocusedClassName(classes.focused);\n  };\n\n  const onBlur = event => {\n    event.preventDefault();\n    setFocusedClassName('');\n  };\n\n  return isSmallScreen(width) && !isMaxHeight ? <button className={classes.searchButton} onClick={onToggleMaxHeight}>\n            <SearchIcon className={classes.searchIcon} />\n        </button> : <div className={cx(classes.container, `${focusedClassName}`)} onFocus={onFocus} onBlur={onBlur}>\n            <SearchIcon className={classes.searchIcon} />\n            <input className={classes.input} type=\"text\" placeholder={i18n.t('Search for a dashboard')} onChange={setFilterValue} onKeyUp={onKeyUp} value={filterText} data-test=\"search-dashboard-input\" />\n            {filterText && <ClearButton onClear={clearDashboardsFilter} />}\n        </div>;\n};\nFilterUnconnected.propTypes = {\n  clearDashboardsFilter: PropTypes.func,\n  filterText: PropTypes.string,\n  isMaxHeight: PropTypes.bool,\n  setDashboardsFilter: PropTypes.func,\n  onKeypressEnter: PropTypes.func,\n  onToggleMaxHeight: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  filterText: sGetDashboardsFilter(state)\n});\n\nconst mapDispatchToProps = {\n  setDashboardsFilter: acSetDashboardsFilter,\n  clearDashboardsFilter: acClearDashboardsFilter\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterUnconnected);","import { SET_DASHBOARDS_FILTER, CLEAR_DASHBOARDS_FILTER } from '../reducers/dashboardsFilter'; // actions\n\nexport const acSetDashboardsFilter = value => ({\n  type: SET_DASHBOARDS_FILTER,\n  value\n});\nexport const acClearDashboardsFilter = () => ({\n  type: CLEAR_DASHBOARDS_FILTER\n});","import React from 'react';\nexport const ChevronDown = () => <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"m11.29289 15.7071c.39053.3905 1.02369.3905 1.41422 0l4.99999-4.99999c.3905-.39053.3905-1.02369 0-1.41422-.3905-.39052-1.0237-.39052-1.4142 0l-4.2929 4.2929-4.29289-4.2929c-.39053-.39052-1.02369-.39052-1.41422 0-.39052.39053-.39052 1.02369 0 1.41422z\" fill=\"#a0adba\" />\n    </svg>;\nexport const ChevronUp = () => <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"m11.2928932 8.29289322c.360484-.36048396.927715-.3882135 1.3200062-.08318861l.0942074.08318861 5 4.99999998c.3905243.3905243.3905243 1.0236893 0 1.4142136-.360484.3604839-.927715.3882135-1.3200062.0831886l-.0942074-.0831886-4.2928932-4.2921068-4.29289322 4.2921068c-.36048396.3604839-.92771502.3882135-1.32000622.0831886l-.09420734-.0831886c-.36048396-.360484-.3882135-.927715-.08318861-1.3200062l.08318861-.0942074z\" fill=\"#a0adba\" />\n    </svg>;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Tooltip } from '@dhis2/ui';\nimport { ChevronDown, ChevronUp } from './assets/icons';\nimport classes from './styles/ShowMoreButton.module.css';\nexport const SHOWMORE_BAR_HEIGHT = 16;\n\nconst ShowMoreButton = ({\n  onClick,\n  isMaxHeight,\n  disabled\n}) => {\n  const buttonLabel = isMaxHeight ? i18n.t('Show fewer dashboards') : i18n.t('Show more dashboards');\n  return <div className={classes.container}>\n            {disabled ? <div className={classes.disabled}>\n                    <ChevronDown />\n                </div> : <Tooltip content={buttonLabel} placement=\"bottom\">\n                    <button className={classes.showMore} onClick={onClick} data-test=\"showmore-button\" aria-label={buttonLabel}>\n                        {isMaxHeight ? <ChevronUp /> : <ChevronDown />}\n                    </button>\n                </Tooltip>}\n        </div>;\n};\n\nShowMoreButton.propTypes = {\n  disabled: PropTypes.bool,\n  isMaxHeight: PropTypes.bool,\n  onClick: PropTypes.func\n};\nexport default ShowMoreButton;","import { SHOWMORE_BAR_HEIGHT } from './ShowMoreButton';\nexport const CONTROL_BAR_ROW_HEIGHT = 40;\nexport const FIRST_ROW_PADDING_HEIGHT = 10;\nexport const MIN_ROW_COUNT = 1;\nexport const HEADERBAR_HEIGHT = 48;\nconst CONTROL_BAR_OUTER_HEIGHT_DIFF = FIRST_ROW_PADDING_HEIGHT + SHOWMORE_BAR_HEIGHT - 2; // 2 pixel \"adjustment\"\n\nexport const getRowsHeight = rows => {\n  return rows * CONTROL_BAR_ROW_HEIGHT;\n};\nexport const getNumRowsFromHeight = height => {\n  return Math.floor((height - CONTROL_BAR_OUTER_HEIGHT_DIFF) / CONTROL_BAR_ROW_HEIGHT);\n};\nexport const getControlBarHeight = rows => {\n  return getRowsHeight(rows) + CONTROL_BAR_OUTER_HEIGHT_DIFF;\n};","/** @module reducers/controlBar */\nimport { combineReducers } from 'redux';\nimport { validateReducer } from '../modules/util';\nexport const SET_CONTROLBAR_USER_ROWS = 'SET_CONTROLBAR_USER_ROWS';\nexport const DEFAULT_STATE_CONTROLBAR_ROWS = 1;\n\nconst userRows = (state = DEFAULT_STATE_CONTROLBAR_ROWS, action) => {\n  switch (action.type) {\n    case SET_CONTROLBAR_USER_ROWS:\n      return validateReducer(action.value, DEFAULT_STATE_CONTROLBAR_ROWS);\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  userRows\n});\n/**\n * Selectors that point to specific props in the state object\n * @function\n * @param {Object} state\n * @returns {Object}\n */\n\nexport const sGetControlBarRoot = state => state.controlBar; // Selector dependency level 2\n\nexport const sGetControlBarUserRows = state => sGetControlBarRoot(state).userRows;","import { TEXT, SPACER } from './itemTypes';\nimport { getGridItemProperties } from '../components/ItemGrid/gridUtil';\nexport const spacerContent = 'SPACER_ITEM_FOR_DASHBOARD_LAYOUT_CONVENIENCE';\nexport const emptyTextItemContent = 'TEXT_ITEM_WITH_NO_CONTENT';\n\nconst isBackendSpacerType = item => item.type === TEXT && item.text === spacerContent;\n\nconst isUiSpacerType = item => item.type === SPACER;\n\nconst isTextType = item => item.type === TEXT && item.text !== spacerContent;\n\nexport const convertUiItemsToBackend = items => items.map(item => {\n  let text = null;\n\n  if (isUiSpacerType(item)) {\n    text = spacerContent;\n  } else if (isTextType(item)) {\n    text = item.text || emptyTextItemContent;\n  }\n\n  return { ...item,\n    ...(text ? {\n      text\n    } : {})\n  };\n});\nexport const convertBackendItemsToUi = items => items.map(item => {\n  const type = isBackendSpacerType(item) ? SPACER : item.type;\n  const gridProperties = getGridItemProperties(item.id);\n  const text = isTextType(item) ? item.text === emptyTextItemContent ? '' : item.text : null;\n  return { ...item,\n    ...(text !== null ? {\n      text\n    } : {}),\n    type,\n    ...gridProperties\n  };\n});","/** @module reducers/dashboards */\nimport arrayFrom from 'd2-utilizr/lib/arrayFrom';\nimport arraySort from 'd2-utilizr/lib/arraySort';\nimport { orArray, orObject } from '../modules/util';\nimport { convertBackendItemsToUi } from '../modules/uiBackendItemConverter';\nexport const SET_DASHBOARDS = 'SET_DASHBOARDS';\nexport const ADD_DASHBOARDS = 'ADD_DASHBOARDS';\nexport const SET_DASHBOARD_STARRED = 'SET_DASHBOARD_STARRED';\nexport const SET_DASHBOARD_DISPLAY_NAME = 'SET_DASHBOARD_DISPLAY_NAME';\nexport const SET_DASHBOARD_ITEMS = 'SET_DASHBOARD_ITEMS';\nexport const DEFAULT_STATE_DASHBOARDS = {\n  byId: null,\n  items: []\n};\nexport const EMPTY_DASHBOARD = {}; // reducer helper functions\n\nconst updateDashboardProp = ({\n  state,\n  dashboardId,\n  prop,\n  value\n}) => ({\n  byId: { ...state.byId,\n    [dashboardId]: { ...state.byId[dashboardId],\n      [prop]: value\n    }\n  },\n  items: state.items\n});\n/**\n * Reducer that computes and returns the new state based on the given action\n * @function\n * @param {Object} state The current state\n * @param {Object} action The action to be evaluated\n * @returns {Object}\n */\n\n\nexport default ((state = DEFAULT_STATE_DASHBOARDS, action) => {\n  switch (action.type) {\n    case SET_DASHBOARDS:\n      {\n        return {\n          byId: action.value,\n          items: []\n        };\n      }\n\n    case ADD_DASHBOARDS:\n      {\n        return { ...state,\n          byId: { ...state.byId,\n            ...action.value\n          }\n        };\n      }\n\n    case SET_DASHBOARD_STARRED:\n      {\n        return updateDashboardProp({\n          state,\n          dashboardId: action.dashboardId,\n          prop: 'starred',\n          value: action.value\n        });\n      }\n\n    case SET_DASHBOARD_DISPLAY_NAME:\n      {\n        return updateDashboardProp({\n          state,\n          dashboardId: action.dashboardId,\n          prop: 'displayName',\n          value: action.value\n        });\n      }\n\n    case SET_DASHBOARD_ITEMS:\n      {\n        return { ...state,\n          items: action.value\n        };\n      }\n\n    default:\n      return state;\n  }\n}); // root selector\n\nexport const sGetDashboardsRoot = state => state.dashboards; // selector level 1\n\n/**\n * Selector which returns a dashboard by id from the state object\n * If no matching dashboard is found it returns undefined\n * If dashboards.byId is null, then the dashboards api request\n * has not yet completed. If dashboards.byId is an empty object\n * then the dashboards api request is complete, but no dashboards\n * were returned\n *\n * @function\n * @param {Object} state The current state\n * @param {Number} id The id of the dashboard\n * @returns {Object | undefined}\n */\n\nexport const sGetDashboardById = (state, id) => orObject(sGetDashboardsRoot(state).byId)[id];\nexport const sDashboardsIsFetching = state => {\n  return sGetDashboardsRoot(state).byId === null;\n};\n/**\n * Selector which returns all dashboards (the byId object)\n *\n * @function\n * @param {Object} state The current state\n * @returns {Object | undefined}\n */\n\nexport const sGetAllDashboards = state => orObject(sGetDashboardsRoot(state).byId);\n/**\n * Selector which returns the current dashboard items\n *\n * @function\n * @param {Object} state The current state\n * @returns {Array}\n */\n\nexport const sGetDashboardItems = state => sGetDashboardsRoot(state).items; // selector level 2\n\nexport const sGetStarredDashboards = state => Object.values(sGetAllDashboards(state)).filter(dashboard => dashboard.starred === true);\nexport const sGetUnstarredDashboards = state => Object.values(sGetAllDashboards(state)).filter(dashboard => dashboard.starred === false); // selector level 3\n\nexport const sGetStarredDashboardIds = state => {\n  return sGetStarredDashboards(state).map(dashboard => dashboard.id);\n};\nexport const sGetUnstarredDashboardIds = state => sGetUnstarredDashboards(state).map(dashboard => dashboard.id);\nexport const sGetDashboardsSortedByStarred = state => [...arraySort(sGetStarredDashboards(state), 'ASC', 'displayName'), ...arraySort(sGetUnstarredDashboards(state), 'ASC', 'displayName')]; // utils\n\n/**\n * Returns the array of dashboards, customized for ui\n * @function\n * @param {Array} data The original dashboard list\n * @returns {Array}\n */\n\nexport const getCustomDashboards = data => arrayFrom(data).map(d => ({\n  id: d.id,\n  name: d.name,\n  displayName: d.displayName,\n  description: d.description,\n  displayDescription: d.displayDescription,\n  starred: d.favorite,\n  owner: d.user.name,\n  created: d.created.split('T').join(' ').substr(0, 16),\n  lastUpdated: d.lastUpdated.split('T').join(' ').substr(0, 16),\n  access: d.access,\n  numberOfItems: orArray(d.dashboardItems).length,\n  dashboardItems: convertBackendItemsToUi(d.dashboardItems)\n}));","/** @module reducers/selected */\nimport { combineReducers } from 'redux';\nimport { validateReducer } from '../modules/util';\nexport const SET_SELECTED_ID = 'SET_SELECTED_ID';\nexport const SET_SELECTED_ISLOADING = 'SET_SELECTED_ISLOADING';\nexport const SET_SELECTED_SHOWDESCRIPTION = 'SET_SELECTED_SHOWDESCRIPTION';\nexport const SET_SELECTED_ITEM_ACTIVE_TYPE = 'SET_SELECTED_ITEM_ACTIVE_TYPE';\nexport const CLEAR_SELECTED_ITEM_ACTIVE_TYPES = 'CLEAR_SELECTED_ITEM_ACTIVE_TYPES';\nexport const DEFAULT_STATE_SELECTED_ID = null;\nexport const DEFAULT_STATE_SELECTED_ISLOADING = false;\nexport const DEFAULT_STATE_SELECTED_SHOWDESCRIPTION = false;\nexport const DEFAULT_STATE_SELECTED_ITEM_ACTIVE_TYPES = {};\nexport const NON_EXISTING_DASHBOARD_ID = '0';\n/**\n * Reducer functions that computes and returns the new state based on the given action\n * @function\n * @param {Object} state The current state\n * @param {Object} action The action to be evaluated\n */\n\nconst id = (state = DEFAULT_STATE_SELECTED_ID, action) => {\n  switch (action.type) {\n    case SET_SELECTED_ID:\n      return validateReducer(action.value, DEFAULT_STATE_SELECTED_ID);\n\n    default:\n      return state;\n  }\n};\n\nconst isLoading = (state = DEFAULT_STATE_SELECTED_ISLOADING, action) => {\n  switch (action.type) {\n    case SET_SELECTED_ISLOADING:\n      return validateReducer(action.value, DEFAULT_STATE_SELECTED_ISLOADING);\n\n    default:\n      return state;\n  }\n};\n\nconst showDescription = (state = DEFAULT_STATE_SELECTED_SHOWDESCRIPTION, action) => {\n  switch (action.type) {\n    case SET_SELECTED_SHOWDESCRIPTION:\n      return validateReducer(action.value, DEFAULT_STATE_SELECTED_SHOWDESCRIPTION);\n\n    default:\n      return state;\n  }\n};\n\nconst itemActiveTypes = (state = DEFAULT_STATE_SELECTED_ITEM_ACTIVE_TYPES, action) => {\n  switch (action.type) {\n    case SET_SELECTED_ITEM_ACTIVE_TYPE:\n      {\n        return { ...state,\n          [action.id]: action.activeType\n        };\n      }\n\n    case CLEAR_SELECTED_ITEM_ACTIVE_TYPES:\n      {\n        return DEFAULT_STATE_SELECTED_ITEM_ACTIVE_TYPES;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  id,\n  isLoading,\n  showDescription,\n  itemActiveTypes\n}); // Selectors\n\nexport const sGetSelectedRoot = state => state.selected;\nexport const sGetSelectedId = state => sGetSelectedRoot(state).id;\nexport const sGetSelectedIsLoading = state => sGetSelectedRoot(state).isLoading;\nexport const sGetSelectedShowDescription = state => sGetSelectedRoot(state).showDescription;\nexport const sGetSelectedItemActiveType = (state, id) => sGetSelectedRoot(state).itemActiveTypes[id];","import { getInstance } from 'd2';\nexport const NAMESPACE = 'dashboard';\nexport const hasNamespace = async (d2) => await d2.currentUser.dataStore.has(NAMESPACE);\nexport const getNamespace = async (d2, hasNamespace) => hasNamespace ? await d2.currentUser.dataStore.get(NAMESPACE) : await d2.currentUser.dataStore.create(NAMESPACE);\nexport const apiPostUserDataStoreValue = async (key, value) => {\n  const d2 = await getInstance();\n  const ns = await getNamespace(d2, hasNamespace);\n  ns.set(key, value);\n};\nexport const apiGetUserDataStoreValue = async (key, defaultValue) => {\n  const d2 = await getInstance();\n  const namespace = await getNamespace(d2, await hasNamespace(d2));\n  const hasKey = namespace?.keys?.find(k => k === key);\n\n  if (hasKey) {\n    return await namespace.get(key);\n  } else {\n    await apiPostUserDataStoreValue(key, defaultValue, namespace);\n    console.log('(These errors to /userDataStore can be ignored)');\n    return defaultValue;\n  }\n};","import { apiGetUserDataStoreValue, apiPostUserDataStoreValue } from './userDataStore';\nimport { DEFAULT_STATE_CONTROLBAR_ROWS } from '../reducers/controlBar';\nconst KEY_CONTROLBAR_ROWS = 'controlBarRows';\nexport const apiGetControlBarRows = async () => await apiGetUserDataStoreValue(KEY_CONTROLBAR_ROWS, DEFAULT_STATE_CONTROLBAR_ROWS);\nexport const apiPostControlBarRows = async (value) => await apiPostUserDataStoreValue(KEY_CONTROLBAR_ROWS, value);","import { SET_CONTROLBAR_USER_ROWS } from '../reducers/controlBar';\nimport { apiGetControlBarRows } from '../api/controlBar'; // actions\n\nexport const acSetControlBarUserRows = rows => ({\n  type: SET_CONTROLBAR_USER_ROWS,\n  value: rows\n}); // thunks\n\nexport const tSetControlBarRows = () => async dispatch => {\n  const onSuccess = rows => {\n    dispatch(acSetControlBarUserRows(rows));\n  };\n\n  const onError = error => {\n    console.log('Error (apiGetControlBarRows): ', error);\n    return error;\n  };\n\n  try {\n    const controlBarRows = await apiGetControlBarRows();\n    return onSuccess(controlBarRows);\n  } catch (err) {\n    return onError(err);\n  }\n};","import React, { useState, useEffect, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport cx from 'classnames';\nimport arraySort from 'd2-utilizr/lib/arraySort';\nimport PropTypes from 'prop-types';\nimport ControlBar, { DRAG_HANDLE_HEIGHT } from './ControlBar';\nimport Chip from './DashboardItemChip';\nimport AddCircleIcon from '../../icons/AddCircle';\nimport Filter from './Filter';\nimport ShowMoreButton from './ShowMoreButton';\nimport { FIRST_ROW_PADDING_HEIGHT, MIN_ROW_COUNT, getRowsHeight, getControlBarHeight, getNumRowsFromHeight } from './controlBarDimensions';\nimport { useWindowDimensions } from '../WindowDimensionsProvider';\nimport { sGetDashboardsFilter } from '../../reducers/dashboardsFilter';\nimport { sGetControlBarUserRows } from '../../reducers/controlBar';\nimport { sGetAllDashboards } from '../../reducers/dashboards';\nimport { sGetSelectedId } from '../../reducers/selected';\nimport { acSetControlBarUserRows } from '../../actions/controlBar';\nimport { apiPostControlBarRows } from '../../api/controlBar';\nimport isSmallScreen from '../../modules/isSmallScreen';\nimport classes from './styles/DashboardsBar.module.css';\nexport const MAX_ROW_COUNT = 10;\n\nconst DashboardsBar = ({\n  userRows,\n  onChangeHeight,\n  history,\n  dashboards,\n  selectedId,\n  filterText\n}) => {\n  const [rows, setRows] = useState(userRows);\n  const {\n    width\n  } = useWindowDimensions();\n  const ref = createRef();\n  useEffect(() => {\n    setRows(userRows);\n  }, [userRows]);\n\n  const isMaxHeight = () => rows === MAX_ROW_COUNT;\n\n  const adjustHeight = newHeight => {\n    const newRows = Math.max(MIN_ROW_COUNT, getNumRowsFromHeight(newHeight - 52) // don't rush the transition to a bigger row count\n    );\n\n    if (newRows !== rows) {\n      onChangeHeight(Math.min(newRows, MAX_ROW_COUNT));\n    }\n  };\n\n  const onEndDrag = () => apiPostControlBarRows(rows);\n\n  const scrollToTop = () => {\n    if (isMaxHeight()) {\n      ref.current.scroll(0, 0);\n    }\n  };\n\n  const toggleMaxHeight = () => {\n    const newRows = isMaxHeight() ? userRows : MAX_ROW_COUNT;\n    scrollToTop();\n    setRows(newRows);\n  };\n\n  const cancelMaxHeight = () => {\n    scrollToTop();\n    setRows(userRows);\n  };\n\n  const onSelectDashboard = () => {\n    const id = getFilteredDashboards()[0]?.id;\n\n    if (id) {\n      history.push(id);\n    }\n  };\n\n  const getFilteredDashboards = () => {\n    const filteredDashboards = arraySort(Object.values(dashboards).filter(d => d.displayName.toLowerCase().includes(filterText.toLowerCase())), 'ASC', 'displayName');\n    return [...filteredDashboards.filter(d => d.starred), ...filteredDashboards.filter(d => !d.starred)];\n  };\n\n  const containerClass = cx(classes.container, isMaxHeight() ? classes.expanded : classes.collapsed);\n  const viewableRows = isSmallScreen(width) && !isMaxHeight() ? MIN_ROW_COUNT : rows;\n  const rowHeightProp = {\n    height: getRowsHeight(viewableRows) + FIRST_ROW_PADDING_HEIGHT\n  };\n\n  const getDashboardChips = () => {\n    const chips = getFilteredDashboards().map(dashboard => <Chip key={dashboard.id} label={dashboard.displayName} starred={dashboard.starred} dashboardId={dashboard.id} selected={dashboard.id === selectedId} onClick={cancelMaxHeight} />);\n\n    if (isSmallScreen(width)) {\n      const chipContainerClasses = cx(classes.chipContainer, isMaxHeight() ? classes.expanded : classes.collapsed);\n      return <div className={chipContainerClasses} style={rowHeightProp}>\n                    {chips}\n                </div>;\n    } else {\n      return chips;\n    }\n  };\n\n  return <>\n            <ControlBar height={getControlBarHeight(viewableRows)} onChangeHeight={!isSmallScreen(width) ? adjustHeight : null} onEndDrag={onEndDrag}>\n                <div className={containerClass} ref={ref} style={rowHeightProp}>\n                    <div className={classes.controls}>\n                        <Link className={classes.newLink} to={'/new'} data-test=\"link-new-dashboard\">\n                            <AddCircleIcon />\n                        </Link>\n                        <Filter onKeypressEnter={onSelectDashboard} onToggleMaxHeight={toggleMaxHeight} isMaxHeight={isMaxHeight()} />\n                    </div>\n                    {getDashboardChips()}\n                </div>\n                <ShowMoreButton onClick={toggleMaxHeight} isMaxHeight={isMaxHeight()} disabled={userRows === MAX_ROW_COUNT} />\n            </ControlBar>\n            <div style={{\n      marginTop: getControlBarHeight(isSmallScreen(width) && !isMaxHeight() ? MIN_ROW_COUNT : userRows) + DRAG_HANDLE_HEIGHT\n    }} />\n        </>;\n};\n\nDashboardsBar.propTypes = {\n  dashboards: PropTypes.object,\n  filterText: PropTypes.string,\n  history: PropTypes.object,\n  selectedId: PropTypes.string,\n  userRows: PropTypes.number,\n  onChangeHeight: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  dashboards: sGetAllDashboards(state),\n  filterText: sGetDashboardsFilter(state),\n  selectedId: sGetSelectedId(state),\n  userRows: sGetControlBarUserRows(state)\n});\n\nconst mapDispatchToProps = {\n  onChangeHeight: acSetControlBarUserRows\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DashboardsBar));","import React from 'react';\nimport { colors } from '@dhis2/ui';\nimport PropTypes from 'prop-types';\n\nconst NoContentMessage = ({\n  text\n}) => <div style={{\n  padding: '50px 10px',\n  textAlign: 'center',\n  fontSize: '15px',\n  fontWeight: 500,\n  color: colors.grey600\n}}>\n        {text}\n    </div>;\n\nNoContentMessage.propTypes = {\n  text: PropTypes.string\n};\nexport default NoContentMessage;","import React from 'react';\nimport { colors } from '@dhis2/ui';\nexport const ThreeDots = () => <svg height=\"18\" viewBox=\"0 0 18 18\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"m4 7.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm10 0c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm-5 0c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z\" fill=\"#6e7a8a\" />\n    </svg>;\nexport const SpeechBubble = () => <svg height=\"20\" viewBox=\"0 0 20 20\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\" style={{\n  margin: '3px 2px 0 2px'\n}} // Temporary fix for the misaligned icon, should be removed once the icon is replaced\n>\n        <path d=\"m20 2h-16c-1.1 0-1.99.9-1.99 2l-.01 18 4-4h14c1.1 0 2-.9 2-2v-12c0-1.1-.9-2-2-2zm-2 12h-12v-2h12zm0-3h-12v-2h12zm0-3h-12v-2h12z\" fill=\"#6e7a8a\" fillRule=\"evenodd\" transform=\"translate(-2 -2)\" />\n    </svg>;\nexport const Warning = () => <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" fill={colors.grey600}>\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\" />\n    </svg>;\nexport const Fullscreen = () => <svg height=\"16\" viewBox=\"0 0 16 16\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"m6.85355339 9.14644661c.17356635.17356635.1928515.44299075.05785545.63785889l-.05785545.06924789-4.14755339 4.14644661h2.794c.24545989 0 .44960837.1768752.49194433.4101244l.00805567.0898756c0 .2454599-.17687516.4496084-.41012437.4919443l-.08987563.0080557h-4c-.24545989 0-.44960837-.1768752-.49194433-.4101244l-.00805567-.0898756v-4c0-.2761424.22385763-.5.5-.5.24545989 0 .44960837.1768752.49194433.4101244l.00805567.0898756v2.792l4.14644661-4.14555339c.19526215-.19526215.51184463-.19526215.70710678 0zm6.14644661-2.14644661v6h-6v-1h5v-5zm-4-4v1h-5v5h-1v-6zm5.5-2c.2454599 0 .4496084.17687516.4919443.41012437l.0080557.08987563v4c0 .27614237-.2238576.5-.5.5-.2454599 0-.4496084-.17687516-.4919443-.41012437l-.0080557-.08987563v-2.794l-4.14644661 4.14755339c-.19526215.19526215-.51184463.19526215-.70710678 0-.17356635-.17356635-.1928515-.44299075-.05785545-.63785889l.05785545-.06924789 4.14655339-4.14744661-2.793.001c-.2454599 0-.4496084-.17687516-.4919443-.41012437l-.0080557-.08987563c0-.24545989.1768752-.44960837.4101244-.49194433l.0898756-.00805567z\" fill=\"inherit\" />\n    </svg>;\nexport const ExitFullscreen = () => <svg height=\"16\" viewBox=\"0 0 16 16\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"m6.5 9c.24545989 0 .44960837.17687516.49194433.41012437l.00805567.08987563v4c0 .2761424-.22385763.5-.5.5-.24545989 0-.44960837-.1768752-.49194433-.4101244l-.00805567-.0898756v-2.794l-3.64644661 3.6475534c-.19526215.1952621-.51184463.1952621-.70710678 0-.17356635-.1735664-.1928515-.4429908-.05785545-.6378589l.05785545-.0692479 3.64555339-3.6464466h-2.792c-.24545989 0-.44960837-.17687516-.49194433-.41012437l-.00805567-.08987563c0-.24545989.17687516-.44960837.41012437-.49194433l.08987563-.00805567zm7.5-.5v5.5h-5.5v-1h4.5v-4.5zm-6.5-6.5v1h-4.5v4.5h-1v-5.5zm6.8535534-.35355339c.1735663.17356635.1928515.44299075.0578554.63785889l-.0578554.06924789-3.6475534 3.64644661h2.794c.2454599 0 .4496084.17687516.4919443.41012437l.0080557.08987563c0 .24545989-.1768752.44960837-.4101244.49194433l-.0898756.00805567h-4c-.24545989 0-.44960837-.17687516-.49194433-.41012437l-.00805567-.08987563v-4c0-.27614237.22385763-.5.5-.5.24545989 0 .44960837.17687516.49194433.41012437l.00805567.08987563v2.792l3.6464466-3.64555339c.1952622-.19526215.5118446-.19526215.7071068 0z\" fill=\"inherit\" />\n    </svg>;","export const RECEIVED_USER = 'RECEIVED_USER';\nexport const DEFAULT_STATE_USER = {\n  id: '',\n  username: '',\n  uiLocale: '',\n  isSuperuser: false\n};\nexport default ((state = DEFAULT_STATE_USER, action) => {\n  switch (action.type) {\n    case RECEIVED_USER:\n      {\n        return fromD2ToUserObj(action.value);\n      }\n\n    default:\n      return state;\n  }\n});\n\nfunction fromD2ToUserObj(d2Object) {\n  return {\n    id: d2Object.id,\n    username: d2Object.username,\n    uiLocale: d2Object.settings.keyUiLocale,\n    isSuperuser: d2Object.authorities.has('ALL')\n  };\n} // selectors\n\n\nexport const sGetUserId = state => state.user.id;\nexport const sGetUserUsername = state => state.user.username;\nexport const sGetIsSuperuser = state => state.user.isSuperuser;\nexport const sGetUiLocale = state => state.user.uiLocale;","import { getDimensionById, DIMENSION_ID_PERIOD, DIMENSION_ID_ORGUNIT } from '@dhis2/analytics';\nexport const SET_DIMENSIONS = 'SET_DIMENSIONS';\nexport const DEFAULT_DIMENSIONS = [getDimensionById(DIMENSION_ID_PERIOD), getDimensionById(DIMENSION_ID_ORGUNIT)];\nexport default ((state = DEFAULT_DIMENSIONS, action) => {\n  switch (action.type) {\n    case SET_DIMENSIONS:\n      {\n        return [...DEFAULT_DIMENSIONS, ...action.value];\n      }\n\n    default:\n      return state;\n  }\n});\nexport const sGetDimensions = state => state.dimensions;","import { sGetDimensions } from './dimensions';\nimport { createSelector } from 'reselect';\nexport const CLEAR_ITEM_FILTERS = 'CLEAR_ITEM_FILTERS';\nexport const SET_ITEM_FILTERS = 'SET_ITEM_FILTERS';\nexport const ADD_ITEM_FILTER = 'ADD_ITEM_FILTER';\nexport const REMOVE_ITEM_FILTER = 'REMOVE_ITEM_FILTER';\nexport const DEFAULT_STATE_ITEM_FILTERS = {};\nexport default ((state = DEFAULT_STATE_ITEM_FILTERS, action) => {\n  switch (action.type) {\n    case ADD_ITEM_FILTER:\n      {\n        return { ...state,\n          [action.filter.id]: action.filter.value\n        };\n      }\n\n    case REMOVE_ITEM_FILTER:\n      {\n        const newState = { ...state\n        };\n        delete newState[action.id];\n        return newState;\n      }\n\n    case SET_ITEM_FILTERS:\n      {\n        return action.filters;\n      }\n\n    case CLEAR_ITEM_FILTERS:\n      {\n        return DEFAULT_STATE_ITEM_FILTERS;\n      }\n\n    default:\n      return state;\n  }\n}); // selectors\n\nexport const sGetItemFiltersRoot = state => state.itemFilters; // simplify the filters structure to:\n// [{ id: 'pe', name: 'Period', values: [{ id: 2019: name: '2019' }, {id: 'LAST_MONTH', name: 'Last month' }]}, ...]\n\nexport const sGetNamedItemFilters = createSelector([sGetItemFiltersRoot, sGetDimensions], (filters, dimensions) => Object.keys(filters).reduce((arr, id) => {\n  arr.push({\n    id: id,\n    name: dimensions.find(dimension => dimension.id === id).name,\n    values: filters[id].map(value => ({\n      id: value.id,\n      name: value.displayName || value.name\n    }))\n  });\n  return arr;\n}, []));","import { ADD_ITEM_FILTER, REMOVE_ITEM_FILTER, SET_ITEM_FILTERS, CLEAR_ITEM_FILTERS } from '../reducers/itemFilters';\nexport const FILTER_ORG_UNIT = 'ou'; // actions\n\nexport const acAddItemFilter = filter => ({\n  type: ADD_ITEM_FILTER,\n  filter\n});\nexport const acRemoveItemFilter = id => ({\n  type: REMOVE_ITEM_FILTER,\n  id\n});\nexport const acClearItemFilters = () => ({\n  type: CLEAR_ITEM_FILTERS\n});\nexport const acSetItemFilters = filters => ({\n  type: SET_ITEM_FILTERS,\n  filters\n});","import update from 'immutability-helper';\nimport { arrayToIdMap } from '../modules/util';\nexport const RECEIVED_MESSAGES = 'RECEIVED_MESSAGES';\nexport default ((state = {}, action) => {\n  switch (action.type) {\n    case RECEIVED_MESSAGES:\n      {\n        const conversations = arrayToIdMap(action.value);\n        const newState = update(state, {\n          $merge: conversations\n        });\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n}); // selectors\n\nexport const sGetMessagesRoot = state => state.messages;","export const messageConversationsQuery = {\n  resource: 'messageConversations',\n  params: {\n    fields: 'id,messageCount,lastUpdated,messageType,displayName,read,messages[id,read,sender[id,displayName],text,lastUpdated]',\n    order: 'read:asc',\n    pageSize: 200\n  }\n};\nexport const getMessages = async dataEngine => {\n  try {\n    const {\n      messageConversations\n    } = await dataEngine.query({\n      messageConversations: messageConversationsQuery\n    });\n    return messageConversations.messageConversations;\n  } catch (error) {\n    console.log('Error:', error);\n  }\n};","import { RECEIVED_MESSAGES } from '../../../reducers/messages';\nimport { getMessages } from '../../../api/messages';\n\nconst onError = (action, error) => {\n  console.log(`Error in action ${action}: ${error}`);\n  return error;\n};\n\nexport const receivedMessages = value => ({\n  type: RECEIVED_MESSAGES,\n  value\n});\nexport const tGetMessages = dataEngine => async dispatch => {\n  try {\n    const messageConversations = await getMessages(dataEngine);\n    return dispatch(receivedMessages(messageConversations));\n  } catch (err) {\n    return onError('Get Messages', err);\n  }\n};","export const SET_ALERT_MESSAGE = 'SET_ALERT_MESSAGE';\nexport const CLEAR_ALERT_MESSAGE = 'CLEAR_ALERT_MESSAGE';\nexport const DEFAULT_STATE_ALERT = null;\nexport default ((state = DEFAULT_STATE_ALERT, action) => {\n  switch (action.type) {\n    case SET_ALERT_MESSAGE:\n      {\n        return action.value;\n      }\n\n    case CLEAR_ALERT_MESSAGE:\n      {\n        return DEFAULT_STATE_ALERT;\n      }\n\n    default:\n      return state;\n  }\n}); // selectors\n\nexport const sGetAlertMessage = state => state.alert;","import { SET_ALERT_MESSAGE, CLEAR_ALERT_MESSAGE } from '../reducers/alert';\nexport const acSetAlertMessage = value => ({\n  type: SET_ALERT_MESSAGE,\n  value\n});\nexport const acClearAlertMessage = () => ({\n  type: CLEAR_ALERT_MESSAGE\n});","import { orObject } from '../modules/util';\nimport objectClean from 'd2-utilizr/lib/objectClean';\n/** @module reducers/visualizations */\n\nexport const ADD_VISUALIZATION = 'ADD_VISUALIZATION';\nexport const SET_ACTIVE_VISUALIZATION_TYPE = 'SET_ACTIVE_VISUALIZATION_TYPE';\nexport const CLEAR_VISUALIZATIONS = 'CLEAR_VISUALIZATIONS';\nexport const DEFAULT_STATE_VISUALIZATIONS = {};\n\nconst isEmpty = p => p === undefined || p === null;\n\nexport default ((state = DEFAULT_STATE_VISUALIZATIONS, action) => {\n  switch (action.type) {\n    case ADD_VISUALIZATION:\n      {\n        return { ...state,\n          [action.value.id]: objectClean({ ...orObject(state[action.value.id]),\n            ...action.value\n          }, isEmpty)\n        };\n      }\n\n    case CLEAR_VISUALIZATIONS:\n      {\n        return DEFAULT_STATE_VISUALIZATIONS;\n      }\n\n    default:\n      return state;\n  }\n}); // root selector\n\nexport const sGetVisualizationsRoot = state => state.visualizations; // selectors level 1\n\nexport const sGetVisualization = (state, id) => {\n  return sGetVisualizationsRoot(state)[id];\n};","import { ADD_VISUALIZATION, CLEAR_VISUALIZATIONS } from '../reducers/visualizations';\nexport const acAddVisualization = value => ({\n  type: ADD_VISUALIZATION,\n  value\n});\nexport const acClearVisualizations = () => ({\n  type: CLEAR_VISUALIZATIONS\n});","import { getInstance } from 'd2';\nimport arrayClean from 'd2-utilizr/lib/arrayClean';\nimport { getEndPointName, MAP } from '../modules/itemTypes';\nimport { getVisualizationId } from '../modules/item'; // Id, name\n\nexport const getIdNameFields = ({\n  rename\n} = {}) => ['id', `${rename ? 'displayName~rename(name)' : 'name,displayName'}`]; // Item\n\nexport const getItemFields = () => ['dimensionItem~rename(id)', 'displayName~rename(name)', 'dimensionItemType']; // Dimension\n\nexport const getDimensionFields = ({\n  withItems\n}) => arrayClean(['dimension', 'legendSet[id]', 'filter', 'programStage', withItems ? `items[${getItemFields().join(',')}]` : ``]); // Axis\n\nexport const getAxesFields = ({\n  withItems\n}) => [`columns[${getDimensionFields({\n  withItems\n}).join(',')}]`, `rows[${getDimensionFields({\n  withItems\n}).join(',')}]`, `filters[${getDimensionFields({\n  withItems\n}).join(',')}]`]; // Favorite\n\nexport const getFavoriteFields = ({\n  withDimensions,\n  withOptions\n}) => {\n  return arrayClean([`${getIdNameFields({\n    rename: true\n  }).join(',')}`, 'displayDescription~rename(description)', withDimensions ? `${getAxesFields({\n    withItems: true\n  }).join(',')}` : ``, withOptions ? ['*', '!attributeDimensions', '!attributeValues', '!category', '!categoryDimensions', '!categoryOptionGroupSetDimensions', '!columnDimensions', '!dataDimensionItems', '!dataElementDimensions', '!dataElementGroupSetDimensions', '!filterDimensions', '!itemOrganisationUnitGroups', '!lastUpdatedBy', '!organisationUnitGroupSetDimensions', '!organisationUnitLevels', '!organisationUnits', '!programIndicatorDimensions', '!relativePeriods', '!reportParams', '!rowDimensions', '!translations', '!userOrganisationUnit', '!userOrganisationUnitChildren', '!userOrganisationUnitGrandChildren'].join(',') : '']);\n};\nexport const getFavoritesFields = ({\n  withDimensions\n}) => [`reportTable[${getFavoriteFields({\n  withDimensions\n}).join(',')}]`, `chart[${['type', ...getFavoriteFields({\n  withDimensions\n})].join(',')}]`, `map[${getFavoriteFields({\n  withDimensions\n}).join(',')}]`, `eventReport[${getFavoriteFields({\n  withDimensions\n}).join(',')}]`, `eventChart[${getFavoriteFields({\n  withDimensions\n}).join(',')}]`]; // List item\n\nexport const getListItemFields = () => [`reports[${['type', ...getIdNameFields({\n  rename: true\n})].join(',')}]`, `resources[${getIdNameFields({\n  rename: true\n}).join(',')}]`, `users[${getIdNameFields({\n  rename: true\n}).join(',')}]`]; // Map\n\nexport const getMapFields = () => [`${getIdNameFields({\n  rename: true\n}).join(',')}`, 'user,longitude,latitude,zoom,basemap', `mapViews[${getFavoriteFields({\n  withDimensions: true,\n  withOptions: true\n})}]`]; // Api\n\nexport const apiFetchVisualization = async item => {\n  const id = getVisualizationId(item);\n  const fields = item.type === MAP ? getMapFields() : getFavoriteFields({\n    withDimensions: true,\n    withOptions: true\n  });\n  const d2 = await getInstance();\n  return await d2.Api.getApi().get(`${getEndPointName(item.type)}/${id}`, {\n    fields\n  });\n};","import arrayClean from 'd2-utilizr/lib/arrayClean';\nimport { getListItemFields, getFavoritesFields, getIdNameFields } from './metadata'; // Helper functions\n\nexport const onError = error => console.log('Error: ', error); // Dashboard item\n\nexport const getDashboardItemsFields = ({\n  withFavorite\n} = {}) => arrayClean(['id', 'type', 'shape', 'x', 'y', 'width~rename(w)', 'height~rename(h)', 'messages', 'text', 'appKey', `${getListItemFields().join(',')}`, withFavorite ? `${getFavoritesFields({\n  withDimensions: withFavorite.withDimensions\n}).join(',')}` : ``]); // Dashboard\n\nexport const getDashboardFields = ({\n  withItems,\n  withFavorite\n} = {}) => arrayClean([`${getIdNameFields().join(',')}`, 'description', 'displayDescription', 'favorite', `user[${getIdNameFields({\n  rename: true\n}).join(',')}]`, 'created', 'lastUpdated', 'access', 'href', // needed for d2-ui-translations-dialog, since we don't pass a d2 Model anymore\nwithItems ? `dashboardItems[${getDashboardItemsFields({\n  withFavorite\n}).join(',')}]` : ``]);","import arrayClean from 'd2-utilizr/lib/arrayClean';\nimport { onError, getDashboardFields } from './index';\nexport const dashboardsQuery = {\n  resource: 'dashboards',\n  params: {\n    fields: [getDashboardFields(), 'dashboardItems[id]'].join(','),\n    paging: false\n  }\n};\nexport const dashboardQuery = {\n  resource: 'dashboards',\n  id: ({\n    id\n  }) => id,\n  params: {\n    fields: arrayClean(getDashboardFields({\n      withItems: true,\n      withFavorite: {\n        withDimensions: false\n      }\n    })).join(',')\n  }\n};\nexport const starDashboardMutation = {\n  type: 'create',\n  resource: 'dashboards',\n  // TODO create mutation does not accept the id function\n  // we must use a workaround until dataEngine supports dynamic resource/path\n  id: ({\n    id\n  }) => `${id}/favorite`\n};\nexport const unstarDashboardMutation = {\n  type: 'delete',\n  resource: 'dashboards',\n  id: ({\n    id\n  }) => `${id}/favorite`\n};\nexport const deleteDashboardMutation = {\n  type: 'delete',\n  resource: 'dashboards',\n  id: ({\n    id\n  }) => id\n}; // Get \"all\" dashboards on startup\n\nexport const apiFetchDashboards = async dataEngine => {\n  try {\n    const dashboardsData = await dataEngine.query({\n      dashboards: dashboardsQuery\n    });\n    return dashboardsData.dashboards.dashboards;\n  } catch (error) {\n    onError(error);\n  }\n}; // Get more info about selected dashboard\n\nexport const apiFetchDashboard = async (dataEngine, id) => {\n  try {\n    const dashboardData = await dataEngine.query({\n      dashboard: dashboardQuery\n    }, {\n      variables: {\n        id\n      }\n    });\n    return dashboardData.dashboard;\n  } catch (error) {\n    onError(error);\n  }\n}; // Star dashboard\n\nexport const apiStarDashboard = async (dataEngine, id, isStarred) => {\n  try {\n    if (isStarred) {\n      await dataEngine.mutate(starDashboardMutation, {\n        variables: {\n          id\n        }\n      });\n    } else {\n      await dataEngine.mutate(unstarDashboardMutation, {\n        variables: {\n          id\n        }\n      });\n    }\n  } catch (error) {\n    onError(error);\n  }\n};\nexport const apiDeleteDashboard = async (dataEngine, id) => {\n  try {\n    await dataEngine.mutate(deleteDashboardMutation, {\n      variables: {\n        id\n      }\n    });\n  } catch (error) {\n    onError(error);\n  }\n};","import { apiGetUserDataStoreValue, apiPostUserDataStoreValue } from './userDataStore';\nimport { DEFAULT_STATE_SELECTED_SHOWDESCRIPTION } from '../reducers/selected';\nconst KEY_SHOW_DESCRIPTION = 'showDescription';\nexport const apiGetShowDescription = async () => await apiGetUserDataStoreValue(KEY_SHOW_DESCRIPTION, DEFAULT_STATE_SELECTED_SHOWDESCRIPTION);\nexport const apiPostShowDescription = async (value) => await apiPostUserDataStoreValue(KEY_SHOW_DESCRIPTION, value);","import i18n from '@dhis2/d2-i18n';\nimport { getCustomDashboards, sGetDashboardById } from '../reducers/dashboards';\nimport { SET_SELECTED_ID, SET_SELECTED_ISLOADING, SET_SELECTED_SHOWDESCRIPTION, SET_SELECTED_ITEM_ACTIVE_TYPE, CLEAR_SELECTED_ITEM_ACTIVE_TYPES, sGetSelectedIsLoading, sGetSelectedId } from '../reducers/selected';\nimport { sGetUserUsername } from '../reducers/user';\nimport { acSetDashboardItems, acAppendDashboards } from './dashboards';\nimport { acClearItemFilters } from './itemFilters';\nimport { tGetMessages } from '../components/Item/MessagesItem/actions';\nimport { acSetAlertMessage, acClearAlertMessage } from './alert';\nimport { acAddVisualization, acClearVisualizations } from './visualizations';\nimport { apiFetchDashboard } from '../api/dashboards';\nimport { storePreferredDashboardId } from '../api/localStorage';\nimport { apiGetShowDescription, apiPostShowDescription } from '../api/description';\nimport { withShape } from '../components/ItemGrid/gridUtil';\nimport { getVisualizationFromItem } from '../modules/item';\nimport { REPORT_TABLE, CHART, MAP, EVENT_REPORT, EVENT_CHART, MESSAGES } from '../modules/itemTypes'; // actions\n\nexport const acSetSelectedId = value => ({\n  type: SET_SELECTED_ID,\n  value\n});\nexport const acSetSelectedIsLoading = value => ({\n  type: SET_SELECTED_ISLOADING,\n  value\n});\nexport const acSetSelectedShowDescription = value => ({\n  type: SET_SELECTED_SHOWDESCRIPTION,\n  value\n});\nexport const acSetSelectedItemActiveType = (id, activeType) => {\n  const action = {\n    type: SET_SELECTED_ITEM_ACTIVE_TYPE,\n    id,\n    activeType\n  };\n  return action;\n};\nexport const acClearSelectedItemActiveTypes = () => ({\n  type: CLEAR_SELECTED_ITEM_ACTIVE_TYPES\n}); // thunks\n\nexport const tSetSelectedDashboardById = id => async (dispatch, getState, dataEngine) => {\n  dispatch(acSetSelectedIsLoading(true));\n  const alertTimeout = setTimeout(() => {\n    const name = sGetDashboardById(getState(), id)?.displayName;\n\n    if (sGetSelectedIsLoading(getState()) && name) {\n      dispatch(acSetAlertMessage(i18n.t('Loading dashboard – {{name}}', {\n        name\n      })));\n    }\n  }, 500);\n\n  const onSuccess = selected => {\n    dispatch(acAppendDashboards(selected));\n    const customDashboard = getCustomDashboards(selected)[0];\n    dispatch(acSetDashboardItems(withShape(customDashboard.dashboardItems)));\n    storePreferredDashboardId(sGetUserUsername(getState()), id);\n\n    if (id !== sGetSelectedId(getState())) {\n      dispatch(acClearItemFilters());\n      dispatch(acClearVisualizations());\n      dispatch(acClearSelectedItemActiveTypes());\n    }\n\n    customDashboard.dashboardItems.forEach(item => {\n      switch (item.type) {\n        case REPORT_TABLE:\n        case CHART:\n        case MAP:\n        case EVENT_REPORT:\n        case EVENT_CHART:\n          dispatch(acAddVisualization(getVisualizationFromItem(item)));\n          break;\n\n        case MESSAGES:\n          dispatch(tGetMessages(dataEngine));\n          break;\n\n        default:\n          break;\n      }\n    });\n    dispatch(acSetSelectedId(id));\n    dispatch(acSetSelectedIsLoading(false));\n    clearTimeout(alertTimeout);\n    dispatch(acClearAlertMessage());\n    return selected;\n  };\n\n  const onError = error => {\n    console.log('Error: ', error);\n    return error;\n  };\n\n  try {\n    const dashboard = await apiFetchDashboard(dataEngine, id);\n    return onSuccess(dashboard);\n  } catch (err) {\n    return onError(err);\n  }\n};\nexport const tSetShowDescription = () => async dispatch => {\n  const onSuccess = value => {\n    dispatch(acSetSelectedShowDescription(value));\n  };\n\n  const onError = error => {\n    console.log('Error (apiGetShowDescription): ', error);\n    return error;\n  };\n\n  try {\n    const showDescription = await apiGetShowDescription();\n    return onSuccess(showDescription);\n  } catch (err) {\n    return onError(err);\n  }\n};\nexport const tUpdateShowDescription = value => async dispatch => {\n  const onSuccess = () => {\n    dispatch(acSetSelectedShowDescription(value));\n  };\n\n  const onError = error => {\n    console.log('Error (apiGetShowDescription): ', error);\n    return error;\n  };\n\n  try {\n    await apiPostShowDescription(value);\n    return onSuccess();\n  } catch (err) {\n    return onError(err);\n  }\n};","export const getPreferredDashboardId = username => localStorage.getItem(`dhis2.dashboard.current.${username}`) || undefined;\nexport const storePreferredDashboardId = (username, dashboardId) => {\n  localStorage.setItem(`dhis2.dashboard.current.${username}`, dashboardId);\n};","import { SET_DASHBOARDS, ADD_DASHBOARDS, SET_DASHBOARD_STARRED, SET_DASHBOARD_DISPLAY_NAME, SET_DASHBOARD_ITEMS } from '../reducers/dashboards';\nimport { getCustomDashboards, sGetDashboardById, sGetDashboardsSortedByStarred } from '../reducers/dashboards';\nimport { NON_EXISTING_DASHBOARD_ID } from '../reducers/selected';\nimport { sGetUserUsername } from '../reducers/user';\nimport { tSetSelectedDashboardById, acSetSelectedId } from './selected';\nimport { apiFetchDashboards, apiStarDashboard, apiDeleteDashboard } from '../api/dashboards';\nimport { getPreferredDashboardId } from '../api/localStorage';\nimport { arrayToIdMap } from '../modules/util'; // actions\n\nexport const acSetDashboards = dashboards => ({\n  type: SET_DASHBOARDS,\n  value: arrayToIdMap(getCustomDashboards(dashboards))\n});\nexport const acAppendDashboards = dashboards => ({\n  type: ADD_DASHBOARDS,\n  value: arrayToIdMap(getCustomDashboards(dashboards))\n});\nexport const acSetDashboardStarred = (dashboardId, isStarred) => ({\n  type: SET_DASHBOARD_STARRED,\n  dashboardId: dashboardId,\n  value: isStarred\n});\nexport const acSetDashboardDisplayName = (dashboardId, value) => ({\n  type: SET_DASHBOARD_DISPLAY_NAME,\n  dashboardId,\n  value\n});\nexport const acSetDashboardItems = value => ({\n  type: SET_DASHBOARD_ITEMS,\n  value\n}); // thunks\n\nexport const tFetchDashboards = () => async (dispatch, getState, dataEngine) => {\n  const dashboards = await apiFetchDashboards(dataEngine);\n  dispatch(acSetDashboards(dashboards));\n};\nexport const tSelectDashboard = id => async (dispatch, getState) => {\n  const onError = error => {\n    console.log('Error (apiFetchDashboards): ', error);\n    return error;\n  };\n\n  try {\n    const state = getState();\n    let dashboardToSelect = null;\n\n    if (id) {\n      dashboardToSelect = sGetDashboardById(state, id) || null;\n    } else {\n      const preferredId = getPreferredDashboardId(sGetUserUsername(state));\n      const dash = sGetDashboardById(state, preferredId);\n      dashboardToSelect = preferredId && dash ? dash : sGetDashboardsSortedByStarred(state)[0];\n    }\n\n    if (dashboardToSelect) {\n      dispatch(tSetSelectedDashboardById(dashboardToSelect.id));\n    } else {\n      dispatch(acSetSelectedId(NON_EXISTING_DASHBOARD_ID));\n    }\n  } catch (err) {\n    return onError(err);\n  }\n};\nexport const tStarDashboard = (id, isStarred) => async (dispatch, getState, dataEngine) => {\n  const onSuccess = id => {\n    dispatch(acSetDashboardStarred(id, isStarred));\n    return id;\n  };\n\n  const onError = error => {\n    console.log('Error (apiStarDashboard): ', error);\n    return error;\n  };\n\n  try {\n    await apiStarDashboard(dataEngine, id, isStarred);\n    return onSuccess(id);\n  } catch (err) {\n    return onError(err);\n  }\n};\nexport const tDeleteDashboard = id => async (dispatch, getState, dataEngine) => {\n  try {\n    await apiDeleteDashboard(dataEngine, id);\n    await dispatch(tFetchDashboards());\n    return Promise.resolve();\n  } catch (err) {\n    console.log('Error (deleteDashboard): ', err);\n    return err;\n  }\n};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\nimport { useD2 } from '@dhis2/app-runtime-adapter-d2';\nimport { Button, Modal, ModalTitle, ModalContent, ModalActions, ButtonStrip } from '@dhis2/ui';\nimport { PeriodDimension, DynamicDimension, OrgUnitDimension, DIMENSION_ID_PERIOD, DIMENSION_ID_ORGUNIT } from '@dhis2/analytics';\nimport { acAddItemFilter, acRemoveItemFilter } from '../../actions/itemFilters';\nimport { sGetItemFiltersRoot } from '../../reducers/itemFilters';\n\nconst FilterDialog = ({\n  displayNameProperty,\n  dimension,\n  initiallySelectedItems,\n  addItemFilter,\n  removeItemFilter,\n  onClose\n}) => {\n  const [filters, setFilters] = useState(initiallySelectedItems);\n  const {\n    d2\n  } = useD2({});\n\n  const onSelectItems = ({\n    dimensionId,\n    items\n  }) => {\n    setFilters({\n      [dimensionId]: items\n    });\n  };\n\n  const onDeselectItems = ({\n    dimensionId,\n    itemIdsToRemove\n  }) => {\n    const oldList = filters[dimensionId] || [];\n    const newList = oldList.filter(item => !itemIdsToRemove.includes(item.id));\n    setFilters({ ...filters,\n      [dimensionId]: newList\n    });\n  };\n\n  const onReorderItems = ({\n    dimensionId,\n    itemIds\n  }) => {\n    const oldList = filters[dimensionId] || [];\n    const reorderedList = itemIds.map(id => oldList.find(item => item.id === id));\n    setFilters({ ...filters,\n      [dimensionId]: reorderedList\n    });\n  };\n\n  const saveFilter = () => {\n    const id = dimension.id;\n    const filterItems = filters[id];\n\n    if (filterItems && filterItems.length) {\n      addItemFilter({\n        id,\n        value: [...filterItems]\n      });\n    } else {\n      removeItemFilter(id);\n    }\n\n    onClose(id);\n  };\n\n  const renderDialogContent = () => {\n    const commonProps = {\n      d2,\n      onSelect: onSelectItems,\n      onDeselect: onDeselectItems,\n      onReorder: onReorderItems\n    };\n    const selectedItems = filters[dimension.id] || [];\n\n    switch (dimension.id) {\n      case DIMENSION_ID_PERIOD:\n        {\n          return <PeriodDimension selectedPeriods={selectedItems} onSelect={commonProps.onSelect} />;\n        }\n\n      case DIMENSION_ID_ORGUNIT:\n        return <OrgUnitDimension displayNameProperty={displayNameProperty} ouItems={selectedItems} {...commonProps} />;\n\n      default:\n        return <DynamicDimension selectedItems={selectedItems} dimensionId={dimension.id} onSelect={commonProps.onSelect} />;\n    }\n  };\n\n  return <>\n            {dimension.id && <Modal dataTest={`${dimension.id}-dimension-modal`} onClose={onClose} position=\"top\" large>\n                    <ModalTitle>{dimension.name}</ModalTitle>\n                    <ModalContent>{renderDialogContent()}</ModalContent>\n                    <ModalActions>\n                        <ButtonStrip>\n                            <Button secondary onClick={onClose}>\n                                {i18n.t('Cancel')}\n                            </Button>\n                            <Button primary onClick={saveFilter}>\n                                {i18n.t('Confirm')}\n                            </Button>\n                        </ButtonStrip>\n                    </ModalActions>\n                </Modal>}\n        </>;\n};\n\nFilterDialog.propTypes = {\n  addItemFilter: PropTypes.func,\n  dimension: PropTypes.object,\n  displayNameProperty: PropTypes.string,\n  initiallySelectedItems: PropTypes.object,\n  removeItemFilter: PropTypes.func,\n  onClose: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  initiallySelectedItems: sGetItemFiltersRoot(state)\n});\n\nexport default connect(mapStateToProps, {\n  addItemFilter: acAddItemFilter,\n  removeItemFilter: acRemoveItemFilter\n})(FilterDialog);","export const SET_SETTINGS = 'SET_SETTINGS';\nexport const ADD_SETTINGS = 'ADD_SETTINGS';\nexport const DEFAULT_SETTINGS = {\n  keyDateFormat: 'yyyy-MM-dd',\n  keyAnalysisRelativePeriod: 'LAST_12_MONTHS',\n  keyAnalysisDigitGroupSeparator: 'SPACE',\n  displayNameProperty: 'displayName',\n  uiLocale: 'en',\n  rootOrganisationUnit: {},\n  keyGatherAnalyticalObjectStatisticsInDashboardViews: false\n};\nexport default ((state = DEFAULT_SETTINGS, action) => {\n  switch (action.type) {\n    case SET_SETTINGS:\n      {\n        return Object.assign({}, action.value);\n      }\n\n    case ADD_SETTINGS:\n      {\n        return { ...state,\n          ...action.value\n        };\n      }\n\n    default:\n      return state;\n  }\n}); // Selectors\n\nexport const sGetSettings = state => state.settings;\nexport const sGetSettingsDisplayNameProperty = state => sGetSettings(state).displayNameProperty;\nexport const sGetRootOrgUnit = state => sGetSettings(state).rootOrganisationUnit;\nexport const sGetRelativePeriod = state => sGetSettings(state).keyAnalysisRelativePeriod;\nexport const sGetUiLocale = state => sGetSettings(state).uiLocale;\nexport const sGatherAnalyticalObjectStatisticsInDashboardViews = state => sGetSettings(state).keyGatherAnalyticalObjectStatisticsInDashboardViews;","export const SET_ACTIVE_MODAL_DIMENSION = 'SET_ACTIVE_MODAL_DIMENSION';\nexport const CLEAR_ACTIVE_MODAL_DIMENSION = 'CLEAR_ACTIVE_MODAL_DIMENSION';\nexport const DEFAULT_STATE_ACTIVE_MODAL_DIMENSION = {};\nexport default ((state = DEFAULT_STATE_ACTIVE_MODAL_DIMENSION, action) => {\n  switch (action.type) {\n    case SET_ACTIVE_MODAL_DIMENSION:\n      {\n        return action.value;\n      }\n\n    case CLEAR_ACTIVE_MODAL_DIMENSION:\n      {\n        return DEFAULT_STATE_ACTIVE_MODAL_DIMENSION;\n      }\n\n    default:\n      return state;\n  }\n});\nexport const sGetActiveModalDimension = state => state.activeModalDimension;","import { SET_ACTIVE_MODAL_DIMENSION, CLEAR_ACTIVE_MODAL_DIMENSION } from '../reducers/activeModalDimension';\nexport const acSetActiveModalDimension = value => ({\n  type: SET_ACTIVE_MODAL_DIMENSION,\n  value\n});\nexport const acClearActiveModalDimension = () => ({\n  type: CLEAR_ACTIVE_MODAL_DIMENSION\n});","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport isEmpty from 'lodash/isEmpty';\nimport i18n from '@dhis2/d2-i18n';\nimport { DimensionsPanel } from '@dhis2/analytics';\nimport { Button, Popover } from '@dhis2/ui';\nimport FilterDialog from './FilterDialog';\nimport { sGetSettingsDisplayNameProperty } from '../../reducers/settings';\nimport { sGetActiveModalDimension } from '../../reducers/activeModalDimension';\nimport { sGetDimensions } from '../../reducers/dimensions';\nimport { sGetItemFiltersRoot } from '../../reducers/itemFilters';\nimport { acClearActiveModalDimension, acSetActiveModalDimension } from '../../actions/activeModalDimension';\nimport classes from './styles/FilterSelector.module.css';\n\nconst FilterSelector = props => {\n  const [showPopover, setShowPopover] = useState(false);\n  const ref = useRef(null);\n\n  const onCloseDialog = () => {\n    setShowPopover(false);\n    props.clearActiveModalDimension();\n  };\n\n  const selectDimension = id => {\n    props.setActiveModalDimension(props.dimensions.find(dimension => dimension.id === id));\n  };\n\n  return <>\n            <span className={classes.buttonContainer} ref={ref}>\n                <Button onClick={() => setShowPopover(true)}>\n                    {i18n.t('Add filter')}\n                    <ArrowDropDownIcon />\n                </Button>\n            </span>\n            {showPopover && <Popover onClickOutside={onCloseDialog} reference={ref} arrow={true} placement=\"bottom-start\" dataTest=\"dashboard-filter-popover\">\n                    <DimensionsPanel style={{\n        width: '320px'\n      }} dimensions={props.dimensions} onDimensionClick={selectDimension} selectedIds={Object.keys(props.initiallySelectedItems)} />\n                </Popover>}\n            {!isEmpty(props.dimension) ? <FilterDialog displayNameProperty={props.displayNameProperty} dimension={props.dimension} onClose={onCloseDialog} /> : null}\n        </>;\n};\n\nconst mapStateToProps = state => ({\n  displayNameProperty: sGetSettingsDisplayNameProperty(state),\n  dimension: sGetActiveModalDimension(state),\n  dimensions: sGetDimensions(state),\n  initiallySelectedItems: sGetItemFiltersRoot(state)\n});\n\nFilterSelector.propTypes = {\n  clearActiveModalDimension: PropTypes.func,\n  dimension: PropTypes.object,\n  dimensions: PropTypes.array,\n  displayNameProperty: PropTypes.string,\n  initiallySelectedItems: PropTypes.object,\n  setActiveModalDimension: PropTypes.func\n};\nexport default connect(mapStateToProps, {\n  clearActiveModalDimension: acClearActiveModalDimension,\n  setActiveModalDimension: acSetActiveModalDimension\n})(FilterSelector);","import React, { useState, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Link, Redirect } from 'react-router-dom';\nimport i18n from '@dhis2/d2-i18n';\nimport SharingDialog from '@dhis2/d2-ui-sharing-dialog';\nimport Star from '@material-ui/icons/Star';\nimport StarBorder from '@material-ui/icons/StarBorder';\nimport { Button, FlyoutMenu, Popover, MenuItem, colors } from '@dhis2/ui';\nimport { useD2 } from '@dhis2/app-runtime-adapter-d2';\nimport { useWindowDimensions } from '../WindowDimensionsProvider';\nimport { ThreeDots } from '../Item/VisualizationItem/assets/icons';\nimport { orObject } from '../../modules/util';\nimport { tStarDashboard } from '../../actions/dashboards';\nimport { tUpdateShowDescription } from '../../actions/selected';\nimport FilterSelector from '../ItemFilter/FilterSelector';\nimport { sGetSelectedId, sGetSelectedShowDescription } from '../../reducers/selected';\nimport { sGetDashboardById, sGetDashboardItems, EMPTY_DASHBOARD } from '../../reducers/dashboards';\nimport isSmallScreen from '../../modules/isSmallScreen';\nimport classes from './styles/ViewTitleBar.module.css';\n\nconst ViewTitleBar = props => {\n  const [moreOptionsIsOpen, setMoreOptionsIsOpen] = useState(false);\n  const [sharingDialogIsOpen, setSharingDialogIsOpen] = useState(false);\n  const [redirectUrl, setRedirectUrl] = useState(null);\n  const {\n    width\n  } = useWindowDimensions();\n  const {\n    d2\n  } = useD2({});\n  const {\n    id,\n    name,\n    description,\n    access,\n    showDescription,\n    starred,\n    onToggleStarredDashboard,\n    onShowHideDescription\n  } = props;\n\n  const toggleSharingDialog = () => setSharingDialogIsOpen(!sharingDialogIsOpen);\n\n  const toggleMoreOptions = () => setMoreOptionsIsOpen(!moreOptionsIsOpen);\n\n  const printLayout = () => setRedirectUrl(`${id}/printlayout`);\n\n  const printOipp = () => setRedirectUrl(`${id}/printoipp`);\n\n  const StarIcon = starred ? Star : StarBorder;\n\n  if (redirectUrl) {\n    return <Redirect to={redirectUrl} />;\n  }\n\n  const showHideDescriptionLabel = showDescription ? i18n.t('Hide description') : i18n.t('Show description');\n\n  const showHideDescription = () => {\n    onShowHideDescription();\n    toggleMoreOptions();\n  };\n\n  const toggleStarredDashboardLabel = starred ? i18n.t('Unstar dashboard') : i18n.t('Star dashboard');\n\n  const toggleStarredDashboard = () => {\n    // TODO use dataQuery directly here with create/delete mutations ?!\n    onToggleStarredDashboard();\n    toggleMoreOptions();\n  };\n\n  const buttonRef = createRef();\n  const userAccess = orObject(access);\n  const descriptionClasses = cx(classes.descContainer, description ? classes.desc : classes.noDesc);\n  return <>\n            <div className={classes.container}>\n                <div className={classes.titleBar}>\n                    <span className={classes.title} data-test=\"view-dashboard-title\">\n                        {name}\n                    </span>\n                    <div className={classes.actions}>\n                        <div className={classes.titleBarIcon} onClick={onToggleStarredDashboard}>\n                            <StarIcon style={{\n              fill: colors.grey600\n            }} />\n                        </div>\n                        <div className={classes.strip}>\n                            {userAccess.update ? <Link className={classes.editLink} to={`/${id}/edit`} data-test=\"link-edit-dashboard\">\n                                    <Button>{i18n.t('Edit')}</Button>\n                                </Link> : null}\n                            {userAccess.manage ? <Button className={classes.shareButton} onClick={toggleSharingDialog}>\n                                    {i18n.t('Share')}\n                                </Button> : null}\n                            <FilterSelector />\n                            <span ref={buttonRef}>\n                                <Button small={isSmallScreen(width)} dataTest=\"more-button\" onClick={toggleMoreOptions}>\n                                    <ThreeDots />\n                                    <span className={classes.moreButton}>\n                                        {i18n.t('More')}\n                                    </span>\n                                </Button>\n                            </span>\n                        </div>\n                        {moreOptionsIsOpen && <Popover reference={buttonRef} placement=\"bottom-start\" onClickOutside={toggleMoreOptions}>\n                                <FlyoutMenu>\n                                    <MenuItem dense label={toggleStarredDashboardLabel} onClick={toggleStarredDashboard} />\n                                    <MenuItem dense label={showHideDescriptionLabel} onClick={showHideDescription} />\n                                    <MenuItem dense label={i18n.t('Print')} dataTest=\"print-menu-item\">\n                                        <MenuItem dense label={i18n.t('Dashboard layout')} onClick={printLayout} dataTest=\"print-layout-menu-item\" />\n                                        <MenuItem dense label={i18n.t('One item per page')} onClick={printOipp} dataTest=\"print-oipp-menu-item\" />\n                                    </MenuItem>\n                                </FlyoutMenu>\n                            </Popover>}\n                    </div>\n                </div>\n                {showDescription && <div className={descriptionClasses}>\n                        {description || i18n.t('No description')}\n                    </div>}\n            </div>\n            {id && <SharingDialog d2={d2} id={id} type=\"dashboard\" open={sharingDialogIsOpen} onRequestClose={toggleSharingDialog} />}\n        </>;\n};\n\nViewTitleBar.propTypes = {\n  access: PropTypes.object,\n  description: PropTypes.string,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  showDescription: PropTypes.bool,\n  starred: PropTypes.bool,\n  onShowHideDescription: PropTypes.func,\n  onToggleStarredDashboard: PropTypes.func\n};\nViewTitleBar.defaultProps = {\n  name: '',\n  description: '',\n  starred: false,\n  showDescription: false\n};\n\nconst mapStateToProps = state => {\n  const id = sGetSelectedId(state);\n  const dashboard = sGetDashboardById(state, id) || EMPTY_DASHBOARD;\n  return {\n    id,\n    name: dashboard.displayName,\n    description: dashboard.displayDescription,\n    dashboardItems: sGetDashboardItems(state),\n    showDescription: sGetSelectedShowDescription(state),\n    starred: dashboard.starred,\n    access: dashboard.access\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n  const {\n    id,\n    starred,\n    showDescription\n  } = stateProps;\n  const {\n    dispatch\n  } = dispatchProps;\n  return { ...stateProps,\n    ...ownProps,\n    onToggleStarredDashboard: () => dispatch(tStarDashboard(id, !starred)),\n    onShowHideDescription: () => dispatch(tUpdateShowDescription(!showDescription))\n  };\n};\n\nexport default connect(mapStateToProps, null, mergeProps)(ViewTitleBar);","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useD2 } from '@dhis2/app-runtime-adapter-d2';\nimport { useConfig } from '@dhis2/app-runtime';\nimport { load, unmount } from './plugin';\nimport { getGridItemDomId } from '../../../ItemGrid/gridUtil';\n\nconst DefaultPlugin = ({\n  item,\n  activeType,\n  visualization,\n  options,\n  style\n}) => {\n  const {\n    d2\n  } = useD2({});\n  const {\n    baseUrl\n  } = useConfig();\n  const credentials = {\n    baseUrl,\n    auth: d2.Api.getApi().defaultHeaders.Authorization\n  };\n  const prevItem = useRef();\n  const prevActiveType = useRef();\n  useEffect(() => {\n    load(item, visualization, {\n      credentials,\n      activeType,\n      options\n    });\n    prevItem.current = item;\n    prevActiveType.current = activeType;\n    return () => unmount(item, activeType);\n  }, []);\n  useEffect(() => {\n    if (shouldPluginReload()) {\n      unmount(item, prevActiveType.current);\n      load(item, visualization, {\n        credentials,\n        activeType\n      });\n    }\n\n    prevItem.current = item;\n    prevActiveType.current = activeType;\n  }, [item, visualization, activeType]);\n  /**\n   * Prevent unnecessary re-rendering\n   * TODO: fix this hack\n   */\n\n  const shouldPluginReload = () => {\n    const reloadAllowed = prevItem.current === item;\n    const visChanged = prevActiveType.current !== activeType;\n    return reloadAllowed && visChanged;\n  };\n\n  return <div id={getGridItemDomId(item.id)} style={style} />;\n};\n\nDefaultPlugin.propTypes = {\n  activeType: PropTypes.string,\n  item: PropTypes.object,\n  options: PropTypes.object,\n  style: PropTypes.object,\n  visualization: PropTypes.object\n};\nDefaultPlugin.defaultProps = {\n  style: {},\n  item: {},\n  options: {},\n  visualization: {}\n};\nexport default DefaultPlugin;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './styles/NoVisualizationMessage.module.css';\n\nconst NoVisualizationMessage = ({\n  message\n}) => {\n  return <div className={classes.message}>{message}</div>;\n};\n\nNoVisualizationMessage.propTypes = {\n  message: PropTypes.string\n};\nexport default NoVisualizationMessage;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport DefaultPlugin from './DefaultPlugin';\nimport { MAP } from '../../../../modules/itemTypes';\nimport { pluginIsAvailable } from './plugin';\nimport NoVisualizationMessage from './NoVisualizationMessage';\n\nconst MapPlugin = ({\n  applyFilters,\n  ...props\n}) => {\n  if (props.item.type === MAP) {\n    // apply filters only to thematic and event layers\n    // for maps AO\n    const mapViews = props.visualization.mapViews.map(mapView => {\n      if (mapView.layer.includes('thematic') || mapView.layer.includes('event')) {\n        return applyFilters(mapView, props.itemFilters);\n      }\n\n      return mapView;\n    });\n    props.visualization = { ...props.visualization,\n      mapViews\n    };\n  } else {\n    // this is the case of a non map AO passed to the maps plugin\n    // due to a visualization type switch in dashboard item\n    // maps plugin takes care of converting the AO to a suitable format\n    props.visualization = applyFilters(props.visualization, props.itemFilters);\n  }\n\n  return pluginIsAvailable(props.activeType || props.item.type) ? <DefaultPlugin options={{\n    hideTitle: true\n  }} {...props} /> : <NoVisualizationMessage message={i18n.t('Unable to load the plugin for this item')} />;\n};\n\nMapPlugin.propTypes = {\n  activeType: PropTypes.string,\n  applyFilters: PropTypes.func,\n  item: PropTypes.object,\n  itemFilters: PropTypes.object,\n  visualization: PropTypes.object\n};\nexport default MapPlugin;","import React from 'react';\nimport { CircularLoader } from '@dhis2/ui';\nimport classes from './styles/LoadingMask.module.css';\n\nconst LoadingMask = () => {\n  return <div className={classes.center}>\n            <CircularLoader />\n        </div>;\n};\n\nexport default LoadingMask;","const getFilteredVisualization = (visualization, filters) => {\n  if (!Object.keys(filters).length) {\n    return visualization;\n  } // deep clone objects in filters to avoid changing the visualization in the Redux store\n\n\n  const visRows = visualization.rows.map(obj => ({ ...obj\n  }));\n  const visColumns = visualization.columns.map(obj => ({ ...obj\n  }));\n  const visFilters = visualization.filters.map(obj => ({ ...obj\n  }));\n  Object.keys(filters).forEach(dimensionId => {\n    if (filters[dimensionId]) {\n      let dimensionFound = false;\n      [visRows, visColumns, visFilters].forEach(dimensionObjects => dimensionObjects.filter(obj => obj.dimension === dimensionId).forEach(obj => {\n        dimensionFound = true;\n        obj.items = filters[dimensionId];\n      })); // add dimension to filters if not already present elsewhere\n\n      if (!dimensionFound) {\n        visFilters.push({\n          dimension: dimensionId,\n          items: filters[dimensionId]\n        });\n      }\n    }\n  });\n  return { ...visualization,\n    rows: visRows,\n    columns: visColumns,\n    filters: visFilters\n  };\n};\n\nexport default getFilteredVisualization;","import { VIS_TYPE_COLUMN, VIS_TYPE_PIVOT_TABLE, getAdaptedUiLayoutByType } from '@dhis2/analytics';\nimport { REPORT_TABLE, CHART, MAP } from '../../../../modules/itemTypes';\nexport const THEMATIC_LAYER = 'thematic';\n\nconst extractMapView = map => map.mapViews && map.mapViews.find(mv => mv.layer.includes(THEMATIC_LAYER));\n\nconst getWithoutId = object => ({ ...object,\n  id: undefined\n});\n\nconst getVisualizationConfig = (visualization, originalType, activeType) => {\n  if (originalType === MAP && originalType !== activeType) {\n    const extractedMapView = extractMapView(visualization);\n\n    if (extractedMapView === undefined) {\n      return null;\n    }\n\n    return getWithoutId({ ...visualization,\n      ...extractedMapView,\n      mapViews: undefined,\n      type: activeType === CHART ? VIS_TYPE_COLUMN : VIS_TYPE_PIVOT_TABLE\n    });\n  } else if (originalType === REPORT_TABLE && activeType === CHART) {\n    const layout = getAdaptedUiLayoutByType(visualization, VIS_TYPE_COLUMN);\n    return getWithoutId({ ...visualization,\n      ...layout,\n      type: VIS_TYPE_COLUMN\n    });\n  } else if (originalType === CHART && activeType === REPORT_TABLE) {\n    const layout = getAdaptedUiLayoutByType(visualization, VIS_TYPE_PIVOT_TABLE);\n    return getWithoutId({ ...visualization,\n      ...layout,\n      type: VIS_TYPE_PIVOT_TABLE\n    });\n  }\n\n  return getWithoutId(visualization);\n};\n\nexport default getVisualizationConfig;","// Note that this ignores discrepancies in 'this', so shouldn't be used with bound functions\n// This is useful instead of lodash/memoize when we only need to memoize a single value\n// Inspiration: https://github.com/alexreardon/memoize-one\nconst memoizeOne = fn => {\n  let lastArgs = undefined;\n  let lastValue = undefined;\n  return (...args) => {\n    if (lastArgs && args.length === lastArgs.length && args.every((arg, i) => arg === lastArgs[i])) {\n      return lastValue;\n    }\n\n    lastArgs = args;\n    lastValue = fn(...args);\n    return lastValue;\n  };\n};\n\nexport default memoizeOne;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport VisualizationPlugin from '@dhis2/data-visualizer-plugin';\nimport i18n from '@dhis2/d2-i18n';\nimport { D2Shim } from '@dhis2/app-runtime-adapter-d2';\nimport DefaultPlugin from './DefaultPlugin';\nimport MapPlugin from './MapPlugin';\nimport LoadingMask from './LoadingMask';\nimport NoVisualizationMessage from './NoVisualizationMessage';\nimport getFilteredVisualization from './getFilteredVisualization';\nimport getVisualizationConfig from './getVisualizationConfig';\nimport { VISUALIZATION, MAP, CHART, REPORT_TABLE } from '../../../../modules/itemTypes';\nimport { getVisualizationId } from '../../../../modules/item';\nimport memoizeOne from '../../../../modules/memoizeOne';\nimport { sGetVisualization } from '../../../../reducers/visualizations';\nimport { pluginIsAvailable } from './plugin';\n\nclass Visualization extends React.Component {\n  state = {\n    pluginLoaded: false\n  };\n\n  constructor(props) {\n    super(props);\n    this.memoizedGetFilteredVisualization = memoizeOne(getFilteredVisualization);\n    this.memoizedGetVisualizationConfig = memoizeOne(getVisualizationConfig);\n  }\n\n  onLoadingComplete = () => {\n    this.setState({\n      pluginLoaded: true\n    });\n  };\n\n  render() {\n    const {\n      visualization,\n      activeType,\n      item,\n      itemFilters,\n      availableHeight,\n      availableWidth\n    } = this.props;\n\n    if (!visualization) {\n      return <NoVisualizationMessage message={i18n.t('No data to display')} />;\n    }\n\n    const style = {\n      height: availableHeight\n    };\n\n    if (availableWidth) {\n      style.width = availableWidth;\n    }\n\n    const pluginProps = {\n      item,\n      itemFilters,\n      activeType,\n      style,\n      visualization: this.memoizedGetVisualizationConfig(visualization, item.type, activeType)\n    };\n\n    switch (activeType) {\n      case VISUALIZATION:\n      case CHART:\n      case REPORT_TABLE:\n        {\n          return <>\n                        {!this.state.pluginLoaded && <div style={pluginProps.style}>\n                                <LoadingMask />\n                            </div>}\n                        <D2Shim d2Config={{}}>\n                            {({\n                d2\n              }) => <VisualizationPlugin d2={d2} visualization={this.memoizedGetFilteredVisualization(pluginProps.visualization, pluginProps.itemFilters)} onLoadingComplete={this.onLoadingComplete} forDashboard={true} style={pluginProps.style} />}\n                        </D2Shim>\n                    </>;\n        }\n\n      case MAP:\n        {\n          return <MapPlugin applyFilters={this.memoizedGetFilteredVisualization} {...pluginProps} />;\n        }\n\n      default:\n        {\n          pluginProps.visualization = this.memoizedGetFilteredVisualization(pluginProps.visualization, pluginProps.itemFilters);\n          return pluginIsAvailable(pluginProps.activeType || pluginProps.item.type) ? <DefaultPlugin {...pluginProps} /> : <NoVisualizationMessage message={i18n.t('Unable to load the plugin for this item')} />;\n        }\n    }\n  }\n\n}\n\nVisualization.propTypes = {\n  activeType: PropTypes.string,\n  availableHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  availableWidth: PropTypes.number,\n  item: PropTypes.object,\n  itemFilters: PropTypes.object,\n  visualization: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    visualization: sGetVisualization(state, getVisualizationId(ownProps.item))\n  };\n};\n\nexport default connect(mapStateToProps)(Visualization);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Warning } from './assets/icons';\nimport classes from './styles/FatalErrorBoundary.module.css';\n\nclass FatalErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorFound: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      errorFound: true\n    });\n    console.log('error: ', error);\n    console.log('info: ', info);\n  }\n\n  render() {\n    if (this.state.errorFound) {\n      return <p className={classes.container}>\n                    <span className={classes.icon}>\n                        <Warning />\n                    </span>\n                    <span className={classes.message}>\n                        {i18n.t('There was a problem loading this dashboard item')}\n                    </span>\n                </p>;\n    }\n\n    return this.props.children;\n  }\n\n}\n\nFatalErrorBoundary.propTypes = {\n  children: PropTypes.node\n};\nexport default FatalErrorBoundary;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './styles/ItemHeader.module.css';\n\nconst ViewItemActions = ({\n  actionButtons\n}) => {\n  return actionButtons ? <div className={classes.itemActionsWrap}>{actionButtons}</div> : null;\n};\n\nViewItemActions.propTypes = {\n  actionButtons: PropTypes.node\n};\nexport default ViewItemActions;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { colors } from '@dhis2/ui';\nimport classes from './styles/DeleteItemButton.module.css';\n\nconst DeleteItemButton = ({\n  onClick\n}) => <button type=\"button\" className={classes.deleteItemButton} onClick={onClick} title={i18n.t(`Delete item`)}>\n        <DeleteIcon style={{\n    fill: colors.red500\n  }} />\n    </button>;\n\nDeleteItemButton.propTypes = {\n  onClick: PropTypes.func\n};\nexport default DeleteItemButton;","/** @module reducers/editDashboard */\nimport update from 'immutability-helper';\nimport isEmpty from 'lodash/isEmpty';\nimport { orArray, orObject } from '../modules/util';\nexport const RECEIVED_EDIT_DASHBOARD = 'RECEIVED_EDIT_DASHBOARD';\nexport const RECEIVED_NOT_EDITING = 'RECEIVED_NOT_EDITING';\nexport const START_NEW_DASHBOARD = 'START_NEW_DASHBOARD';\nexport const RECEIVED_TITLE = 'RECEIVED_TITLE';\nexport const RECEIVED_DESCRIPTION = 'RECEIVED_DESCRIPTION';\nexport const ADD_DASHBOARD_ITEM = 'ADD_DASHBOARD_ITEM';\nexport const REMOVE_DASHBOARD_ITEM = 'REMOVE_DASHBOARD_ITEM';\nexport const UPDATE_DASHBOARD_ITEM = 'UPDATE_DASHBOARD_ITEM';\nexport const RECEIVED_DASHBOARD_LAYOUT = 'RECEIVED_DASHBOARD_LAYOUT';\nexport const SET_PRINT_PREVIEW_VIEW = 'SET_PRINT_PREVIEW_VIEW';\nexport const CLEAR_PRINT_PREVIEW_VIEW = 'CLEAR_PRINT_PREVIEW_VIEW';\nexport const DEFAULT_STATE_EDIT_DASHBOARD = {};\nexport const NEW_DASHBOARD_STATE = {\n  id: '',\n  name: '',\n  access: {},\n  description: '',\n  dashboardItems: [],\n  printPreviewView: false\n};\nexport default ((state = DEFAULT_STATE_EDIT_DASHBOARD, action) => {\n  switch (action.type) {\n    case RECEIVED_EDIT_DASHBOARD:\n      {\n        const newState = {};\n        Object.keys(NEW_DASHBOARD_STATE).map(k => newState[k] = action.value[k]);\n        newState.printPreviewView = false;\n        return newState;\n      }\n\n    case RECEIVED_NOT_EDITING:\n      return DEFAULT_STATE_EDIT_DASHBOARD;\n\n    case SET_PRINT_PREVIEW_VIEW:\n      return Object.assign({}, state, {\n        printPreviewView: true\n      });\n\n    case CLEAR_PRINT_PREVIEW_VIEW:\n      return Object.assign({}, state, {\n        printPreviewView: false\n      });\n\n    case START_NEW_DASHBOARD:\n      return NEW_DASHBOARD_STATE;\n\n    case RECEIVED_TITLE:\n      {\n        return Object.assign({}, state, {\n          name: action.value\n        });\n      }\n\n    case RECEIVED_DESCRIPTION:\n      {\n        return Object.assign({}, state, {\n          description: action.value\n        });\n      }\n\n    case ADD_DASHBOARD_ITEM:\n      if (!action.value.position) {\n        return update(state, {\n          dashboardItems: {\n            $unshift: [action.value]\n          }\n        });\n      }\n\n      return update(state, {\n        dashboardItems: {\n          $splice: [[parseInt(action.value.position), 0, action.value]]\n        }\n      });\n\n    case REMOVE_DASHBOARD_ITEM:\n      {\n        const idToRemove = action.value;\n        const dashboardItemIndex = state.dashboardItems.findIndex(item => item.id === idToRemove);\n\n        if (dashboardItemIndex > -1) {\n          return update(state, {\n            dashboardItems: {\n              $splice: [[dashboardItemIndex, 1]]\n            }\n          });\n        }\n\n        return state;\n      }\n\n    case RECEIVED_DASHBOARD_LAYOUT:\n      {\n        const stateItems = orArray(state.dashboardItems);\n        let layoutHasChanged = false;\n        const newStateItems = action.value.map(({\n          x,\n          y,\n          w,\n          h,\n          i\n        }) => {\n          const stateItem = stateItems.find(si => si.id === i);\n\n          if (!(stateItem.x === x && stateItem.y === y && stateItem.w === w && stateItem.h === h)) {\n            layoutHasChanged = true;\n            return Object.assign({}, stateItem, {\n              w,\n              h,\n              x,\n              y\n            });\n          }\n\n          return stateItem;\n        });\n        return layoutHasChanged ? { ...state,\n          dashboardItems: newStateItems\n        } : state;\n      }\n\n    case UPDATE_DASHBOARD_ITEM:\n      {\n        const dashboardItem = action.value;\n        const dashboardItemIndex = state.dashboardItems.findIndex(item => item.id === dashboardItem.id);\n\n        if (dashboardItemIndex > -1) {\n          const newState = update(state, {\n            dashboardItems: {\n              $splice: [[dashboardItemIndex, 1, Object.assign({}, dashboardItem)]]\n            }\n          });\n          return newState;\n        }\n\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}); // root selector\n\nexport const sGetEditDashboardRoot = state => state.editDashboard; // selectors\n\nexport const sGetIsEditing = state => !isEmpty(state.editDashboard);\nexport const sGetIsPrintPreviewView = state => sGetEditDashboardRoot(state).printPreviewView;\nexport const sGetIsNewDashboard = state => {\n  return !isEmpty(state.editDashboard) && sGetEditDashboardRoot(state).id === '';\n};\nexport const sGetEditDashboardName = state => sGetEditDashboardRoot(state).name;\nexport const sGetEditDashboardDescription = state => sGetEditDashboardRoot(state).description;\nexport const sGetEditDashboardItems = state => orObject(sGetEditDashboardRoot(state)).dashboardItems;","import { apiFetchDashboard } from './dashboards';\n\nconst onError = error => console.log('Error: ', error);\n\nexport const createDashboardMutation = {\n  resource: 'dashboards',\n  type: 'create',\n  data: ({\n    data\n  }) => data\n};\nexport const updateDashboardMutation = {\n  resource: 'dashboards',\n  type: 'update',\n  id: ({\n    id\n  }) => id,\n  data: ({\n    data\n  }) => data\n};\n\nconst generatePayload = (dashboard = {}, data) => {\n  return { ...dashboard,\n    name: data.name,\n    description: data.description,\n    dashboardItems: data.dashboardItems.map(item => ({ ...item,\n      width: item.w,\n      height: item.h\n    }))\n  };\n};\n\nexport const updateDashboard = async (dataEngine, data) => {\n  try {\n    const dashboard = await apiFetchDashboard(dataEngine, data.id);\n    const {\n      response\n    } = await dataEngine.mutate(updateDashboardMutation, {\n      variables: {\n        id: data.id,\n        data: generatePayload(dashboard, data)\n      }\n    });\n    return response.uid;\n  } catch (error) {\n    onError(error);\n  }\n};\nexport const postDashboard = async (dataEngine, data) => {\n  try {\n    const {\n      response\n    } = await dataEngine.mutate(createDashboardMutation, {\n      variables: {\n        data: generatePayload({}, data)\n      }\n    });\n    return response.uid;\n  } catch (error) {\n    onError(error);\n  }\n};","import { generateUid } from 'd2/uid';\nimport i18n from '@dhis2/d2-i18n';\nimport { RECEIVED_EDIT_DASHBOARD, START_NEW_DASHBOARD, RECEIVED_NOT_EDITING, RECEIVED_TITLE, RECEIVED_DESCRIPTION, RECEIVED_DASHBOARD_LAYOUT, ADD_DASHBOARD_ITEM, UPDATE_DASHBOARD_ITEM, REMOVE_DASHBOARD_ITEM, SET_PRINT_PREVIEW_VIEW, CLEAR_PRINT_PREVIEW_VIEW } from '../reducers/editDashboard';\nimport { sGetEditDashboardRoot } from '../reducers/editDashboard';\nimport { updateDashboard, postDashboard } from '../api/editDashboard';\nimport { tSetSelectedDashboardById } from '../actions/selected';\nimport { NEW_ITEM_SHAPE, getGridItemProperties, getPageBreakItemShape, getPrintTitlePageItemShape } from '../components/ItemGrid/gridUtil';\nimport { itemTypeMap, PAGEBREAK, PRINT_TITLE_PAGE } from '../modules/itemTypes';\nimport { convertUiItemsToBackend } from '../modules/uiBackendItemConverter';\n\nconst onError = error => {\n  console.log('Error (Saving Dashboard): ', error);\n  return error;\n}; // actions\n\n\nexport const acSetEditDashboard = (dashboard, items) => {\n  const val = { ...dashboard,\n    dashboardItems: items\n  };\n  return {\n    type: RECEIVED_EDIT_DASHBOARD,\n    value: val\n  };\n};\nexport const acSetEditNewDashboard = () => ({\n  type: START_NEW_DASHBOARD\n});\nexport const acClearEditDashboard = () => ({\n  type: RECEIVED_NOT_EDITING\n});\nexport const acSetPrintPreviewView = () => ({\n  type: SET_PRINT_PREVIEW_VIEW\n});\nexport const acClearPrintPreviewView = () => ({\n  type: CLEAR_PRINT_PREVIEW_VIEW\n});\nexport const acSetDashboardTitle = value => ({\n  type: RECEIVED_TITLE,\n  value\n});\nexport const acSetDashboardDescription = value => ({\n  type: RECEIVED_DESCRIPTION,\n  value\n});\nexport const acUpdateDashboardLayout = value => ({\n  type: RECEIVED_DASHBOARD_LAYOUT,\n  value\n});\nexport const acAddDashboardItem = item => {\n  const type = item.type;\n  delete item.type;\n  const itemPropName = itemTypeMap[type].propName;\n  const id = generateUid();\n  const gridItemProperties = getGridItemProperties(id);\n  let shape;\n\n  if (type === PAGEBREAK) {\n    const yPos = item.yPos || 0;\n    shape = getPageBreakItemShape(yPos, item.isStatic);\n  } else if (type === PRINT_TITLE_PAGE) {\n    shape = getPrintTitlePageItemShape();\n  } else {\n    shape = NEW_ITEM_SHAPE;\n  }\n\n  return {\n    type: ADD_DASHBOARD_ITEM,\n    value: {\n      id,\n      type,\n      position: item.position || null,\n      [itemPropName]: item.content,\n      ...NEW_ITEM_SHAPE,\n      ...gridItemProperties,\n      ...shape\n    }\n  };\n};\nexport const acUpdateDashboardItem = item => ({\n  type: UPDATE_DASHBOARD_ITEM,\n  value: item\n});\nexport const acRemoveDashboardItem = value => ({\n  type: REMOVE_DASHBOARD_ITEM,\n  value\n}); // thunks\n\nexport const tSaveDashboard = () => async (dispatch, getState, dataEngine) => {\n  const dashboard = sGetEditDashboardRoot(getState());\n  const dashboardToSave = { ...dashboard,\n    dashboardItems: convertUiItemsToBackend(dashboard.dashboardItems),\n    name: dashboard.name || i18n.t('Untitled dashboard')\n  };\n\n  try {\n    const dashboardId = dashboardToSave.id ? await updateDashboard(dataEngine, dashboardToSave) : await postDashboard(dataEngine, dashboardToSave);\n    dispatch(acClearEditDashboard());\n    await dispatch(tSetSelectedDashboardById(dashboardId));\n    return Promise.resolve(dashboardId);\n  } catch (error) {\n    onError(error);\n  }\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport DeleteItemButton from './DeleteItemButton';\nimport { acRemoveDashboardItem } from '../../../actions/editDashboard';\nimport classes from './styles/ItemHeader.module.css';\n\nconst EditItemActions = ({\n  itemId,\n  acRemoveDashboardItem\n}) => {\n  const handleDeleteItem = () => acRemoveDashboardItem(itemId);\n\n  return <div className={classes.itemActionsWrap}>\n            <DeleteItemButton onClick={handleDeleteItem} />\n        </div>;\n};\n\nEditItemActions.propTypes = {\n  acRemoveDashboardItem: PropTypes.func,\n  itemId: PropTypes.string\n};\nconst mapDispatchToProps = {\n  acRemoveDashboardItem\n};\nexport default connect(null, mapDispatchToProps)(EditItemActions);","import React from 'react';\nimport { colors } from '@dhis2/ui';\n\nconst WarningIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" fill={colors.grey600}>\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>;\n\nexport default WarningIcon;","import React from 'react';\nimport { Tooltip } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport InfoIcon from '../../../icons/Info';\nimport classes from './styles/PrintItemInfo.module.css';\n\nconst PrintWarning = () => <div className={classes.warning}>\n        <Tooltip content={i18n.t('This item has been shortened to fit on one page')} placement=\"bottom\">\n            <InfoIcon />\n        </Tooltip>\n    </div>;\n\nexport default PrintWarning;","export const EDIT = 'edit';\nexport const NEW = 'new';\nexport const VIEW = 'view';\nexport const PRINT = 'print';\nexport const PRINT_LAYOUT = 'print-layout';\nexport const isEditMode = mode => [EDIT, NEW].includes(mode);\nexport const isPrintMode = mode => [PRINT, PRINT_LAYOUT].includes(mode);\nexport const isViewMode = mode => mode === VIEW;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ViewItemActions from './ViewItemActions';\nimport EditItemActions from './EditItemActions';\nimport PrintItemInfo from './PrintItemInfo';\nimport { VIEW, EDIT, PRINT_LAYOUT } from '../../Dashboard/dashboardModes';\nimport classes from './styles/ItemHeader.module.css';\n\nconst getItemActionsMap = isShortened => {\n  return {\n    [VIEW]: ViewItemActions,\n    [EDIT]: EditItemActions,\n    [PRINT_LAYOUT]: isShortened ? PrintItemInfo : null\n  };\n}; // This is the margin-top + margin-bottom defined in the css file\n\n\nexport const HEADER_MARGIN_HEIGHT = 12;\nconst ItemHeader = React.forwardRef(({\n  dashboardMode,\n  title,\n  isShortened,\n  ...rest\n}, ref) => {\n  const Actions = getItemActionsMap(isShortened)[dashboardMode];\n  return <div className={classes.itemHeaderWrap} ref={ref}>\n                <p className={classes.itemTitle}>{title}</p>\n                {Actions ? <Actions {...rest} /> : null}\n            </div>;\n});\nItemHeader.displayName = 'ItemHeader';\nItemHeader.propTypes = {\n  dashboardMode: PropTypes.string,\n  isShortened: PropTypes.bool,\n  title: PropTypes.string\n};\nexport default connect(null, null, null, {\n  forwardRef: true\n})(ItemHeader);","import React, { useState, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useConfig } from '@dhis2/app-runtime';\nimport { isSingleValue, isYearOverYear, VIS_TYPE_GAUGE, VIS_TYPE_PIE } from '@dhis2/analytics';\nimport { Button, Menu, Popover, MenuItem, Divider, colors } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport TableIcon from '@material-ui/icons/ViewList';\nimport ChartIcon from '@material-ui/icons/InsertChart';\nimport MapIcon from '@material-ui/icons/Public';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { ThreeDots, SpeechBubble, Fullscreen, ExitFullscreen } from './assets/icons';\nimport { getLink } from './Visualization/plugin';\nimport { CHART, MAP, REPORT_TABLE, EVENT_CHART, EVENT_REPORT, isTrackerDomainType, hasMapView, getAppName } from '../../../modules/itemTypes';\nconst iconFill = {\n  fill: colors.grey600\n};\n\nconst ItemHeaderButtons = props => {\n  const [menuIsOpen, setMenuIsOpen] = useState(null);\n  const {\n    baseUrl\n  } = useConfig();\n  const {\n    item,\n    visualization,\n    onSelectActiveType,\n    activeType\n  } = props;\n  const isTrackerType = isTrackerDomainType(item.type);\n\n  const onViewTable = () => {\n    closeMenu();\n    onSelectActiveType(isTrackerType ? EVENT_REPORT : REPORT_TABLE);\n  };\n\n  const onViewChart = () => {\n    closeMenu();\n    onSelectActiveType(isTrackerType ? EVENT_CHART : CHART);\n  };\n\n  const onViewMap = () => {\n    closeMenu();\n    onSelectActiveType(MAP);\n  };\n\n  const itemHasMapView = () => hasMapView(item.type);\n\n  const handleInterpretationClick = () => {\n    props.onToggleFooter();\n\n    if (menuIsOpen) {\n      closeMenu();\n    }\n  };\n\n  const handleToggleFullscreenClick = () => {\n    props.onToggleFullscreen();\n    closeMenu();\n  };\n\n  const openMenu = () => setMenuIsOpen(true);\n\n  const closeMenu = () => setMenuIsOpen(false);\n\n  const type = visualization.type || item.type;\n  const canViewAs = !isSingleValue(type) && !isYearOverYear(type) && type !== VIS_TYPE_GAUGE && type !== VIS_TYPE_PIE;\n  const interpretationMenuLabel = props.activeFooter ? i18n.t(`Hide interpretations and details`) : i18n.t(`Show interpretations and details`);\n\n  const ViewAsMenuItems = () => <>\n            {activeType !== CHART && activeType !== EVENT_CHART && <MenuItem dense label={i18n.t('View as Chart')} onClick={onViewChart} icon={<ChartIcon style={iconFill} />} />}\n            {activeType !== REPORT_TABLE && activeType !== EVENT_REPORT && <MenuItem dense label={i18n.t('View as Table')} onClick={onViewTable} icon={<TableIcon style={iconFill} />} />}\n            {itemHasMapView() && activeType !== MAP && <MenuItem dense label={i18n.t('View as Map')} onClick={onViewMap} icon={<MapIcon style={iconFill} />} />}\n        </>;\n\n  const buttonRef = createRef();\n  return props.isFullscreen ? <Button small secondary onClick={props.onToggleFullscreen}>\n            <ExitFullscreen />\n        </Button> : <>\n            <div ref={buttonRef}>\n                <Button small secondary onClick={openMenu} dataTest=\"dashboarditem-menu-button\">\n                    <ThreeDots />\n                </Button>\n            </div>\n            {menuIsOpen && <Popover reference={buttonRef} placement=\"auto-start\" arrow={false} onClickOutside={closeMenu}>\n                    <Menu>\n                        {canViewAs && <>\n                                <ViewAsMenuItems />\n                                <Divider />\n                            </>}\n                        <MenuItem dense icon={<LaunchIcon style={{\n          fill: '#6e7a8a'\n        }} />} label={i18n.t('Open in {{appName}} app', {\n          appName: getAppName(item.type)\n        })} href={getLink(item, baseUrl)} target=\"_blank\" />\n                        <MenuItem dense icon={<SpeechBubble />} label={interpretationMenuLabel} onClick={handleInterpretationClick} />\n                        {props.fullscreenSupported && <MenuItem dense icon={<Fullscreen />} label={i18n.t('View fullscreen')} onClick={handleToggleFullscreenClick} />}\n                    </Menu>\n                </Popover>}\n        </>;\n};\n\nItemHeaderButtons.propTypes = {\n  activeFooter: PropTypes.bool,\n  activeType: PropTypes.string,\n  fullscreenSupported: PropTypes.bool,\n  isFullscreen: PropTypes.bool,\n  item: PropTypes.object,\n  visualization: PropTypes.object,\n  onSelectActiveType: PropTypes.func,\n  onToggleFooter: PropTypes.func,\n  onToggleFullscreen: PropTypes.func\n};\nexport default ItemHeaderButtons;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getVisualizationId } from '../../../modules/item';\nimport InterpretationsComponent from '@dhis2/d2-ui-interpretations';\nimport { useD2 } from '@dhis2/app-runtime-adapter-d2';\nimport classes from './styles/ItemFooter.module.css';\n\nconst ItemFooter = props => {\n  const {\n    d2\n  } = useD2({});\n  return <div data-test=\"dashboarditem-footer\">\n            <hr className={classes.line} />\n            <div className={classes.scrollContainer}>\n                <InterpretationsComponent d2={d2} item={props.item} type={props.item.type.toLowerCase()} id={getVisualizationId(props.item)} appName=\"dashboard\" />\n            </div>\n        </div>;\n};\n\nItemFooter.propTypes = {\n  item: PropTypes.object.isRequired\n};\nexport default ItemFooter;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport uniqueId from 'lodash/uniqueId';\nimport Visualization from './Visualization/Visualization';\nimport FatalErrorBoundary from './FatalErrorBoundary';\nimport ItemHeader, { HEADER_MARGIN_HEIGHT } from '../ItemHeader/ItemHeader';\nimport ItemHeaderButtons from './ItemHeaderButtons';\nimport ItemFooter from './ItemFooter';\nimport { WindowDimensionsCtx } from '../../WindowDimensionsProvider';\nimport { apiPostDataStatistics } from '../../../api/dataStatistics';\nimport { apiFetchVisualization } from '../../../api/metadata';\nimport { sGetVisualization } from '../../../reducers/visualizations';\nimport { sGetSelectedItemActiveType } from '../../../reducers/selected';\nimport { sGetIsEditing } from '../../../reducers/editDashboard';\nimport { sGetItemFiltersRoot, DEFAULT_STATE_ITEM_FILTERS } from '../../../reducers/itemFilters';\nimport { sGatherAnalyticalObjectStatisticsInDashboardViews } from '../../../reducers/settings';\nimport { acAddVisualization } from '../../../actions/visualizations';\nimport { acSetSelectedItemActiveType } from '../../../actions/selected';\nimport { pluginIsAvailable, resize as pluginResize } from './Visualization/plugin';\nimport { getDataStatisticsName } from '../../../modules/itemTypes';\nimport { getVisualizationId, getVisualizationName } from '../../../modules/item';\nimport memoizeOne from '../../../modules/memoizeOne';\nimport isSmallScreen from '../../../modules/isSmallScreen';\nimport { isEditMode, isPrintMode, isViewMode } from '../../Dashboard/dashboardModes';\nimport { getItemHeightPx, getGridItemDomId } from '../../ItemGrid/gridUtil'; // this is set in the .dashboard-item-content css\n\nconst ITEM_CONTENT_PADDING = 4;\nexport class Item extends Component {\n  state = {\n    showFooter: false,\n    configLoaded: false,\n    isFullscreen: false\n  };\n\n  constructor(props) {\n    super(props);\n    this.contentRef = React.createRef();\n    this.headerRef = React.createRef();\n    this.itemDomElSelector = `.reactgriditem-${this.props.item.id}`;\n    this.memoizedGetContentHeight = memoizeOne((calculatedHeight, measuredHeight, preferMeasured) => preferMeasured ? measuredHeight || calculatedHeight : calculatedHeight);\n  }\n\n  async componentDidMount() {\n    this.props.updateVisualization(await apiFetchVisualization(this.props.item));\n\n    try {\n      if (this.props.gatherDataStatistics && isViewMode(this.props.dashboardMode)) {\n        await apiPostDataStatistics(getDataStatisticsName(this.props.item.type), getVisualizationId(this.props.item));\n      }\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.setState({\n      configLoaded: true\n    });\n    const el = document.querySelector(this.itemDomElSelector);\n\n    if (el?.requestFullscreen) {\n      el.onfullscreenchange = this.handleFullscreenChange;\n    } else if (el?.webkitRequestFullscreen) {\n      el.onwebkitfullscreenchange = this.handleFullscreenChange;\n    }\n  }\n\n  componentWillUnmount() {\n    const el = document.querySelector(this.itemDomElSelector);\n\n    if (el?.onfullscreenchange) {\n      el.removeEventListener('onfullscreenchange', this.handleFullscreenChange);\n    } else if (el?.onwebkitfullscreenchange) {\n      el.removeEventListener('onwebkitfullscreenchange', this.handleFullscreenChange);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.gridWidth !== this.props.gridWidth) {\n      const id = this.props.item.id;\n      const el = document.querySelector(`#${getGridItemDomId(id)}`);\n\n      if (typeof el?.setViewportSize === 'function') {\n        setTimeout(() => el.setViewportSize(el.clientWidth - 5, el.clientHeight - 5), 10);\n      } // call resize on the item component if it's a plugin type\n\n\n      pluginResize(this.props.item);\n    }\n  }\n\n  isFullscreenSupported = () => {\n    const el = document.querySelector(this.itemDomElSelector);\n    return !!(el?.requestFullscreen || el?.webkitRequestFullscreen);\n  };\n  handleFullscreenChange = () => {\n    this.setState({\n      isFullscreen: !!document.fullscreenElement || !!document.webkitFullscreenElement\n    });\n  };\n  onToggleFullscreen = () => {\n    if (!this.state.isFullscreen) {\n      const el = document.querySelector(this.itemDomElSelector);\n\n      if (el?.requestFullscreen) {\n        el.requestFullscreen();\n      } else if (el?.webkitRequestFullscreen) {\n        el.webkitRequestFullscreen();\n      }\n    } else {\n      document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen();\n    }\n  };\n  getUniqueKey = memoizeOne(() => uniqueId());\n  onToggleFooter = () => {\n    this.setState({\n      showFooter: !this.state.showFooter\n    }, this.props.onToggleItemExpanded(this.props.item.id));\n  };\n  setActiveType = type => {\n    type !== this.getActiveType() && this.props.setActiveType(this.props.item.id, type);\n  };\n  getActiveType = () => {\n    if (this.props.isEditing) {\n      return this.props.item.type;\n    }\n\n    return this.props.activeType || this.props.item.type;\n  };\n  getAvailableHeight = () => {\n    if (this.state.isFullscreen) {\n      return '95vh';\n    }\n\n    const {\n      width\n    } = this.context;\n    const calculatedHeight = getItemHeightPx(this.props.item, isSmallScreen(width)) - this.headerRef.current.clientHeight - HEADER_MARGIN_HEIGHT - ITEM_CONTENT_PADDING;\n    return this.memoizedGetContentHeight(calculatedHeight, this.contentRef ? this.contentRef.offsetHeight : null, isEditMode(this.props.dashboardMode) || isPrintMode(this.props.dashboardMode));\n  };\n  getAvailableWidth = () => {\n    const rect = document.querySelector(this.itemDomElSelector)?.getBoundingClientRect();\n    return rect && rect.width - ITEM_CONTENT_PADDING * 2;\n  };\n\n  render() {\n    const {\n      item,\n      dashboardMode,\n      itemFilters\n    } = this.props;\n    const {\n      showFooter\n    } = this.state;\n    const activeType = this.getActiveType();\n    const actionButtons = pluginIsAvailable(activeType || item.type) ? <ItemHeaderButtons item={item} visualization={this.props.visualization} onSelectActiveType={this.setActiveType} onToggleFooter={this.onToggleFooter} onToggleFullscreen={this.onToggleFullscreen} activeType={activeType} activeFooter={showFooter} isFullscreen={this.state.isFullscreen} fullscreenSupported={this.isFullscreenSupported()} /> : null;\n    return <>\n                <ItemHeader title={getVisualizationName(item)} itemId={item.id} actionButtons={actionButtons} ref={this.headerRef} dashboardMode={dashboardMode} isShortened={item.shortened} />\n                <FatalErrorBoundary>\n                    <div key={this.getUniqueKey(itemFilters)} className=\"dashboard-item-content\" ref={ref => this.contentRef = ref}>\n                        {this.state.configLoaded && <Visualization item={item} activeType={activeType} itemFilters={itemFilters} availableHeight={this.getAvailableHeight()} availableWidth={this.getAvailableWidth()} />}\n                    </div>\n                </FatalErrorBoundary>\n                {isViewMode(dashboardMode) && showFooter ? <ItemFooter item={item} /> : null}\n            </>;\n  }\n\n}\nItem.contextType = WindowDimensionsCtx;\nItem.propTypes = {\n  activeType: PropTypes.string,\n  dashboardMode: PropTypes.string,\n  gatherDataStatistics: PropTypes.bool,\n  gridWidth: PropTypes.number,\n  isEditing: PropTypes.bool,\n  item: PropTypes.object,\n  itemFilters: PropTypes.object,\n  setActiveType: PropTypes.func,\n  updateVisualization: PropTypes.func,\n  visualization: PropTypes.object,\n  onToggleItemExpanded: PropTypes.func\n};\nItem.defaultProps = {\n  item: {},\n  onToggleItemExpanded: Function.prototype,\n  visualization: {}\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const itemFilters = !isEditMode(ownProps.dashboardMode) ? sGetItemFiltersRoot(state) : DEFAULT_STATE_ITEM_FILTERS;\n  return {\n    activeType: sGetSelectedItemActiveType(state, ownProps.item?.id),\n    isEditing: sGetIsEditing(state),\n    itemFilters,\n    visualization: sGetVisualization(state, getVisualizationId(ownProps.item)),\n    gatherDataStatistics: sGatherAnalyticalObjectStatisticsInDashboardViews(state)\n  };\n};\n\nconst mapDispatchToProps = {\n  setActiveType: acSetSelectedItemActiveType,\n  updateVisualization: acAddVisualization\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","import React from 'react';\nimport { colors } from '@dhis2/ui';\nconst style = {\n  backgroundColor: colors.grey200,\n  border: 'none',\n  height: '1px',\n  margin: '0px 0px 5px 0px'\n};\n\nconst Line = () => <hr style={style} />;\n\nexport default Line;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\nimport { colors } from '@dhis2/ui';\nimport { useConfig } from '@dhis2/app-runtime';\nimport { useD2 } from '@dhis2/app-runtime-adapter-d2';\nimport ItemHeader from '../ItemHeader/ItemHeader';\nimport Line from '../../../widgets/Line';\nimport { sGetMessagesRoot } from '../../../reducers/messages';\nimport { formatDate } from '../../../modules/util';\nimport { isViewMode } from '../../Dashboard/dashboardModes';\nimport './MessagesItem.css';\nconst PRIVATE = 'PRIVATE';\nconst messageTypes = {\n  [PRIVATE]: 'Private',\n  VALIDATION_RESULT: 'Validation',\n  TICKET: 'Ticket',\n  SYSTEM: 'System'\n};\nconst style = {\n  list: {\n    listStyleType: 'none',\n    paddingLeft: '0px'\n  },\n  seeAll: {\n    textAlign: 'center',\n    fontSize: '13px',\n    marginBottom: '5px'\n  },\n  sender: {\n    fontSize: '13px',\n    lineHeight: '15px',\n    margin: 0,\n    color: colors.grey800\n  },\n  snippet: {\n    color: colors.grey800,\n    fontSize: '13px',\n    lineHeight: '15px',\n    maxHeight: '30px',\n    overflow: 'hidden'\n  }\n};\n\nconst MessagesItem = ({\n  messages,\n  item,\n  dashboardMode\n}) => {\n  const [uiLocale, setUiLocale] = useState('');\n  const {\n    d2\n  } = useD2({});\n  const {\n    baseUrl\n  } = useConfig();\n  useEffect(() => {\n    const getUiLocale = async () => {\n      const uiLocale = await d2.currentUser.userSettings.get('keyUiLocale');\n      setUiLocale(uiLocale);\n    };\n\n    getUiLocale();\n  }, []);\n\n  const getMessageHref = msg => {\n    const msgIdentifier = msg ? `#/${msg.messageType}/${msg.id}` : '';\n    return `${baseUrl}/dhis-web-messaging/${msgIdentifier}`;\n  };\n\n  const getMessageSender = msg => {\n    const latestMsg = msg.messages.slice(-1)[0];\n    return latestMsg.sender ? latestMsg.sender.displayName : '';\n  };\n\n  const getMessageItems = () => {\n    const modeClass = isViewMode(dashboardMode) ? 'view' : null;\n    return messages.map(msg => {\n      const redirectToMsg = () => {\n        if (isViewMode(dashboardMode)) {\n          document.location.href = getMessageHref(msg);\n        }\n      };\n\n      const sender = msg.messageType === PRIVATE ? getMessageSender(msg) : messageTypes[msg.messageType];\n      const readClass = !msg.read ? 'unread' : null;\n      const latestMsg = msg.messages.slice(-1)[0];\n      const msgDate = latestMsg.lastUpdated;\n      return <li className={`message-item ${modeClass}`} key={msg.id} onClick={redirectToMsg}>\n                    <p className={`message-title ${readClass}`}>\n                        {msg.displayName} ({msg.messageCount})\n                    </p>\n                    <p style={style.sender}>\n                        {sender} - {formatDate(msgDate, uiLocale)}\n                    </p>\n                    <p style={style.snippet}>{latestMsg.text}</p>\n                </li>;\n    });\n  };\n\n  return <>\n            <ItemHeader title={i18n.t('Messages')} itemId={item.id} dashboardMode={dashboardMode} isShortened={item.shortened} />\n            <Line />\n            {messages.length > 0 && <div className=\"dashboard-item-content\">\n                    <ul style={style.list}>{getMessageItems()}</ul>\n                    <div style={style.seeAll}>\n                        <a href={getMessageHref()}>\n                            {i18n.t('See all messages')}\n                        </a>\n                    </div>\n                </div>}\n        </>;\n};\n\nMessagesItem.propTypes = {\n  dashboardMode: PropTypes.string,\n  item: PropTypes.object,\n  messages: PropTypes.array\n};\n\nconst mapStateToProps = state => {\n  return {\n    messages: Object.values(sGetMessagesRoot(state))\n  };\n};\n\nconst MessagesContainer = connect(mapStateToProps, null)(MessagesItem);\nexport default MessagesContainer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport ItemHeader from '../ItemHeader/ItemHeader';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\n\nconst NotSupportedItem = props => <>\n        <ItemHeader title={i18n.t('Item type \"{{type}}\" not supported', {\n    type: props.item.type\n  })} itemId={props.item.id} dashboardMode={props.dashboardMode} isShortened={props.item.shortened} />\n        <div style={{\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '90%'\n  }}>\n            <NotInterestedIcon style={{\n      width: 100,\n      height: 100,\n      align: 'center'\n    }} color=\"disabled\" />\n        </div>\n    </>;\n\nNotSupportedItem.propTypes = {\n  dashboardMode: PropTypes.string,\n  item: PropTypes.object\n};\nexport default NotSupportedItem;","import React from 'react';\nimport { colors } from '@dhis2/ui';\nimport PropTypes from 'prop-types';\n\nconst DescriptionIcon = ({\n  className\n}) => <svg className={className} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill={colors.grey500}>\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\" />\n    </svg>;\n\nDescriptionIcon.propTypes = {\n  className: PropTypes.string\n};\nexport default DescriptionIcon;","import React from 'react';\nimport { colors } from '@dhis2/ui';\nimport PropTypes from 'prop-types';\n\nconst DeleteIcon = ({\n  className\n}) => <svg className={className} xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill={colors.red500}>\n        <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>;\n\nDeleteIcon.propTypes = {\n  className: PropTypes.string\n};\nexport default DeleteIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { colors } from '@dhis2/ui';\nimport { useConfig } from '@dhis2/app-runtime';\nimport DescriptionIcon from '../../../icons/Description';\nimport DeleteIcon from '../../../icons/Delete';\nimport Line from '../../../widgets/Line';\nimport { itemTypeMap, getItemUrl } from '../../../modules/itemTypes';\nimport { orArray } from '../../../modules/util';\nimport { tRemoveListItemContent } from './actions';\nimport ItemHeader from '../ItemHeader/ItemHeader';\nimport { isEditMode } from '../../Dashboard/dashboardModes';\nimport classes from './Item.module.css';\n\nconst getItemTitle = item => itemTypeMap[item.type].pluralTitle;\n\nconst getContentItems = item => orArray(item[itemTypeMap[item.type].propName]).filter((item, index, array) => array.findIndex(el => el.id === item.id) === index);\n\nconst ListItem = ({\n  item,\n  dashboardMode,\n  tRemoveListItemContent\n}) => {\n  const {\n    baseUrl\n  } = useConfig();\n  const contentItems = getContentItems(item);\n\n  const getLink = contentItem => {\n    const deleteButton = <button className={classes.deletebutton} onClick={() => tRemoveListItemContent(item, contentItem)}>\n                <DeleteIcon className={classes.deleteicon} />\n            </button>;\n    return <>\n                <a className={classes.link} style={{\n        color: colors.grey900\n      }} href={getItemUrl(item.type, contentItem, baseUrl)}>\n                    {contentItem.name}\n                </a>\n                {isEditMode(dashboardMode) ? deleteButton : null}\n            </>;\n  };\n\n  return <>\n            <ItemHeader title={getItemTitle(item)} itemId={item.id} dashboardMode={dashboardMode} isShortened={item.shortened} />\n            <Line />\n            <div className=\"dashboard-item-content\">\n                <ul className={classes.list}>\n                    {contentItems.map(contentItem => <li className={classes.item} key={contentItem.id}>\n                            <DescriptionIcon className={classes.itemicon} />\n                            {getLink(contentItem)}\n                        </li>)}\n                </ul>\n            </div>\n        </>;\n};\n\nListItem.propTypes = {\n  dashboardMode: PropTypes.string,\n  item: PropTypes.object,\n  tRemoveListItemContent: PropTypes.func\n};\nexport default connect(null, {\n  tRemoveListItemContent\n})(ListItem);","import { acUpdateDashboardItem, acRemoveDashboardItem } from '../../../actions/editDashboard';\nimport { itemTypeMap } from '../../../modules/itemTypes';\nexport const tRemoveListItemContent = (dashboardItem, content) => dispatch => {\n  const listItemType = itemTypeMap[dashboardItem.type].propName;\n  const newContent = dashboardItem[listItemType].filter(item => item.id !== content.id);\n\n  if (newContent.length) {\n    dashboardItem[listItemType] = newContent;\n    dispatch(acUpdateDashboardItem(dashboardItem));\n  } else {\n    dispatch(acRemoveDashboardItem(dashboardItem));\n  }\n};","/** @module reducers/editDashboard */\nimport update from 'immutability-helper';\nimport isEmpty from 'lodash/isEmpty';\nimport { orArray } from '../modules/util';\nexport const SET_PRINT_DASHBOARD = 'SET_PRINT_DASHBOARD';\nexport const CLEAR_PRINT_DASHBOARD = 'CLEAR_PRINT_DASHBOARD';\nexport const ADD_PRINT_DASHBOARD_ITEM = 'ADD_PRINT_DASHBOARD_ITEM';\nexport const SET_PRINT_DASHBOARD_LAYOUT = 'SET_PRINT_DASHBOARD_LAYOUT';\nexport const REMOVE_PRINT_DASHBOARD_ITEM = 'REMOVE_PRINT_DASHBOARD_ITEM';\nexport const UPDATE_PRINT_DASHBOARD_ITEM = 'UPDATE_PRINT_DASHBOARD_ITEM';\nexport const DEFAULT_STATE_PRINT_DASHBOARD = {};\nconst DEFAULT_DASHBOARD_ITEMS = [];\nexport const NEW_PRINT_DASHBOARD_STATE = {\n  id: '',\n  name: '',\n  access: {},\n  description: '',\n  dashboardItems: DEFAULT_DASHBOARD_ITEMS\n};\nexport default ((state = DEFAULT_STATE_PRINT_DASHBOARD, action) => {\n  switch (action.type) {\n    case SET_PRINT_DASHBOARD:\n      {\n        const newState = {};\n        Object.keys(NEW_PRINT_DASHBOARD_STATE).map(k => newState[k] = action.value[k]);\n        return newState;\n      }\n\n    case CLEAR_PRINT_DASHBOARD:\n      return DEFAULT_STATE_PRINT_DASHBOARD;\n\n    case ADD_PRINT_DASHBOARD_ITEM:\n      if (!action.value.position) {\n        return update(state, {\n          dashboardItems: {\n            $unshift: [action.value]\n          }\n        });\n      }\n\n      return update(state, {\n        dashboardItems: {\n          $splice: [[parseInt(action.value.position), 0, action.value]]\n        }\n      });\n\n    case REMOVE_PRINT_DASHBOARD_ITEM:\n      {\n        const idToRemove = action.value;\n        const dashboardItemIndex = state.dashboardItems.findIndex(item => item.id === idToRemove);\n\n        if (dashboardItemIndex > -1) {\n          return update(state, {\n            dashboardItems: {\n              $splice: [[dashboardItemIndex, 1]]\n            }\n          });\n        }\n\n        return state;\n      }\n\n    case UPDATE_PRINT_DASHBOARD_ITEM:\n      {\n        const dashboardItem = action.value;\n        const dashboardItemIndex = state.dashboardItems.findIndex(item => item.id === dashboardItem.id);\n\n        if (dashboardItemIndex > -1) {\n          const newState = update(state, {\n            dashboardItems: {\n              $splice: [[dashboardItemIndex, 1, Object.assign({}, dashboardItem)]]\n            }\n          });\n          return newState;\n        }\n\n        return state;\n      }\n\n    case SET_PRINT_DASHBOARD_LAYOUT:\n      {\n        const stateItems = orArray(state.dashboardItems);\n        let layoutHasChanged = false;\n        const newStateItems = action.value.map(({\n          x,\n          y,\n          w,\n          h,\n          i\n        }) => {\n          const stateItem = stateItems.find(si => si.id === i);\n\n          if (!(stateItem.x === x && stateItem.y === y && stateItem.w === w && stateItem.h === h)) {\n            layoutHasChanged = true;\n            return Object.assign({}, stateItem, {\n              w,\n              h,\n              x,\n              y\n            });\n          }\n\n          return stateItem;\n        });\n        return layoutHasChanged ? { ...state,\n          dashboardItems: newStateItems\n        } : state;\n      }\n\n    default:\n      return state;\n  }\n}); // root selector\n\nexport const sGetPrintDashboardRoot = state => state.printDashboard; // selectors\n\nexport const sGetIsPrinting = state => !isEmpty(state.printDashboard);\nexport const sGetPrintDashboardName = state => sGetPrintDashboardRoot(state).name;\nexport const sGetPrintDashboardDescription = state => sGetPrintDashboardRoot(state).description;\nexport const sGetPrintDashboardItems = state => {\n  return sGetPrintDashboardRoot(state)?.dashboardItems || DEFAULT_DASHBOARD_ITEMS;\n};","import React from 'react';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\nimport PropTypes from 'prop-types';\nimport Input from '@material-ui/core/Input';\nimport ItemHeader from '../ItemHeader/ItemHeader';\nimport PrintItemInfo from '../ItemHeader/PrintItemInfo';\nimport Line from '../../../widgets/Line';\nimport { Parser as RichTextParser, Editor as RichTextEditor } from '@dhis2/d2-ui-rich-text';\nimport { acUpdateDashboardItem } from '../../../actions/editDashboard';\nimport { sGetEditDashboardItems } from '../../../reducers/editDashboard';\nimport { sGetDashboardItems } from '../../../reducers/dashboards';\nimport { sGetIsPrinting, sGetPrintDashboardItems } from '../../../reducers/printDashboard';\nimport { isEditMode, PRINT_LAYOUT } from '../../Dashboard/dashboardModes';\nconst style = {\n  textDiv: {\n    padding: '10px',\n    whiteSpace: 'pre-line',\n    lineHeight: '20px'\n  },\n  textField: {\n    fontSize: '14px',\n    fontStretch: 'normal',\n    width: '90%',\n    margin: '0 auto',\n    display: 'block',\n    lineHeight: '24px'\n  },\n  container: {\n    marginBottom: '20px',\n    marginTop: '20px'\n  }\n};\n\nconst TextItem = props => {\n  const {\n    item,\n    dashboardMode,\n    text,\n    acUpdateDashboardItem\n  } = props;\n\n  const onChangeText = event => {\n    const updatedItem = { ...item,\n      text: event.target.value\n    };\n    acUpdateDashboardItem(updatedItem);\n  };\n\n  const viewItem = () => {\n    const textDivStyle = Object.assign({}, style.textField, style.textDiv);\n    return <div className=\"dashboard-item-content\" style={style.container}>\n                <RichTextParser style={textDivStyle}>{text}</RichTextParser>\n            </div>;\n  };\n\n  const editItem = () => {\n    return <>\n                <ItemHeader title={i18n.t('Text item')} itemId={item.id} dashboardMode={dashboardMode} />\n                <Line />\n                <div className=\"dashboard-item-content\">\n                    <RichTextEditor onEdit={onChangeText}>\n                        <Input value={text} multiline fullWidth style={style.textField} placeholder={i18n.t('Add text here')} onChange={onChangeText} />\n                    </RichTextEditor>\n                </div>\n            </>;\n  };\n\n  const printItem = () => {\n    const textDivStyle = Object.assign({}, style.textField, style.textDiv);\n    return <>\n                {props.item.shortened ? <PrintItemInfo /> : null}\n                <div className=\"dashboard-item-content\" style={style.container}>\n                    <RichTextParser style={textDivStyle}>{text}</RichTextParser>\n                </div>\n            </>;\n  };\n\n  let textItem;\n\n  if (isEditMode(dashboardMode)) {\n    textItem = editItem;\n  } else if (dashboardMode === PRINT_LAYOUT) {\n    textItem = printItem;\n  } else {\n    textItem = viewItem;\n  }\n\n  return <>{textItem()}</>;\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const isPrintPreview = sGetIsPrinting(state);\n  let items;\n\n  if (isPrintPreview) {\n    items = sGetPrintDashboardItems(state);\n  } else if (isEditMode(ownProps.dashboardMode)) {\n    items = sGetEditDashboardItems(state);\n  } else {\n    items = sGetDashboardItems(state);\n  }\n\n  const item = items.find(item => item.id === ownProps.item.id);\n  return {\n    text: item ? item.text : ''\n  };\n};\n\nTextItem.propTypes = {\n  acUpdateDashboardItem: PropTypes.func,\n  dashboardMode: PropTypes.string,\n  item: PropTypes.object,\n  text: PropTypes.string\n};\nexport default connect(mapStateToProps, {\n  acUpdateDashboardItem\n})(TextItem);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\nimport { useD2 } from '@dhis2/app-runtime-adapter-d2';\nimport ItemHeader from '../ItemHeader/ItemHeader';\nimport Line from '../../../widgets/Line';\nimport { FILTER_ORG_UNIT } from '../../../actions/itemFilters';\nimport { sGetItemFiltersRoot, DEFAULT_STATE_ITEM_FILTERS } from '../../../reducers/itemFilters';\nimport { EDIT, isEditMode } from '../../Dashboard/dashboardModes';\n\nconst getIframeSrc = (appDetails, item, itemFilters) => {\n  let iframeSrc = `${appDetails.launchUrl}?dashboardItemId=${item.id}`;\n\n  if (itemFilters[FILTER_ORG_UNIT] && itemFilters[FILTER_ORG_UNIT].length) {\n    const ouIds = itemFilters[FILTER_ORG_UNIT].map(ouFilter => ouFilter.path.split('/').slice(-1)[0]);\n    iframeSrc += `&userOrgUnit=${ouIds.join(',')}`;\n  }\n\n  return iframeSrc;\n};\n\nconst AppItem = ({\n  dashboardMode,\n  item,\n  itemFilters\n}) => {\n  const {\n    d2\n  } = useD2({});\n  let appDetails;\n  const appKey = item.appKey;\n\n  if (appKey) {\n    appDetails = d2.system.installedApps.find(app => app.key === appKey);\n  }\n\n  const hideTitle = appDetails?.settings?.dashboardWidget?.hideTitle && dashboardMode !== EDIT;\n  return appDetails && appDetails.name && appDetails.launchUrl ? <>\n            {!hideTitle && <>\n                    <ItemHeader title={appDetails.name} itemId={item.id} dashboardMode={dashboardMode} isShortened={item.shortened} />\n                    <Line />\n                </>}\n            <iframe title={appDetails.name} src={getIframeSrc(appDetails, item, itemFilters)} className={!hideTitle ? 'dashboard-item-content' : 'dashboard-item-content-hidden-title'} style={{\n      border: 'none'\n    }} />\n        </> : <>\n            <ItemHeader title={`${appKey} app not found`} />\n            <Line />\n            <div className=\"dashboard-item-content\" style={{\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '90%'\n    }}>\n                <NotInterestedIcon color=\"disabled\" disabled style={{\n        width: 100,\n        height: 100,\n        align: 'center'\n      }} />\n            </div>\n        </>;\n};\n\nAppItem.propTypes = {\n  dashboardMode: PropTypes.string,\n  item: PropTypes.object,\n  itemFilters: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const itemFilters = !isEditMode(ownProps.dashboardMode) ? sGetItemFiltersRoot(state) : DEFAULT_STATE_ITEM_FILTERS;\n  return {\n    itemFilters\n  };\n};\n\nexport default connect(mapStateToProps)(AppItem);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { colors } from '@dhis2/ui';\nimport ItemHeader from '../ItemHeader/ItemHeader';\nconst style = {\n  margin: '21px 28px',\n  fontSize: '14px',\n  lineHeight: '18px',\n  color: colors.grey600\n};\n\nconst SpacerItem = props => {\n  return <>\n            <ItemHeader title={i18n.t('Spacer')} itemId={props.item.id} dashboardMode={props.dashboardMode} isShortened={props.item.shortened} />\n            <p style={style}>\n                {i18n.t('Use a spacer to create empty vertical space between other dashboard items.')}\n            </p>\n        </>;\n};\n\nSpacerItem.propTypes = {\n  dashboardMode: PropTypes.string,\n  item: PropTypes.object\n};\nexport default SpacerItem;","import React from 'react';\n\nconst PageBreakItem = () => <div />;\n\nexport default PageBreakItem;","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { sGetSelectedId, sGetSelectedShowDescription } from '../../../reducers/selected';\nimport { sGetDashboardById, EMPTY_DASHBOARD } from '../../../reducers/dashboards';\nimport { sGetNamedItemFilters } from '../../../reducers/itemFilters';\nimport { sGetIsEditing } from '../../../reducers/editDashboard';\nimport { sGetPrintDashboardName, sGetPrintDashboardDescription } from '../../../reducers/printDashboard';\nimport classes from './styles/Item.module.css';\n\nconst PrintTitlePageItem = ({\n  name,\n  description,\n  itemFilters,\n  showDescription\n}) => {\n  const getItemFilterList = () => {\n    const listItems = itemFilters.map(({\n      name,\n      values\n    }) => <li className={classes.filterListItem} key={name}>\n                {name}: {values.map(val => val.name).join(', ')}\n            </li>);\n    return <ul className={classes.filterList}>{listItems}</ul>;\n  };\n\n  return <div className={classes.titlePage}>\n            <p className={classes.name}>{name}</p>\n            {showDescription && description && <p className={classes.description}>{description}</p>}\n            {itemFilters.length > 0 && <>\n                    <p className={classes.filterTitle}>\n                        {i18n.t('Filters applied')}\n                    </p>\n                    {getItemFilterList()}\n                </>}\n        </div>;\n};\n\nPrintTitlePageItem.propTypes = {\n  description: PropTypes.string,\n  itemFilters: PropTypes.array,\n  name: PropTypes.string,\n  showDescription: PropTypes.bool\n};\nPrintTitlePageItem.defaultProps = {\n  description: '',\n  name: '',\n  showDescription: false\n};\n\nconst mapStateToProps = state => {\n  const id = sGetSelectedId(state);\n  const isEditMode = sGetIsEditing(state);\n  const viewDashboard = sGetDashboardById(state, id) || EMPTY_DASHBOARD;\n  const name = isEditMode ? sGetPrintDashboardName(state) || i18n.t('Untitled dashboard') : viewDashboard.displayName;\n  const description = isEditMode ? sGetPrintDashboardDescription(state) : viewDashboard.displayDescription;\n  return {\n    name,\n    description,\n    itemFilters: sGetNamedItemFilters(state),\n    showDescription: sGetSelectedShowDescription(state)\n  };\n};\n\nexport default connect(mapStateToProps)(PrintTitlePageItem);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport VisualizationItem from './VisualizationItem/Item';\nimport MessagesItem from './MessagesItem/Item';\nimport NotSupportedItem from './NotSupportedItem/Item';\nimport ListItem from './ListItem/Item';\nimport TextItem from './TextItem/Item';\nimport AppItem from './AppItem/Item';\nimport SpacerItem from './SpacerItem/Item';\nimport PageBreakItem from './PageBreakItem/Item';\nimport PrintTitlePageItem from './PrintTitlePageItem/Item';\nimport { APP, VISUALIZATION, REPORT_TABLE, CHART, MAP, EVENT_CHART, EVENT_REPORT, MESSAGES, REPORTS, RESOURCES, USERS, TEXT, SPACER, PAGEBREAK, PRINT_TITLE_PAGE } from '../../modules/itemTypes';\n\nconst getGridItem = type => {\n  switch (type) {\n    case VISUALIZATION:\n    case REPORT_TABLE:\n    case CHART:\n    case MAP:\n    case EVENT_CHART:\n    case EVENT_REPORT:\n      return VisualizationItem;\n\n    case MESSAGES:\n      return MessagesItem;\n\n    case REPORTS:\n    case RESOURCES:\n    case USERS:\n      return ListItem;\n\n    case TEXT:\n      return TextItem;\n\n    case SPACER:\n      return SpacerItem;\n\n    case APP:\n      return AppItem;\n\n    case PAGEBREAK:\n      return PageBreakItem;\n\n    case PRINT_TITLE_PAGE:\n      return PrintTitlePageItem;\n\n    default:\n      return NotSupportedItem;\n  }\n};\n\nexport const Item = props => {\n  const GridItem = getGridItem(props.item.type);\n  return <GridItem item={props.item} gridWidth={props.gridWidth} dashboardMode={props.dashboardMode} onToggleItemExpanded={props.onToggleItemExpanded} />;\n};\nItem.propTypes = {\n  dashboardMode: PropTypes.string,\n  gridWidth: PropTypes.number,\n  item: PropTypes.object,\n  onToggleItemExpanded: PropTypes.func\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport pick from 'lodash/pick';\nconst defaultDebounceMs = 100;\nconst defaultBufferFactor = 0.25;\n\nclass ProgressiveLoadingContainer extends Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    bufferFactor: PropTypes.number,\n    className: PropTypes.string,\n    debounceMs: PropTypes.number,\n    style: PropTypes.object\n  };\n  static defaultProps = {\n    debounceMs: defaultDebounceMs,\n    bufferFactor: defaultBufferFactor\n  };\n  state = {\n    shouldLoad: false\n  };\n  containerRef = null;\n  shouldLoadHandler = null;\n  handlerOptions = {\n    passive: true\n  };\n\n  checkShouldLoad() {\n    if (!this.containerRef) {\n      return;\n    }\n\n    const bufferPx = this.props.bufferFactor * window.innerHeight;\n    const rect = this.containerRef.getBoundingClientRect();\n\n    if (rect.bottom > -bufferPx && rect.top < window.innerHeight + bufferPx) {\n      this.setState({\n        shouldLoad: true\n      });\n      this.removeHandler();\n    }\n  }\n\n  registerHandler() {\n    this.shouldLoadHandler = debounce(() => this.checkShouldLoad(), this.props.debounceMs);\n    document.getElementsByClassName('dashboard-wrapper')[0]?.addEventListener('scroll', this.shouldLoadHandler, this.handlerOptions);\n  }\n\n  removeHandler() {\n    document.getElementsByClassName('dashboard-wrapper')[0]?.removeEventListener('scroll', this.shouldLoadHandler, this.handlerOptions);\n  }\n\n  componentDidMount() {\n    this.registerHandler();\n    this.checkShouldLoad();\n  }\n\n  componentWillUnmount() {\n    this.removeHandler();\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      style,\n      ...props\n    } = this.props;\n    const {\n      shouldLoad\n    } = this.state;\n    const eventProps = pick(props, ['onMouseDown', 'onTouchStart', 'onMouseUp', 'onTouchEnd']);\n    return <div ref={ref => this.containerRef = ref} style={style} className={className} data-test={`dashboarditem-${props.itemId}`} {...eventProps}>\n                {shouldLoad && children}\n            </div>;\n  }\n\n}\n\nexport default ProgressiveLoadingContainer;","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport cx from 'classnames';\nimport { Responsive as ResponsiveReactGridLayout } from 'react-grid-layout';\nimport { Layer, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useWindowDimensions } from '../WindowDimensionsProvider';\nimport { Item } from '../Item/Item';\nimport { GRID_ROW_HEIGHT, SM_SCREEN_GRID_COLUMNS, GRID_COMPACT_TYPE, MARGIN, hasShape, getGridColumns, getSmallLayout } from './gridUtil';\nimport { orArray } from '../../modules/util';\nimport NoContentMessage from '../../widgets/NoContentMessage';\nimport { sGetSelectedId, sGetSelectedIsLoading } from '../../reducers/selected';\nimport { sGetDashboardById, sGetDashboardItems } from '../../reducers/dashboards';\nimport ProgressiveLoadingContainer from '../Item/ProgressiveLoadingContainer';\nimport { VIEW } from '../Dashboard/dashboardModes';\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\nimport './styles/ItemGrid.css';\nimport classes from './styles/ViewItemGrid.module.css';\nconst EXPANDED_HEIGHT = 17;\nconst SMALL_SCREEN_BREAKPOINT = 480;\nconst SCROLLBAR_WIDTH = 8; // sum of left+right margin of the dashboard wrapper\n\nconst DASHBOARD_WRAPPER_LR_MARGIN = 20;\n\nconst ResponsiveItemGrid = ({\n  isLoading,\n  dashboardItems\n}) => {\n  const [expandedItems, setExpandedItems] = useState({});\n  const [displayItems, setDisplayItems] = useState(dashboardItems);\n  const [layoutSm, setLayoutSm] = useState(getSmallLayout(dashboardItems));\n  const [gridWidth, setGridWidth] = useState(0);\n  const {\n    width\n  } = useWindowDimensions();\n  useEffect(() => {\n    setLayoutSm(getItemsWithAdjustedHeight(getSmallLayout(dashboardItems)));\n    setDisplayItems(getItemsWithAdjustedHeight(dashboardItems));\n  }, [expandedItems, dashboardItems]);\n\n  const onToggleItemExpanded = clickedId => {\n    const isExpanded = typeof expandedItems[clickedId] === 'boolean' ? expandedItems[clickedId] : false;\n    const newExpandedItems = { ...expandedItems\n    };\n    newExpandedItems[clickedId] = !isExpanded;\n    setExpandedItems(newExpandedItems);\n  };\n\n  const getItemsWithAdjustedHeight = items => items.map(item => {\n    const expandedItem = expandedItems[item.id];\n\n    if (expandedItem && expandedItem === true) {\n      return Object.assign({}, item, {\n        h: item.h + EXPANDED_HEIGHT\n      });\n    }\n\n    return item;\n  });\n\n  const getItemComponent = item => <ProgressiveLoadingContainer key={item.i} className={cx(item.type, 'view', `reactgriditem-${item.id}`)} itemId={item.id}>\n            <Item item={item} gridWidth={gridWidth} dashboardMode={VIEW} onToggleItemExpanded={onToggleItemExpanded} />\n        </ProgressiveLoadingContainer>;\n\n  const getItemComponents = items => items.map(item => getItemComponent(item));\n\n  const onWidthChanged = containerWidth => {\n    setTimeout(() => {\n      setGridWidth(containerWidth);\n    }, 200);\n  };\n\n  if (!isLoading && !dashboardItems.length) {\n    return <NoContentMessage text={i18n.t('There are no items on this dashboard')} />;\n  }\n\n  return <div className={classes.gridContainer}>\n            {isLoading ? <Layer translucent>\n                    <CenteredContent>\n                        <CircularLoader />\n                    </CenteredContent>\n                </Layer> : null}\n            <ResponsiveReactGridLayout rowHeight={GRID_ROW_HEIGHT} width={width - DASHBOARD_WRAPPER_LR_MARGIN} cols={{\n      lg: getGridColumns(),\n      sm: SM_SCREEN_GRID_COLUMNS\n    }} breakpoints={{\n      lg: SMALL_SCREEN_BREAKPOINT - DASHBOARD_WRAPPER_LR_MARGIN,\n      sm: 0\n    }} layouts={{\n      lg: displayItems,\n      sm: layoutSm\n    }} compactType={GRID_COMPACT_TYPE} margin={MARGIN} containerPadding={{\n      lg: [SCROLLBAR_WIDTH, 0],\n      sm: [SCROLLBAR_WIDTH, 0]\n    }} isDraggable={false} isResizable={false} draggableCancel=\"input,textarea\" onWidthChange={onWidthChanged}>\n                {getItemComponents(displayItems)}\n            </ResponsiveReactGridLayout>\n        </div>;\n};\n\nResponsiveItemGrid.propTypes = {\n  dashboardItems: PropTypes.array,\n  isLoading: PropTypes.bool\n};\n\nconst mapStateToProps = state => {\n  const selectedDashboard = sGetDashboardById(state, sGetSelectedId(state));\n  const dashboardItems = orArray(sGetDashboardItems(state)).filter(hasShape);\n  return {\n    isLoading: sGetSelectedIsLoading(state) || !selectedDashboard,\n    dashboardItems\n  };\n};\n\nexport default connect(mapStateToProps)(ResponsiveItemGrid);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { colors } from '@dhis2/ui';\nconst styles = {\n  badgeContainer: {\n    margin: '2px',\n    padding: '0 16px',\n    borderRadius: '4px',\n    color: colors.white,\n    backgroundColor: '#212934',\n    height: 36,\n    display: 'flex',\n    alignItems: 'center'\n  },\n  badge: {\n    fontSize: '13px',\n    cursor: 'pointer',\n    whiteSpace: 'nowrap'\n  },\n  badgeRemove: {\n    fontSize: '12px',\n    textDecoration: 'underline',\n    marginLeft: '24px',\n    cursor: 'pointer'\n  }\n};\n\nclass FilterBadge extends Component {\n  onClick = id => () => this.props.onClick(id);\n  onRemove = id => () => this.props.onRemove(id);\n\n  render() {\n    const {\n      data\n    } = this.props;\n    return <div style={styles.badgeContainer} data-test=\"dashboard-filter-badge\">\n                <span style={styles.badge} onClick={this.onClick(data.id)}>\n                    {`${data.name}: ${data.values.length > 1 ? i18n.t('{{count}} selected', {\n          count: data.values.length\n        }) : data.values[0].name}`}\n                </span>\n                <span style={styles.badgeRemove} onClick={this.onRemove(data.id)}>\n                    {i18n.t('Remove')}\n                </span>\n            </div>;\n  }\n\n}\n\nFilterBadge.propTypes = {\n  data: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired\n};\nFilterBadge.defaultProps = {\n  onClick: Function.prototype,\n  onRemove: Function.prototype\n};\nexport default FilterBadge;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport FilterBadge from './FilterBadge';\nimport { sGetNamedItemFilters } from '../../reducers/itemFilters';\nimport { acRemoveItemFilter } from '../../actions/itemFilters';\nimport { acSetActiveModalDimension } from '../../actions/activeModalDimension';\nimport classes from './styles/FilterBar.module.css';\nexport class FilterBar extends Component {\n  onBadgeRemove = id => {\n    this.props.removeItemFilter(id);\n  };\n  onBadgeClick = id => {\n    this.props.setActiveModalDimension({\n      id,\n      name: this.props.filters.find(item => item.id === id).name\n    });\n  };\n\n  render() {\n    const {\n      filters\n    } = this.props;\n    return filters.length ? // the 3 is calculated so that the FilterBar has the same vertical position as the TitleBar in relation to the ControlBar\n    <div className={classes.bar} style={{\n      top: 3\n    }}>\n                {filters.map(filter => <FilterBadge key={filter.id} data={filter} onClick={this.onBadgeClick} onRemove={this.onBadgeRemove} />)}\n            </div> : null;\n  }\n\n}\nFilterBar.propTypes = {\n  filters: PropTypes.array.isRequired,\n  removeItemFilter: PropTypes.func.isRequired,\n  setActiveModalDimension: PropTypes.func\n};\nFilterBar.defaultProps = {\n  filters: [],\n  removeItemFIlter: Function.prototype\n};\n\nconst mapStateToProps = state => ({\n  filters: sGetNamedItemFilters(state)\n});\n\nexport default connect(mapStateToProps, {\n  setActiveModalDimension: acSetActiveModalDimension,\n  removeItemFilter: acRemoveItemFilter\n})(FilterBar);","export const SET_WINDOW_HEIGHT = 'SET_WINDOW_HEIGHT';\nexport const DEFAULT_STATE_WINDOW_HEIGHT = window.innerHeight;\nexport default ((state = DEFAULT_STATE_WINDOW_HEIGHT, action) => {\n  switch (action.type) {\n    case SET_WINDOW_HEIGHT:\n      {\n        return action.value;\n      }\n\n    default:\n      return state;\n  }\n});\nexport const sGetWindowHeight = state => state.windowHeight;","import { generateUid } from 'd2/uid';\nimport { SET_PRINT_DASHBOARD, CLEAR_PRINT_DASHBOARD, SET_PRINT_DASHBOARD_LAYOUT, ADD_PRINT_DASHBOARD_ITEM, REMOVE_PRINT_DASHBOARD_ITEM, UPDATE_PRINT_DASHBOARD_ITEM } from '../reducers/printDashboard';\nimport { NEW_ITEM_SHAPE, getGridItemProperties, getPageBreakItemShape, getPrintTitlePageItemShape } from '../components/ItemGrid/gridUtil';\nimport { itemTypeMap, PAGEBREAK } from '../modules/itemTypes'; // actions\n\nexport const acSetPrintDashboard = (dashboard, items) => {\n  const val = { ...dashboard,\n    dashboardItems: items\n  };\n  return {\n    type: SET_PRINT_DASHBOARD,\n    value: val\n  };\n};\nexport const acClearPrintDashboard = () => ({\n  type: CLEAR_PRINT_DASHBOARD\n});\nexport const acUpdatePrintDashboardLayout = value => ({\n  type: SET_PRINT_DASHBOARD_LAYOUT,\n  value\n});\nexport const acAddPrintDashboardItem = item => {\n  const type = item.type;\n  delete item.type;\n  const itemPropName = itemTypeMap[type].propName;\n  const id = generateUid();\n  const gridItemProperties = getGridItemProperties(id);\n  let shape;\n\n  if (type === PAGEBREAK) {\n    const yPos = item.yPos || 0;\n    shape = getPageBreakItemShape(yPos, item.isStatic);\n  } else {\n    shape = getPrintTitlePageItemShape(item.isOneItemPerPage);\n  }\n\n  return {\n    type: ADD_PRINT_DASHBOARD_ITEM,\n    value: {\n      id,\n      type,\n      position: item.position || null,\n      [itemPropName]: item.content,\n      ...NEW_ITEM_SHAPE,\n      ...gridItemProperties,\n      ...shape\n    }\n  };\n};\nexport const acRemovePrintDashboardItem = value => ({\n  type: REMOVE_PRINT_DASHBOARD_ITEM,\n  value\n});\nexport const acUpdatePrintDashboardItem = item => ({\n  type: UPDATE_PRINT_DASHBOARD_ITEM,\n  value: item\n});","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ViewTitleBar from '../TitleBar/ViewTitleBar';\nimport ViewItemGrid from '../ItemGrid/ViewItemGrid';\nimport FilterBar from '../FilterBar/FilterBar';\nimport DashboardsBar from '../ControlBar/DashboardsBar';\nimport { sGetIsEditing } from '../../reducers/editDashboard';\nimport { sGetIsPrinting } from '../../reducers/printDashboard';\nimport { sGetSelectedId } from '../../reducers/selected';\nimport { sGetWindowHeight } from '../../reducers/windowHeight';\nimport { sGetControlBarUserRows } from '../../reducers/controlBar';\nimport { acClearEditDashboard } from '../../actions/editDashboard';\nimport { acClearPrintDashboard } from '../../actions/printDashboard';\nimport { getControlBarHeight, HEADERBAR_HEIGHT } from '../ControlBar/controlBarDimensions';\nexport const ViewDashboard = props => {\n  useEffect(() => {\n    if (props.dashboardIsEditing) {\n      props.clearEditDashboard();\n    } else if (props.dashboardIsPrinting) {\n      props.clearPrintDashboard();\n    }\n  }, [props.dashboardIsEditing, props.dashboardIsPrinting]);\n  useEffect(() => {\n    document.querySelector('.dashboard-wrapper')?.scroll(0, 0);\n  }, [props.selectedId]);\n  const height = props.windowHeight - HEADERBAR_HEIGHT - getControlBarHeight(props.controlBarRows);\n  return <>\n            <DashboardsBar />\n            <div className=\"dashboard-wrapper\" style={{\n      height\n    }}>\n                <ViewTitleBar />\n                <FilterBar />\n                <ViewItemGrid />\n            </div>\n        </>;\n};\nViewDashboard.propTypes = {\n  clearEditDashboard: PropTypes.func,\n  clearPrintDashboard: PropTypes.func,\n  controlBarRows: PropTypes.number,\n  dashboardIsEditing: PropTypes.bool,\n  dashboardIsPrinting: PropTypes.bool,\n  selectedId: PropTypes.string,\n  windowHeight: PropTypes.number\n};\n\nconst mapStateToProps = state => {\n  return {\n    dashboardIsEditing: sGetIsEditing(state),\n    dashboardIsPrinting: sGetIsPrinting(state),\n    controlBarRows: sGetControlBarUserRows(state),\n    selectedId: sGetSelectedId(state),\n    windowHeight: sGetWindowHeight(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  clearEditDashboard: acClearEditDashboard,\n  clearPrintDashboard: acClearPrintDashboard\n})(ViewDashboard);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { InputField } from '@dhis2/ui';\n\nconst ItemSearchField = props => <InputField name=\"Dashboard item search\" label={i18n.t('Search for items to add to this dashboard')} type=\"text\" onChange={props.onChange} onFocus={props.onFocus} value={props.value} dataTest=\"item-search\" />;\n\nItemSearchField.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func\n};\nexport default ItemSearchField;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { MenuItem, colors } from '@dhis2/ui';\nimport classes from './styles/HeaderMenuItem.module.css';\n\nconst HeaderMenuItem = ({\n  title\n}) => <MenuItem className={classes.item} dense key={title} disabled label={<span style={{\n  color: colors.grey800,\n  fontWeight: '600'\n}}>\n                {title}\n            </span>} />;\n\nHeaderMenuItem.propTypes = {\n  title: PropTypes.string.isRequired\n};\nexport default HeaderMenuItem;","import React from 'react';\nimport { colors } from '@dhis2/ui';\nimport PropTypes from 'prop-types';\n\nconst LaunchIcon = ({\n  className\n}) => <svg className={className} xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" fill={colors.grey600} viewBox=\"0 0 24 24\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\" />\n    </svg>;\n\nLaunchIcon.propTypes = {\n  className: PropTypes.string\n};\nexport default LaunchIcon;","import React from 'react';\nimport { MenuItem, colors } from '@dhis2/ui';\nimport i18n from '@dhis2/d2-i18n';\nimport PropTypes from 'prop-types';\nimport { visTypeIcons } from '@dhis2/analytics';\nimport { getItemIcon, VISUALIZATION } from '../../modules/itemTypes';\nimport LaunchIcon from '../../icons/Launch';\nimport classes from './styles/ContentMenuItem.module.css';\n\nconst LaunchLink = ({\n  url\n}) => <a onClick={e => e.stopPropagation()} className={classes.launchLink} target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n        <LaunchIcon />\n    </a>;\n\nLaunchLink.propTypes = {\n  url: PropTypes.string\n};\n\nconst InsertButton = () => <button className={classes.buttonInsert}>{i18n.t('Insert')}</button>;\n\nconst ContentMenuItem = ({\n  type,\n  name,\n  onInsert,\n  url,\n  visType\n}) => {\n  const ItemIcon = getItemIcon(type);\n  const renderedItemIcon = type === VISUALIZATION ? visTypeIcons[visType] : <ItemIcon style={{\n    fill: colors.grey600\n  }} />;\n  return <MenuItem dense onClick={onInsert} label={<div className={classes.menuItem}>\n                    <div className={classes.label}>\n                        <span style={{\n        marginRight: '6px'\n      }}>\n                            {renderedItemIcon}\n                        </span>\n                        <span>{name}</span>\n                        {url ? <LaunchLink url={url} /> : null}\n                    </div>\n                    <InsertButton />\n                </div>} dataTest={`menu-item-${name}`} />;\n};\n\nContentMenuItem.propTypes = {\n  name: PropTypes.string,\n  type: PropTypes.string,\n  url: PropTypes.string,\n  visType: PropTypes.string,\n  onInsert: PropTypes.func\n};\nexport default ContentMenuItem;","import { sGetEditDashboardRoot } from '../../reducers/editDashboard';\nimport { itemTypeMap } from '../../modules/itemTypes';\nimport { acAddDashboardItem, acUpdateDashboardItem } from '../../actions/editDashboard';\nexport const tAddListItemContent = (type, content) => (dispatch, getState) => {\n  const state = getState();\n  const listItemType = itemTypeMap[type].propName;\n  const dashboardItems = sGetEditDashboardRoot(state).dashboardItems;\n  const dashboardItemIndex = dashboardItems.findIndex(item => item.type === type);\n  let dashboardItem; // Reports/Resources/Users dashboard item type already present in dashboard\n\n  if (dashboardItemIndex > -1) {\n    dashboardItem = dashboardItems[dashboardItemIndex];\n    dashboardItem[listItemType].push(content);\n    dispatch(acUpdateDashboardItem(dashboardItem));\n  } else {\n    dashboardItem = {\n      type: type,\n      content: [content]\n    };\n    dispatch(acAddDashboardItem(dashboardItem));\n  }\n};","import i18n from '@dhis2/d2-i18n';\nimport { VISUALIZATION, MAP, EVENT_CHART, EVENT_REPORT, USERS, REPORTS, RESOURCES, APP, MESSAGES, TEXT, SPACER } from '../../modules/itemTypes';\nexport const singleItems = [{\n  id: 'additional',\n  header: i18n.t('Additional items'),\n  items: [{\n    type: TEXT,\n    name: i18n.t('Text box'),\n    content: ''\n  }, {\n    type: MESSAGES,\n    name: i18n.t('Messages'),\n    content: 'true'\n  }, {\n    type: SPACER,\n    name: i18n.t('Spacer'),\n    content: ''\n  }]\n}]; // categorizedItems are grouped in the item selector menu\n\nexport const categorizedItems = [VISUALIZATION, MAP, EVENT_REPORT, EVENT_CHART, USERS, REPORTS, RESOURCES, APP]; // listItemTypes are included in a single dashboard item\n\nexport const listItemTypes = [REPORTS, RESOURCES, USERS];","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\nimport { MenuItem, Divider } from '@dhis2/ui';\nimport { useConfig } from '@dhis2/app-runtime';\nimport HeaderMenuItem from './HeaderMenuItem';\nimport ContentMenuItem from './ContentMenuItem';\nimport { tAddListItemContent } from './actions';\nimport { acAddDashboardItem } from '../../actions/editDashboard';\nimport { getItemUrl, APP, VISUALIZATION } from '../../modules/itemTypes';\nimport { categorizedItems, listItemTypes } from './selectableItems';\nimport classes from './styles/CategorizedMenuGroup.module.css';\n\nconst CategorizedMenuGroup = ({\n  type,\n  title,\n  items,\n  hasMore,\n  acAddDashboardItem,\n  tAddListItemContent,\n  onChangeItemsLimit\n}) => {\n  const {\n    baseUrl\n  } = useConfig();\n  const [seeMore, setSeeMore] = useState(false);\n\n  const addItem = item => () => {\n    if (type === APP) {\n      acAddDashboardItem({\n        type,\n        content: item.key\n      });\n    } else {\n      const newItem = {\n        id: item.id,\n        name: item.displayName || item.name\n      };\n\n      if (listItemTypes.includes(type)) {\n        tAddListItemContent(type, newItem);\n      } else {\n        acAddDashboardItem({\n          type,\n          content: newItem\n        });\n      }\n    }\n  };\n\n  const toggleSeeMore = () => {\n    setSeeMore(!seeMore);\n    onChangeItemsLimit(type);\n  };\n\n  return <>\n            <HeaderMenuItem title={title} />\n            {items.map(item => {\n      const itemUrl = getItemUrl(type, item, baseUrl);\n      return <ContentMenuItem key={item.id || item.key} type={type} visType={type === VISUALIZATION ? item.type : type} name={item.displayName || item.name} onInsert={addItem(item)} url={itemUrl} />;\n    })}\n            {hasMore ? <MenuItem dense key={`showmore${title}`} onClick={toggleSeeMore} label={<button className={classes.showMoreButton}>\n                            {seeMore ? i18n.t('Show fewer') : i18n.t('Show more')}\n                        </button>} /> : null}\n            <Divider margin=\"8px 0px\" />\n        </>;\n};\n\nCategorizedMenuGroup.propTypes = {\n  items: PropTypes.array.isRequired,\n  title: PropTypes.string.isRequired,\n  type: PropTypes.oneOf(categorizedItems).isRequired,\n  onChangeItemsLimit: PropTypes.func.isRequired,\n  acAddDashboardItem: PropTypes.func,\n  hasMore: PropTypes.bool,\n  tAddListItemContent: PropTypes.func\n};\nexport default connect(null, {\n  acAddDashboardItem,\n  tAddListItemContent\n})(CategorizedMenuGroup);","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport HeaderMenuItem from './HeaderMenuItem';\nimport ContentMenuItem from './ContentMenuItem';\nimport { acAddDashboardItem } from '../../actions/editDashboard';\nexport const SinglesMenuGroup = ({\n  acAddDashboardItem,\n  category\n}) => {\n  const addToDashboard = ({\n    type,\n    content\n  }) => () => {\n    acAddDashboardItem({\n      type,\n      content\n    });\n  };\n\n  return <>\n            <HeaderMenuItem title={category.header} />\n            {category.items.map(item => <ContentMenuItem key={item.type} type={item.type} name={item.name} onInsert={addToDashboard(item)} />)}\n        </>;\n};\nSinglesMenuGroup.propTypes = {\n  acAddDashboardItem: PropTypes.func,\n  category: PropTypes.object\n};\nexport default connect(null, {\n  acAddDashboardItem\n})(SinglesMenuGroup);","import React, { useState, useEffect, createRef } from 'react';\nimport { Popover, FlyoutMenu } from '@dhis2/ui';\nimport { useD2 } from '@dhis2/app-runtime-adapter-d2';\nimport ItemSearchField from './ItemSearchField';\nimport CategorizedMenuGroup from './CategorizedMenuGroup';\nimport SinglesMenuGroup from './SinglesMenuGroup';\nimport { singleItems, categorizedItems } from './selectableItems';\nimport { itemTypeMap, getDefaultItemCount } from '../../modules/itemTypes';\nimport classes from './styles/ItemSelector.module.css';\n\nconst ItemSelector = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [filter, setFilter] = useState('');\n  const [items, setItems] = useState(null);\n  const [maxOptions, setMaxOptions] = useState(new Set());\n  const {\n    d2\n  } = useD2({});\n  useEffect(() => {\n    let queryString = '?count=11';\n\n    if ([...maxOptions.values()].length) {\n      queryString += '&max=' + [...maxOptions.values()].join('&max=');\n    }\n\n    const filterStr = filter ? `/${filter}` : '';\n    d2.Api.getApi().get(`dashboards/q${filterStr}${queryString}`).then(response => setItems(response)).catch(console.error);\n  }, [filter, maxOptions]);\n\n  const closeMenu = () => {\n    setIsOpen(false);\n    setFilter('');\n    setMaxOptions(new Set());\n  };\n\n  const openMenu = () => setIsOpen(true);\n\n  const getCategorizedMenuGroups = () => {\n    return categorizedItems.filter(type => {\n      const itemType = itemTypeMap[type];\n      return items && items[itemType.endPointName];\n    }).map(type => {\n      const itemType = itemTypeMap[type];\n      const itemCount = getDefaultItemCount(type);\n      const allItems = items[itemType.endPointName];\n      const hasMore = allItems.length > itemCount;\n      const displayItems = maxOptions.has(itemType.id) ? allItems : allItems.slice(0, itemCount);\n      return <CategorizedMenuGroup key={type} type={type} title={itemType.pluralTitle} items={displayItems} onChangeItemsLimit={updateMaxOptions} hasMore={hasMore} />;\n    });\n  };\n\n  const getSinglesMenuGroups = () => singleItems.map(category => <SinglesMenuGroup key={category.id} category={category} />);\n\n  const getMenuGroups = () => getCategorizedMenuGroups().concat(getSinglesMenuGroups());\n\n  const updateMaxOptions = type => {\n    if (type) {\n      const options = new Set(maxOptions);\n      options.has(type) ? options.delete(type) : options.add(type);\n      setMaxOptions(options);\n    } else {\n      setMaxOptions(new Set());\n    }\n  };\n\n  const updateFilter = ({\n    value\n  }) => setFilter(value);\n\n  const inputRef = createRef();\n  return <>\n            <span ref={inputRef}>\n                <ItemSearchField value={filter} onChange={updateFilter} onFocus={openMenu} />\n            </span>\n            {isOpen && <Popover reference={inputRef} placement=\"bottom-start\" onClickOutside={closeMenu} arrow={false} maxWidth={700}>\n                    <FlyoutMenu className={classes.menu} dataTest=\"item-menu\" maxWidth=\"700px\">\n                        {getMenuGroups()}\n                    </FlyoutMenu>\n                </Popover>}\n        </>;\n};\n\nexport default ItemSelector;","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { InputField, TextAreaField } from '@dhis2/ui';\nimport ItemSelector from '../ItemSelector/ItemSelector';\nimport { acSetDashboardTitle, acSetDashboardDescription } from '../../actions/editDashboard';\nimport { orObject } from '../../modules/util';\nimport { sGetEditDashboardRoot } from '../../reducers/editDashboard';\nimport classes from './styles/EditTitleBar.module.css';\nexport const EditTitleBar = ({\n  name,\n  description,\n  onChangeTitle,\n  onChangeDescription\n}) => {\n  const updateTitle = (_, e) => {\n    onChangeTitle(e.target.value);\n  };\n\n  const updateDescription = (_, e) => {\n    onChangeDescription(e.target.value);\n  };\n\n  return <section className={classes.section}>\n            <div className={classes.titleDescription}>\n                <InputField className={classes.title} name=\"Dashboard title input\" label={i18n.t('Dashboard title')} type=\"text\" onChange={updateTitle} value={name} placeholder={i18n.t('Untitled dashboard')} dataTest=\"dashboard-title-input\" />\n                <TextAreaField className={classes.description} name=\"Dashboard description input\" label={i18n.t('Dashboard description')} onChange={updateDescription} value={description} dataTest=\"dashboard-description-input\" />\n            </div>\n            <div className={classes.itemSelector}>\n                <ItemSelector />\n            </div>\n        </section>;\n};\nEditTitleBar.propTypes = {\n  onChangeDescription: PropTypes.func.isRequired,\n  onChangeTitle: PropTypes.func.isRequired,\n  description: PropTypes.string,\n  name: PropTypes.string\n};\nEditTitleBar.defaultProps = {\n  name: '',\n  description: ''\n};\n\nconst mapStateToProps = state => {\n  const selectedDashboard = orObject(sGetEditDashboardRoot(state));\n  return {\n    name: selectedDashboard.name,\n    description: selectedDashboard.description\n  };\n};\n\nconst mapDispatchToProps = {\n  onChangeTitle: acSetDashboardTitle,\n  onChangeDescription: acSetDashboardDescription\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTitleBar);","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport ReactGridLayout from 'react-grid-layout';\nimport { Layer, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport cx from 'classnames';\nimport { acUpdateDashboardLayout } from '../../actions/editDashboard';\nimport { Item } from '../Item/Item';\nimport { resize as pluginResize } from '../Item/VisualizationItem/Visualization/plugin';\nimport { isVisualizationType } from '../../modules/itemTypes';\nimport { GRID_ROW_HEIGHT, GRID_COMPACT_TYPE, MARGIN, getGridColumns, hasShape, getGridItemDomId } from './gridUtil';\nimport { orArray } from '../../modules/util';\nimport NoContentMessage from '../../widgets/NoContentMessage';\nimport { sGetSelectedIsLoading } from '../../reducers/selected';\nimport { sGetEditDashboardRoot, sGetEditDashboardItems } from '../../reducers/editDashboard';\nimport ProgressiveLoadingContainer from '../Item/ProgressiveLoadingContainer';\nimport { EDIT } from '../Dashboard/dashboardModes';\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\nimport './styles/ItemGrid.css';\n\nconst EditItemGrid = ({\n  isLoading,\n  dashboardItems,\n  acUpdateDashboardLayout\n}) => {\n  const onLayoutChange = newLayout => {\n    acUpdateDashboardLayout(newLayout);\n  };\n\n  const onItemResize = id => {\n    const el = document.querySelector(`#${getGridItemDomId(id)}`) || {};\n    if (typeof el.setViewportSize === 'function') setTimeout(() => el.setViewportSize(el.clientWidth - 5, el.clientHeight - 5), 10);\n  };\n\n  const onResizeStop = (layout, oldItem, newItem) => {\n    onItemResize(newItem.i);\n    const dashboardItem = dashboardItems.find(item => item.id === newItem.i); // call resize on the item component if it's a plugin type\n\n    if (dashboardItem && isVisualizationType(dashboardItem)) {\n      pluginResize(dashboardItem);\n    }\n  };\n\n  const getItemComponent = item => <ProgressiveLoadingContainer key={item.i} className={cx(item.type, 'edit')} itemId={item.id}>\n            <Item item={item} dashboardMode={EDIT} />\n        </ProgressiveLoadingContainer>;\n\n  const getItemComponents = items => items.map(item => getItemComponent(item));\n\n  if (!isLoading && !dashboardItems.length) {\n    return <NoContentMessage text={i18n.t('There are no items on this dashboard')} />;\n  }\n\n  return <>\n            {isLoading ? <Layer translucent>\n                    <CenteredContent>\n                        <CircularLoader />\n                    </CenteredContent>\n                </Layer> : null}\n            <ReactGridLayout layout={dashboardItems} margin={MARGIN} cols={getGridColumns()} rowHeight={GRID_ROW_HEIGHT} width={window.innerWidth} compactType={GRID_COMPACT_TYPE} onLayoutChange={onLayoutChange} onResizeStop={onResizeStop} isDraggable={true} isResizable={true} draggableCancel=\"input,textarea\">\n                {getItemComponents(dashboardItems)}\n            </ReactGridLayout>\n        </>;\n};\n\nEditItemGrid.propTypes = {\n  acUpdateDashboardLayout: PropTypes.func,\n  dashboardItems: PropTypes.array,\n  isLoading: PropTypes.bool\n}; // Container\n\nconst mapStateToProps = state => {\n  const selectedDashboard = sGetEditDashboardRoot(state);\n  const dashboardItems = orArray(sGetEditDashboardItems(state)).filter(hasShape);\n  return {\n    isLoading: sGetSelectedIsLoading(state) || !selectedDashboard,\n    dashboardItems\n  };\n};\n\nconst mapDispatchToProps = {\n  acUpdateDashboardLayout\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(EditItemGrid);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Button, Modal, ModalContent, ModalActions, ButtonStrip, ModalTitle } from '@dhis2/ui';\nimport classes from './styles/ConfirmDeleteDialog.module.css';\nexport const ConfirmDeleteDialog = ({\n  dashboardName,\n  onDeleteConfirmed,\n  onContinueEditing,\n  open\n}) => {\n  const actions = [<Button key=\"cancel\" secondary onClick={onContinueEditing} dataTest=\"cancel-delete-dashboard\">\n            {i18n.t('Cancel')}\n        </Button>, <Button key=\"delete\" destructive onClick={onDeleteConfirmed} dataTest=\"confirm-delete-dashboard\">\n            {i18n.t('Delete')}\n        </Button>];\n  return open && <Modal onClose={onContinueEditing} small position=\"middle\">\n                <ModalTitle>{i18n.t('Delete dashboard')}</ModalTitle>\n                <ModalContent>\n                    <span className={classes.content}>\n                        {i18n.t('Deleting dashboard \"{{ dashboardName }}\" will remove it for all users. This action cannot be undone. Are you sure you want to permanently delete this dashboard?', {\n          dashboardName\n        })}\n                    </span>\n                </ModalContent>\n                <ModalActions>\n                    <ButtonStrip>{actions}</ButtonStrip>\n                </ModalActions>\n            </Modal>;\n};\nConfirmDeleteDialog.propTypes = {\n  dashboardName: PropTypes.string,\n  open: PropTypes.bool,\n  onContinueEditing: PropTypes.func,\n  onDeleteConfirmed: PropTypes.func\n};\nexport default ConfirmDeleteDialog;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport i18n from '@dhis2/d2-i18n';\nimport TranslationDialog from '@dhis2/d2-ui-translation-dialog';\nimport { Button, ButtonStrip } from '@dhis2/ui';\nimport { useDataEngine } from '@dhis2/app-runtime';\nimport { useD2 } from '@dhis2/app-runtime-adapter-d2';\nimport ConfirmDeleteDialog from './ConfirmDeleteDialog';\nimport { tSaveDashboard, acClearEditDashboard, acSetPrintPreviewView, acClearPrintPreviewView } from '../../actions/editDashboard';\nimport { acClearPrintDashboard } from '../../actions/printDashboard';\nimport { tDeleteDashboard, acSetDashboardDisplayName } from '../../actions/dashboards';\nimport { sGetEditDashboardRoot, sGetIsNewDashboard, sGetIsPrintPreviewView } from '../../reducers/editDashboard';\nimport { apiFetchDashboard } from '../../api/dashboards';\nimport classes from './styles/EditBar.module.css';\n\nconst EditBar = props => {\n  const {\n    d2\n  } = useD2({});\n  const dataEngine = useDataEngine();\n  const [translationDlgIsOpen, setTranslationDlgIsOpen] = useState(false);\n  const [dashboard, setDashboard] = useState(undefined);\n  const [confirmDeleteDlgIsOpen, setConfirmDeleteDlgIsOpen] = useState(false);\n  const [redirectUrl, setRedirectUrl] = useState(undefined);\n  useEffect(() => {\n    if (props.dashboardId && !dashboard) {\n      apiFetchDashboard(dataEngine, props.dashboardId).then(dboard => setDashboard(dboard));\n    }\n  }, [props.dashboardId, dashboard]);\n\n  const onConfirmDelete = () => {\n    setConfirmDeleteDlgIsOpen(true);\n  };\n\n  const onSave = () => {\n    props.onSave().then(newId => {\n      setRedirectUrl(`/${newId}`);\n    });\n  };\n\n  const onPrintPreview = () => {\n    if (props.isPrintPreviewView) {\n      props.clearPrintPreview();\n      props.clearPrintDashboard();\n    } else {\n      props.showPrintPreview();\n    }\n  };\n\n  const onDiscard = () => {\n    props.onDiscardChanges();\n    const redirectUrl = props.dashboardId ? `/${props.dashboardId}` : '/';\n    setRedirectUrl(redirectUrl);\n  };\n\n  const onContinueEditing = () => {\n    setConfirmDeleteDlgIsOpen(false);\n  };\n\n  const onDeleteConfirmed = () => {\n    setConfirmDeleteDlgIsOpen(false);\n    props.onDelete(props.dashboardId).then(() => {\n      setRedirectUrl('/');\n    });\n  };\n\n  const onTranslationsSaved = async translations => {\n    if (translations && translations.length) {\n      const dbLocale = await d2.currentUser.userSettings.get('keyDbLocale');\n      const translation = translations.find(t => t.locale === dbLocale && t.property === 'NAME');\n\n      if (translation && translation.value) {\n        props.onTranslate(props.dashboardId, translation.value);\n      }\n    }\n  };\n\n  const toggleTranslationDialog = () => setTranslationDlgIsOpen(!translationDlgIsOpen);\n\n  const confirmDeleteDialog = () => props.deleteAccess && props.dashboardId ? <ConfirmDeleteDialog dashboardName={props.dashboardName} onDeleteConfirmed={onDeleteConfirmed} onContinueEditing={onContinueEditing} open={confirmDeleteDlgIsOpen} /> : null;\n\n  const translationDialog = () => dashboard && dashboard.id ? <TranslationDialog className=\"translation-dialog\" d2={d2} open={translationDlgIsOpen} onRequestClose={toggleTranslationDialog} objectToTranslate={{ ...dashboard,\n    modelDefinition: {\n      name: 'dashboard'\n    }\n  }} fieldsToTranslate={['name', 'description']} onTranslationSaved={onTranslationsSaved} onTranslationError={err => console.log('translation update error', err)} /> : null;\n\n  const renderActionButtons = () => <ButtonStrip>\n            <Button primary onClick={onSave} dataTest=\"save-dashboard-button\">\n                {i18n.t('Save changes')}\n            </Button>\n            <Button onClick={onPrintPreview}>\n                {props.isPrintPreviewView ? i18n.t('Exit Print preview') : i18n.t('Print preview')}\n            </Button>\n\n            {props.dashboardId && <Button onClick={toggleTranslationDialog}>\n                    {i18n.t('Translate')}\n                </Button>}\n            {props.dashboardId && props.deleteAccess && <Button onClick={onConfirmDelete} dataTest=\"delete-dashboard-button\">\n                    {i18n.t('Delete')}\n                </Button>}\n        </ButtonStrip>;\n\n  if (redirectUrl) {\n    return <Redirect to={redirectUrl} />;\n  }\n\n  const {\n    updateAccess\n  } = props;\n  const discardBtnText = updateAccess ? i18n.t('Exit without saving') : i18n.t('Go to dashboards');\n  return <>\n            <div className={classes.editBar}>\n                <div className={classes.controls}>\n                    {updateAccess ? renderActionButtons() : null}\n                    <Button secondary onClick={onDiscard}>\n                        {discardBtnText}\n                    </Button>\n                </div>\n            </div>\n            {translationDialog()}\n            {confirmDeleteDialog()}\n        </>;\n};\n\nEditBar.propTypes = {\n  clearPrintDashboard: PropTypes.func,\n  clearPrintPreview: PropTypes.func,\n  dashboardId: PropTypes.string,\n  dashboardName: PropTypes.string,\n  deleteAccess: PropTypes.bool,\n  isPrintPreviewView: PropTypes.bool,\n  showPrintPreview: PropTypes.func,\n  updateAccess: PropTypes.bool,\n  onDelete: PropTypes.func,\n  onDiscardChanges: PropTypes.func,\n  onSave: PropTypes.func,\n  onTranslate: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  const dashboard = sGetEditDashboardRoot(state);\n  let deleteAccess;\n  let updateAccess;\n\n  if (sGetIsNewDashboard(state)) {\n    deleteAccess = true;\n    updateAccess = true;\n  } else {\n    updateAccess = dashboard.access ? dashboard.access.update : false;\n    deleteAccess = dashboard.access ? dashboard.access.delete : false;\n  }\n\n  return {\n    dashboardId: dashboard.id,\n    dashboardName: dashboard.name,\n    deleteAccess,\n    isPrintPreviewView: sGetIsPrintPreviewView(state),\n    updateAccess\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  clearPrintDashboard: () => dispatch(acClearPrintDashboard()),\n  clearPrintPreview: () => dispatch(acClearPrintPreviewView()),\n  onSave: () => dispatch(tSaveDashboard()).then(id => id),\n  onDelete: id => dispatch(tDeleteDashboard(id)),\n  onDiscardChanges: () => dispatch(acClearEditDashboard()),\n  onTranslate: (id, value) => dispatch(acSetDashboardDisplayName(id, value)),\n  showPrintPreview: () => dispatch(acSetPrintPreviewView())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditBar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { NoticeBox, CenteredContent } from '@dhis2/ui';\nimport classes from './styles/NotSupportedNotice.module.css';\n\nconst NotSupportedNotice = ({\n  message\n}) => <CenteredContent position=\"top\">\n        <div className={classes.noticeContainer}>\n            <NoticeBox title={i18n.t('Not supported')} warning>\n                {message}\n            </NoticeBox>\n        </div>\n    </CenteredContent>;\n\nNotSupportedNotice.propTypes = {\n  message: PropTypes.string\n};\nexport default NotSupportedNotice;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport classes from './styles/PrintInfo.module.css';\n\nconst PrintInfo = ({\n  isLayout\n}) => {\n  const layoutStyle = isLayout ? i18n.t('dashboard layout') : i18n.t('one item per page');\n  return <div className={classes.container}>\n            <p className={classes.title}>\n                {`${i18n.t('Print Preview')}: ${layoutStyle}`}\n            </p>\n            <div className={classes.printSuggestions}>\n                <p>{`${i18n.t('For best print results')}:`}</p>\n                <ul>\n                    <li>{i18n.t('Use Chrome or Edge web browser')}</li>\n                    <li>\n                        {i18n.t('Wait for all dashboard items to load before printing')}\n                    </li>\n                    <li>\n                        {i18n.t('Use A4 landscape paper size and default margin settings in the browser print dialog')}\n                    </li>\n                </ul>\n            </div>\n            <hr className={classes.divider} />\n        </div>;\n};\n\nPrintInfo.propTypes = {\n  isLayout: PropTypes.bool\n};\nexport default PrintInfo;","import React from 'react';\nimport { colors } from '@dhis2/ui';\n\nconst LessHorizontalIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill={colors.grey600} viewBox=\"0 0 24 24\">\n        <path d=\"m13.2928932 6.29289322c.3905243-.39052429 1.0236893-.39052429 1.4142136 0 .3604839.36048396.3882135.92771502.0831886 1.32000622l-.0831886.09420734-4.2921068 4.29289322 4.2921068 4.2928932c.3604839.360484.3882135.927715.0831886 1.3200062l-.0831886.0942074c-.360484.3604839-.927715.3882135-1.3200062.0831886l-.0942074-.0831886-4.99999998-5c-.36048396-.360484-.3882135-.927715-.08318861-1.3200062l.08318861-.0942074z\" />\n    </svg>;\n\nexport default LessHorizontalIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { Button } from '@dhis2/ui';\nimport { Link } from 'react-router-dom';\nimport LessHorizontalIcon from '../../icons/LessHorizontal';\nimport { useWindowDimensions } from '../WindowDimensionsProvider';\nimport isSmallScreen from '../../modules/isSmallScreen';\nimport classes from './styles/PrintActionsBar.module.css'; // set in PrintActionsBar.module.css\n\nexport const PRINT_ACTIONS_BAR_HEIGHT = 44;\nexport const PRINT_ACTIONS_BAR_HEIGHT_SM = 36;\n\nconst PrintActionsBar = ({\n  id\n}) => {\n  const {\n    width\n  } = useWindowDimensions();\n  const isSmall = isSmallScreen(width);\n  return <>\n            <div className={classes.container}>\n                <div className={classes.inner}>\n                    <Link className={classes.link} to={`/${id}`}>\n                        <Button small={isSmall}>\n                            <LessHorizontalIcon />\n                            {i18n.t('Exit print preview')}\n                        </Button>\n                    </Link>\n                    <Button small={isSmall} onClick={window.print}>\n                        {i18n.t('Print')}\n                    </Button>\n                </div>\n            </div>\n            <div className={classes.topMargin} />\n        </>;\n};\n\nPrintActionsBar.propTypes = {\n  id: PropTypes.string\n};\nexport default PrintActionsBar;","import sortBy from 'lodash/sortBy';\nimport { orArray } from './util';\nimport { itemTypeMap } from './itemTypes';\nexport const getTransformYPx = elStyle => {\n  if (!elStyle || !elStyle.transform) {\n    return null;\n  } // find valid transforms - those with y pixels\n  // the code is expecting the transform prop to\n  // look like:  translate(10px, 300px)\n\n\n  const transformY = elStyle.transform.split(' ')[1]?.match(/(\\d+)px/);\n\n  if (transformY) {\n    return parseInt(transformY[1]);\n  } else {\n    return null;\n  }\n};\nexport const getDomGridItemsSortedByYPos = elements => {\n  const types = Object.keys(itemTypeMap);\n  const elementsWithBoundingRect = orArray(elements).map(el => {\n    const type = Array.from(el.classList).find(className => types.indexOf(className) > -1);\n    const rect = el.getBoundingClientRect();\n    const y = getTransformYPx(el.style) || parseInt(rect.y);\n    return {\n      type,\n      classList: el.classList,\n      bottomY: y + parseInt(rect.height),\n      el\n    };\n  });\n  return sortBy(elementsWithBoundingRect, ['bottomY']);\n};\n\nconst isLeapPage = n => {\n  // pages 5,9,13,17,21,25,29... are leap pages\n  let x = 0;\n  const startPage = 1;\n\n  const getMultiple = factor => startPage + 4 * factor;\n\n  let multiple = getMultiple(0);\n  let isLeapPage = false;\n\n  while (multiple < n) {\n    multiple = getMultiple(x);\n    ++x;\n\n    if (multiple === n) {\n      isLeapPage = true;\n      break;\n    }\n  }\n\n  return isLeapPage;\n};\n\nexport const getPageBreakPositions = items => {\n  // add enough page breaks so that each item could\n  // be put on its own page. Due to the react-grid-layout\n  // unit system, we have to estimate roughly the size of each\n  // page. At regular intervals add a unit, like a leap year\n  const yPosList = [];\n  let yPos = 0;\n\n  for (let pageNum = 1; pageNum <= items.length; ++pageNum) {\n    if (pageNum === 1) {\n      yPos += 35;\n    } else if (isLeapPage(pageNum)) {\n      yPos += 40;\n    } else {\n      yPos += 39;\n    }\n\n    yPosList.push(yPos);\n  }\n\n  return yPosList;\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport sortBy from 'lodash/sortBy';\nimport ReactGridLayout from 'react-grid-layout';\nimport { Layer, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport cx from 'classnames';\nimport { Item } from '../Item/Item';\nimport NoContentMessage from '../../widgets/NoContentMessage';\nimport { acUpdatePrintDashboardLayout } from '../../actions/printDashboard';\nimport { sGetSelectedIsLoading } from '../../reducers/selected';\nimport { sGetPrintDashboardRoot, sGetPrintDashboardItems } from '../../reducers/printDashboard';\nimport { sGetIsEditing } from '../../reducers/editDashboard';\nimport { GRID_ROW_HEIGHT, GRID_COMPACT_TYPE, MARGIN, getGridColumns, hasShape, A4_LANDSCAPE_WIDTH_PX } from './gridUtil';\nimport { getDomGridItemsSortedByYPos, getTransformYPx } from '../../modules/printUtils';\nimport { PRINT_LAYOUT } from '../Dashboard/dashboardModes';\nimport { PAGEBREAK } from '../../modules/itemTypes';\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\nimport './styles/ItemGrid.css';\nexport class PrintLayoutItemGrid extends Component {\n  onLayoutChange = newLayout => {\n    this.props.updateDashboardLayout(newLayout);\n  };\n  isFirstPageBreak = item => {\n    if (item.type !== PAGEBREAK) {\n      return false;\n    }\n\n    const pageBreaks = this.props.dashboardItems.filter(i => i.type === PAGEBREAK);\n    const sortedPageBreaks = sortBy(pageBreaks, ['y']);\n    return item.y === sortedPageBreaks[0].y;\n  };\n  getItemComponent = item => {\n    // the first-page-break class is used in Edit print preview\n    const itemClassNames = cx('print', 'layout', `${item.type}`, {\n      'first-page-break': this.props.isEditing && this.isFirstPageBreak(item),\n      shortened: !!item.shortened\n    });\n    return <div key={item.i} className={itemClassNames}>\n                <Item item={item} dashboardMode={PRINT_LAYOUT} />\n            </div>;\n  };\n  getItemComponents = items => items.map(item => this.getItemComponent(item));\n\n  hideExtraPageBreaks() {\n    const sortedElements = getDomGridItemsSortedByYPos(Array.from(document.querySelectorAll('.react-grid-item')));\n    let pageBreakBottom = 0;\n    let lastItemBottom = 0;\n    let foundNonPageBreak = false;\n\n    for (let i = sortedElements.length - 1; i >= 0; --i) {\n      const item = sortedElements[i];\n\n      if (item.type === PAGEBREAK) {\n        if (!foundNonPageBreak) {\n          item.el.classList.add('removed');\n        } else {\n          pageBreakBottom = item.bottomY;\n          break;\n        }\n      } else {\n        foundNonPageBreak = true;\n        const thisItemBottom = item.bottomY;\n\n        if (thisItemBottom > lastItemBottom) {\n          lastItemBottom = thisItemBottom;\n        }\n      }\n    }\n\n    const pageHeight = 720;\n    const gridElement = document.querySelector('.react-grid-layout'); // the last page break is before the last item(s) so\n    // maxHeight is one page beyond the last page break\n\n    const maxHeight = pageBreakBottom + pageHeight;\n\n    if (gridElement) {\n      gridElement.style.height = `${maxHeight}px`;\n    }\n\n    if (this.props.isEditing) {\n      //scroll to below the title page - which is middle of the first pagebreak\n      const firstBreak = document.querySelector('.first-page-break');\n\n      if (firstBreak && firstBreak.style && firstBreak.style.transform) {\n        const yPos = getTransformYPx(firstBreak.style);\n        const scrollArea = document.querySelector('.scroll-area');\n        scrollArea && scrollArea.scroll(0, yPos + 50);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.hideExtraPageBreaks();\n  }\n\n  componentDidUpdate() {\n    this.hideExtraPageBreaks();\n  }\n\n  render() {\n    const {\n      isLoading,\n      dashboardItems\n    } = this.props;\n\n    if (!isLoading && !dashboardItems.length) {\n      return <NoContentMessage text={i18n.t('There are no items on this dashboard')} />;\n    }\n\n    return <div className=\"grid-wrapper\">\n                {isLoading ? <Layer translucent>\n                        <CenteredContent>\n                            <CircularLoader />\n                        </CenteredContent>\n                    </Layer> : null}\n                <ReactGridLayout onLayoutChange={this.onLayoutChange} className=\"layout\" layout={dashboardItems} margin={MARGIN} cols={getGridColumns()} rowHeight={GRID_ROW_HEIGHT} width={A4_LANDSCAPE_WIDTH_PX} compactType={GRID_COMPACT_TYPE} isDraggable={false} isResizable={false} draggableCancel=\"input,textarea\">\n                    {this.getItemComponents(dashboardItems)}\n                </ReactGridLayout>\n            </div>;\n  }\n\n}\nPrintLayoutItemGrid.propTypes = {\n  dashboardItems: PropTypes.array,\n  isEditing: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  updateDashboardLayout: PropTypes.func\n};\nPrintLayoutItemGrid.defaultProps = {\n  dashboardItems: []\n};\n\nconst mapStateToProps = state => {\n  const selectedDashboard = sGetPrintDashboardRoot(state);\n  return {\n    isLoading: sGetSelectedIsLoading(state) || !selectedDashboard,\n    dashboardItems: sGetPrintDashboardItems(state).filter(hasShape),\n    isEditing: sGetIsEditing(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateDashboardLayout: acUpdatePrintDashboardLayout\n})(PrintLayoutItemGrid);","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { spacers } from '@dhis2/ui';\nimport cx from 'classnames';\nimport PrintInfo from './PrintInfo';\nimport PrintActionsBar, { PRINT_ACTIONS_BAR_HEIGHT, PRINT_ACTIONS_BAR_HEIGHT_SM } from './PrintActionsBar';\nimport PrintLayoutItemGrid from '../ItemGrid/PrintLayoutItemGrid';\nimport { acSetPrintDashboard, acAddPrintDashboardItem, acUpdatePrintDashboardItem } from '../../actions/printDashboard';\nimport { sGetSelectedId } from '../../reducers/selected';\nimport { sGetEditDashboardRoot, sGetEditDashboardItems } from '../../reducers/editDashboard';\nimport { sGetDashboardById, sGetDashboardItems } from '../../reducers/dashboards';\nimport { PAGEBREAK, PRINT_TITLE_PAGE } from '../../modules/itemTypes';\nimport { MAX_ITEM_GRID_HEIGHT } from '../ItemGrid/gridUtil';\nimport { getControlBarHeight, HEADERBAR_HEIGHT } from '../ControlBar/controlBarDimensions';\nimport { DRAG_HANDLE_HEIGHT } from '../ControlBar/ControlBar';\nimport { useWindowDimensions } from '../WindowDimensionsProvider';\nimport isSmallScreen from '../../modules/isSmallScreen';\nimport { getPageBreakPositions } from '../../modules/printUtils';\nimport classes from './styles/PrintLayoutDashboard.module.css';\nimport './styles/print.css';\nimport './styles/print-layout.css';\nconst EDIT_BAR_HEIGHT = getControlBarHeight(1) + DRAG_HANDLE_HEIGHT;\n\nconst addPageBreaks = (items, addDashboardItem) => {\n  const yPosList = getPageBreakPositions(items);\n\n  for (let i = 0; i < items.length; ++i) {\n    addDashboardItem({\n      type: PAGEBREAK,\n      yPos: yPosList[i]\n    });\n  }\n};\n\nconst PrintLayoutDashboard = ({\n  dashboard,\n  items,\n  setPrintDashboard,\n  addDashboardItem,\n  updateDashboardItem,\n  fromEdit\n}) => {\n  const {\n    width,\n    height\n  } = useWindowDimensions();\n  const actionBarHeight = isSmallScreen(width) ? PRINT_ACTIONS_BAR_HEIGHT_SM : PRINT_ACTIONS_BAR_HEIGHT;\n  useEffect(() => {\n    if (dashboard) {\n      setPrintDashboard(dashboard, items); // If any items are taller than one page, reduce it to one\n      // page (react-grid-layout units)\n\n      items.forEach(item => {\n        if (item.h > MAX_ITEM_GRID_HEIGHT) {\n          item.shortened = true;\n          updateDashboardItem(Object.assign({}, item, {\n            h: MAX_ITEM_GRID_HEIGHT\n          }));\n        }\n      });\n      addPageBreaks(items, addDashboardItem);\n      addDashboardItem({\n        type: PRINT_TITLE_PAGE,\n        isOneItemPerPage: false\n      });\n    }\n  }, [dashboard, items]);\n\n  const getWrapperStyle = () => {\n    return fromEdit ? {\n      paddingTop: spacers.dp24,\n      height: height - EDIT_BAR_HEIGHT - HEADERBAR_HEIGHT\n    } : {\n      height: height - actionBarHeight\n    };\n  };\n\n  return <>\n            {!fromEdit && <PrintActionsBar id={dashboard.id} />}\n            <div className={cx(classes.wrapper, 'scroll-area')} style={getWrapperStyle()}>\n                {!fromEdit && <PrintInfo isLayout={true} />}\n                <div className={classes.pageOuter} data-test=\"print-layout-page\">\n                    <PrintLayoutItemGrid />\n                </div>\n            </div>\n        </>;\n};\n\nPrintLayoutDashboard.propTypes = {\n  addDashboardItem: PropTypes.func,\n  dashboard: PropTypes.object,\n  fromEdit: PropTypes.bool,\n  items: PropTypes.array,\n  setPrintDashboard: PropTypes.func,\n  updateDashboardItem: PropTypes.func\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const id = sGetSelectedId(state);\n\n  if (ownProps.fromEdit) {\n    const dashboard = sGetEditDashboardRoot(state);\n    return {\n      dashboard,\n      id,\n      items: sGetEditDashboardItems(state)\n    };\n  }\n\n  const dashboard = id ? sGetDashboardById(state, id) : null;\n  return {\n    dashboard,\n    id,\n    items: sGetDashboardItems(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setPrintDashboard: acSetPrintDashboard,\n  addDashboardItem: acAddPrintDashboardItem,\n  updateDashboardItem: acUpdatePrintDashboardItem\n})(PrintLayoutDashboard);","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\nimport PropTypes from 'prop-types';\nimport EditTitleBar from '../TitleBar/EditTitleBar';\nimport EditItemGrid from '../ItemGrid/EditItemGrid';\nimport EditBar from '../ControlBar/EditBar';\nimport NotSupportedNotice from './NotSupportedNotice';\nimport { useWindowDimensions } from '../WindowDimensionsProvider';\nimport LayoutPrintPreview from './PrintLayoutDashboard';\nimport NoContentMessage from '../../widgets/NoContentMessage';\nimport { acSetEditDashboard } from '../../actions/editDashboard';\nimport { sGetWindowHeight } from '../../reducers/windowHeight';\nimport { sGetSelectedId } from '../../reducers/selected';\nimport { sGetDashboardById, sGetDashboardItems } from '../../reducers/dashboards';\nimport { sGetIsPrintPreviewView } from '../../reducers/editDashboard';\nimport { getControlBarHeight, HEADERBAR_HEIGHT } from '../ControlBar/controlBarDimensions';\nimport isSmallScreen from '../../modules/isSmallScreen';\n\nconst EditDashboard = props => {\n  const {\n    width\n  } = useWindowDimensions();\n  useEffect(() => {\n    if (props.dashboard) {\n      props.setEditDashboard(props.dashboard, props.items);\n    }\n  }, [props.dashboard]);\n\n  const renderGrid = () => {\n    if (props.isPrintPreviewView) {\n      return <LayoutPrintPreview fromEdit={true} />;\n    }\n\n    const height = props.windowHeight - HEADERBAR_HEIGHT - getControlBarHeight(1);\n    return <div className=\"dashboard-wrapper\" style={{\n      height\n    }}>\n                <EditTitleBar />\n                <EditItemGrid />\n            </div>;\n  };\n\n  const renderEditView = () => <>\n            <EditBar />\n            {props.updateAccess ? renderGrid() : <NoContentMessage text={i18n.t('No access')} />}\n        </>;\n\n  return <>\n            {isSmallScreen(width) ? <NotSupportedNotice message={i18n.t('Editing dashboards on small screens is not supported.')} /> : renderEditView()}\n        </>;\n};\n\nEditDashboard.propTypes = {\n  dashboard: PropTypes.object,\n  isPrintPreviewView: PropTypes.bool,\n  items: PropTypes.array,\n  setEditDashboard: PropTypes.func,\n  updateAccess: PropTypes.bool,\n  windowHeight: PropTypes.number\n};\n\nconst mapStateToProps = state => {\n  const id = sGetSelectedId(state);\n  const dashboard = id ? sGetDashboardById(state, id) : null;\n  const updateAccess = dashboard && dashboard.access ? dashboard.access.update : false;\n  return {\n    dashboard,\n    updateAccess,\n    items: sGetDashboardItems(state),\n    isPrintPreviewView: sGetIsPrintPreviewView(state),\n    windowHeight: sGetWindowHeight(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setEditDashboard: acSetEditDashboard\n})(EditDashboard);","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport EditBar from '../ControlBar/EditBar';\nimport EditTitleBar from '../TitleBar/EditTitleBar';\nimport EditItemGrid from '../ItemGrid/EditItemGrid';\nimport LayoutPrintPreview from './PrintLayoutDashboard';\nimport NotSupportedNotice from './NotSupportedNotice';\nimport { acSetEditNewDashboard } from '../../actions/editDashboard';\nimport { sGetIsPrintPreviewView } from '../../reducers/editDashboard';\nimport { sGetWindowHeight } from '../../reducers/windowHeight';\nimport { getControlBarHeight, HEADERBAR_HEIGHT } from '../ControlBar/controlBarDimensions';\nimport { useWindowDimensions } from '../WindowDimensionsProvider';\nimport isSmallScreen from '../../modules/isSmallScreen';\n\nconst NewDashboard = props => {\n  const {\n    width\n  } = useWindowDimensions();\n  useEffect(() => {\n    props.setNewDashboard();\n  }, []);\n  const height = props.windowHeight - HEADERBAR_HEIGHT - getControlBarHeight(1);\n\n  const renderNewView = () => <>\n            <EditBar />\n            {props.isPrintPreviewView ? <LayoutPrintPreview fromEdit={true} /> : <div className=\"dashboard-wrapper\" style={{\n      height\n    }}>\n                    <EditTitleBar />\n                    <EditItemGrid />\n                </div>}\n        </>;\n\n  return <>\n            {isSmallScreen(width) ? <NotSupportedNotice message={i18n.t('Creating dashboards on small screens is not supported.')} /> : renderNewView()}\n        </>;\n};\n\nNewDashboard.propTypes = {\n  isPrintPreviewView: PropTypes.bool,\n  setNewDashboard: PropTypes.func,\n  windowHeight: PropTypes.number\n};\n\nconst mapStateToProps = state => ({\n  isPrintPreviewView: sGetIsPrintPreviewView(state),\n  windowHeight: sGetWindowHeight(state)\n});\n\nexport default connect(mapStateToProps, {\n  setNewDashboard: acSetEditNewDashboard\n})(NewDashboard);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport ReactGridLayout from 'react-grid-layout';\nimport { Layer, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport cx from 'classnames';\nimport { Item } from '../Item/Item';\nimport NoContentMessage from '../../widgets/NoContentMessage';\nimport { PRINT } from '../Dashboard/dashboardModes';\nimport { sGetSelectedIsLoading } from '../../reducers/selected';\nimport { sGetPrintDashboardRoot, sGetPrintDashboardItems } from '../../reducers/printDashboard';\nimport { GRID_ROW_HEIGHT, GRID_COMPACT_TYPE, MARGIN, getGridColumns, hasShape, A4_LANDSCAPE_WIDTH_PX } from './gridUtil';\nimport { orArray } from '../../modules/util';\nimport 'react-grid-layout/css/styles.css';\nimport './styles/ItemGrid.css';\nexport class PrintItemGrid extends Component {\n  getItemComponent = item => <div key={item.i} className={cx(item.type, 'print', 'oipp')}>\n            <Item item={item} dashboardMode={PRINT} />\n        </div>;\n  getItemComponents = items => items.map(item => this.getItemComponent(item));\n\n  render() {\n    const {\n      isLoading,\n      dashboardItems\n    } = this.props;\n\n    if (!isLoading && !dashboardItems.length) {\n      return <NoContentMessage text={i18n.t('There are no items on this dashboard')} />;\n    }\n\n    return <>\n                {isLoading ? <Layer translucent>\n                        <CenteredContent>\n                            <CircularLoader />\n                        </CenteredContent>\n                    </Layer> : null}\n                <ReactGridLayout className=\"layout print\" layout={dashboardItems} margin={MARGIN} cols={getGridColumns()} rowHeight={GRID_ROW_HEIGHT} width={A4_LANDSCAPE_WIDTH_PX} compactType={GRID_COMPACT_TYPE} isDraggable={false} isResizable={false} draggableCancel=\"input,textarea\">\n                    {this.getItemComponents(dashboardItems)}\n                </ReactGridLayout>\n            </>;\n  }\n\n}\nPrintItemGrid.propTypes = {\n  dashboardItems: PropTypes.array,\n  isLoading: PropTypes.bool\n};\nPrintItemGrid.defaultProps = {\n  dashboardItems: []\n};\n\nconst mapStateToProps = state => {\n  const selectedDashboard = sGetPrintDashboardRoot(state);\n  return {\n    isLoading: sGetSelectedIsLoading(state) || !selectedDashboard,\n    dashboardItems: orArray(sGetPrintDashboardItems(state)).filter(hasShape)\n  };\n};\n\nexport default connect(mapStateToProps)(PrintItemGrid);","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport sortBy from 'lodash/sortBy';\nimport PrintInfo from './PrintInfo';\nimport PrintActionsBar, { PRINT_ACTIONS_BAR_HEIGHT, PRINT_ACTIONS_BAR_HEIGHT_SM } from './PrintActionsBar';\nimport PrintItemGrid from '../ItemGrid/PrintItemGrid';\nimport { acSetPrintDashboard, acAddPrintDashboardItem, acRemovePrintDashboardItem, acUpdatePrintDashboardItem } from '../../actions/printDashboard';\nimport { sGetSelectedId } from '../../reducers/selected';\nimport { sGetDashboardById, sGetDashboardItems } from '../../reducers/dashboards';\nimport { PAGEBREAK, PRINT_TITLE_PAGE, SPACER } from '../../modules/itemTypes';\nimport { MAX_ITEM_GRID_HEIGHT_OIPP, MAX_ITEM_GRID_WIDTH_OIPP } from '../ItemGrid/gridUtil';\nimport { useWindowDimensions } from '../WindowDimensionsProvider';\nimport isSmallScreen from '../../modules/isSmallScreen';\nimport classes from './styles/PrintDashboard.module.css';\nimport './styles/print.css';\nimport './styles/print-oipp.css';\n\nconst PrintDashboard = ({\n  dashboard,\n  items,\n  setPrintDashboard,\n  addDashboardItem,\n  updateDashboardItem,\n  removeDashboardItem\n}) => {\n  useEffect(() => {\n    if (dashboard) {\n      //sort the items by Y pos so they print in order of top to bottom\n      const sortedItems = sortBy(items, ['y', 'x']);\n      setPrintDashboard(dashboard, sortedItems); // remove spacers - don't want empty pages\n\n      let spacerCount = 0;\n      items.forEach(item => {\n        if (item.type === SPACER) {\n          spacerCount += 1;\n          removeDashboardItem(item.id);\n        }\n      }); // Resize the items to the full page size\n\n      items.forEach(item => {\n        updateDashboardItem(Object.assign({}, item, {\n          w: MAX_ITEM_GRID_WIDTH_OIPP,\n          h: MAX_ITEM_GRID_HEIGHT_OIPP\n        }));\n      }); // insert page breaks into the document flow to create the \"pages\"\n      // when previewing the print\n\n      for (let i = 0; i < (items.length - spacerCount) * 2; i += 2) {\n        addDashboardItem({\n          type: PAGEBREAK,\n          position: i,\n          isStatic: false\n        });\n      }\n\n      addDashboardItem({\n        type: PRINT_TITLE_PAGE,\n        isOneItemPerPage: true\n      });\n    }\n  }, [dashboard, items]);\n  const {\n    width,\n    height\n  } = useWindowDimensions();\n  const availableHeight = height - (isSmallScreen(width) ? PRINT_ACTIONS_BAR_HEIGHT_SM : PRINT_ACTIONS_BAR_HEIGHT);\n  return <>\n            <PrintActionsBar id={dashboard.id} />\n            <div className={classes.wrapper} style={{\n      height: availableHeight\n    }}>\n                <PrintInfo isLayout={false} />\n                <div className={classes.pageOuter} data-test=\"print-oipp-page\">\n                    <PrintItemGrid />\n                </div>\n            </div>\n        </>;\n};\n\nPrintDashboard.propTypes = {\n  addDashboardItem: PropTypes.func,\n  dashboard: PropTypes.object,\n  items: PropTypes.array,\n  removeDashboardItem: PropTypes.func,\n  setPrintDashboard: PropTypes.func,\n  updateDashboardItem: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  const id = sGetSelectedId(state);\n  const dashboard = id ? sGetDashboardById(state, id) : null;\n  return {\n    dashboard,\n    id,\n    items: sGetDashboardItems(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setPrintDashboard: acSetPrintDashboard,\n  addDashboardItem: acAddPrintDashboardItem,\n  removeDashboardItem: acRemovePrintDashboardItem,\n  updateDashboardItem: acUpdatePrintDashboardItem\n})(PrintDashboard);","import { SET_WINDOW_HEIGHT } from '../reducers/windowHeight';\nexport const acSetWindowHeight = value => ({\n  type: SET_WINDOW_HEIGHT,\n  value\n});","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport i18n from '@dhis2/d2-i18n';\nimport { Layer, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport debounce from 'lodash/debounce';\nimport DashboardsBar from '../ControlBar/DashboardsBar';\nimport NoContentMessage from '../../widgets/NoContentMessage';\nimport ViewDashboard from './ViewDashboard';\nimport EditDashboard from './EditDashboard';\nimport NewDashboard from './NewDashboard';\nimport PrintDashboard from './PrintDashboard';\nimport PrintLayoutDashboard from './PrintLayoutDashboard';\nimport { tSelectDashboard } from '../../actions/dashboards';\nimport { acSetWindowHeight } from '../../actions/windowHeight';\nimport { sDashboardsIsFetching, sGetAllDashboards } from '../../reducers/dashboards';\nimport { sGetSelectedId, NON_EXISTING_DASHBOARD_ID } from '../../reducers/selected';\nimport { EDIT, NEW, VIEW, PRINT, PRINT_LAYOUT, isPrintMode } from './dashboardModes';\n\nconst setHeaderbarVisibility = mode => {\n  const header = document.getElementsByTagName('header')[0];\n\n  if (isPrintMode(mode)) {\n    header.classList.add('hidden');\n  } else {\n    header.classList.remove('hidden');\n  }\n};\n\nconst dashboardMap = {\n  [VIEW]: <ViewDashboard />,\n  [EDIT]: <EditDashboard />,\n  [NEW]: <NewDashboard />,\n  [PRINT]: <PrintDashboard />,\n  [PRINT_LAYOUT]: <PrintLayoutDashboard />\n};\nexport const Dashboard = ({\n  id,\n  mode,\n  dashboardsLoaded,\n  dashboardsIsEmpty,\n  routeId,\n  selectDashboard,\n  setWindowHeight\n}) => {\n  useEffect(() => {\n    setHeaderbarVisibility(mode);\n  }, [mode]);\n  useEffect(() => {\n    if (dashboardsLoaded && !dashboardsIsEmpty) {\n      selectDashboard(routeId);\n    }\n  }, [dashboardsLoaded, dashboardsIsEmpty, routeId]);\n  useEffect(() => {\n    const onResize = debounce(() => setWindowHeight(window.innerHeight), 300);\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, []);\n\n  if (!dashboardsLoaded) {\n    return <Layer translucent>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </Layer>;\n  }\n\n  if (mode === NEW) {\n    return dashboardMap[mode];\n  }\n\n  if (dashboardsIsEmpty) {\n    return <>\n                <DashboardsBar />\n                <NoContentMessage text={i18n.t('No dashboards found. Use the + button to create a new dashboard.')} />\n            </>;\n  }\n\n  if (id === NON_EXISTING_DASHBOARD_ID) {\n    return <>\n                <DashboardsBar />\n                <NoContentMessage text={i18n.t('Requested dashboard not found')} />\n            </>;\n  }\n\n  if (id === null) {\n    return <Layer translucent>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </Layer>;\n  }\n\n  return dashboardMap[mode];\n};\nDashboard.propTypes = {\n  dashboardsIsEmpty: PropTypes.bool,\n  dashboardsLoaded: PropTypes.bool,\n  id: PropTypes.string,\n  match: PropTypes.object,\n  // provided by the react-router-dom\n  mode: PropTypes.string,\n  routeId: PropTypes.string,\n  selectDashboard: PropTypes.func,\n  setWindowHeight: PropTypes.func\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const dashboards = sGetAllDashboards(state);\n  return {\n    dashboardsIsEmpty: isEmpty(dashboards),\n    dashboardsLoaded: !sDashboardsIsFetching(state),\n    id: sGetSelectedId(state),\n    routeId: ownProps.match?.params?.dashboardId || null\n  };\n};\n\nexport default connect(mapStateToProps, {\n  selectDashboard: tSelectDashboard,\n  setWindowHeight: acSetWindowHeight\n})(Dashboard);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { AlertBar, AlertStack } from '@dhis2/ui';\nimport PropTypes from 'prop-types';\nimport { sGetAlertMessage } from '../../reducers/alert';\nimport { acClearAlertMessage } from '../../actions/alert';\nexport const Alert = ({\n  message,\n  onClose\n}) => message ? <AlertStack>\n            <AlertBar onHidden={onClose} permanent>\n                {message}\n            </AlertBar>\n        </AlertStack> : null;\nAlert.propTypes = {\n  message: PropTypes.string,\n  onClose: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  message: sGetAlertMessage(state)\n});\n\nexport default connect(mapStateToProps, {\n  onClose: acClearAlertMessage\n})(Alert);","import { RECEIVED_USER } from '../reducers/user';\nexport const acReceivedUser = value => ({\n  type: RECEIVED_USER,\n  value\n});","import { getInstance } from 'd2';\nimport { onError } from './index';\nconst SYSTEM_SETTINGS = ['keyGatherAnalyticalObjectStatisticsInDashboardViews'];\nexport const apiFetchSystemSettings = () => {\n  const endPoint = '/systemSettings';\n  const url = `${endPoint}?${SYSTEM_SETTINGS.map(s => `key=${s}`).join('&')}`;\n  return getInstance().then(d2 => d2.Api.getApi().get(url)).catch(onError);\n};","import React, { useEffect } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { CssVariables } from '@dhis2/ui';\nimport { useD2 } from '@dhis2/app-runtime-adapter-d2';\nimport Dashboard from './Dashboard/Dashboard';\nimport AlertBar from './AlertBar/AlertBar';\nimport { acReceivedUser } from '../actions/user';\nimport { tFetchDashboards } from '../actions/dashboards';\nimport { tSetControlBarRows } from '../actions/controlBar';\nimport { tSetShowDescription } from '../actions/selected';\nimport { tSetDimensions } from '../actions/dimensions';\nimport { tAddSettings } from '../actions/settings';\nimport { EDIT, VIEW, NEW, PRINT, PRINT_LAYOUT } from './Dashboard/dashboardModes';\nimport './App.css';\n\nconst App = props => {\n  const {\n    d2\n  } = useD2({});\n  useEffect(() => {\n    props.setCurrentUser(d2.currentUser);\n    props.fetchDashboards();\n    props.setControlBarRows();\n    props.setShowDescription();\n    props.setDimensions();\n    props.addSettings();\n  }, []);\n  return <>\n            <CssVariables colors spacers />\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" render={props => <Dashboard {...props} mode={VIEW} />} />\n                    <Route exact path=\"/new\" render={props => <Dashboard {...props} mode={NEW} />} />\n                    <Route exact path=\"/:dashboardId\" render={props => <Dashboard {...props} mode={VIEW} />} />\n                    <Route exact path=\"/:dashboardId/edit\" render={props => <Dashboard {...props} mode={EDIT} />} />\n                    <Route exact path=\"/:dashboardId/printoipp\" render={props => <Dashboard {...props} mode={PRINT} />} />\n                    <Route exact path=\"/:dashboardId/printlayout\" render={props => <Dashboard {...props} mode={PRINT_LAYOUT} />} />\n                </Switch>\n            </Router>\n            <AlertBar />\n        </>;\n};\n\nApp.propTypes = {\n  addSettings: PropTypes.func.isRequired,\n  fetchDashboards: PropTypes.func.isRequired,\n  setControlBarRows: PropTypes.func.isRequired,\n  setCurrentUser: PropTypes.func.isRequired,\n  setDimensions: PropTypes.func.isRequired,\n  setShowDescription: PropTypes.func.isRequired\n};\nconst mapDispatchToProps = {\n  fetchDashboards: tFetchDashboards,\n  setControlBarRows: tSetControlBarRows,\n  setCurrentUser: acReceivedUser,\n  setDimensions: tSetDimensions,\n  setShowDescription: tSetShowDescription,\n  addSettings: tAddSettings\n};\nexport default connect(null, mapDispatchToProps)(App);","import { SET_DIMENSIONS } from '../reducers/dimensions';\nimport { apiFetchDimensions } from '@dhis2/analytics';\nimport { sGetSettingsDisplayNameProperty } from '../reducers/settings';\nexport const acSetDimensions = dimensions => ({\n  type: SET_DIMENSIONS,\n  value: dimensions\n});\nexport const tSetDimensions = () => async (dispatch, getState, dataEngine) => {\n  const onSuccess = dimensions => {\n    dispatch(acSetDimensions(dimensions));\n  };\n\n  const onError = error => {\n    console.log('Error (apiFetchDimensions): ', error);\n    return error;\n  };\n\n  try {\n    const displayNameProp = sGetSettingsDisplayNameProperty(getState());\n    const dimensions = await apiFetchDimensions(dataEngine, displayNameProp); // filter out CATEGORY that are not of type ATTRIBUTE\n\n    const filteredDimensions = dimensions.filter(dim => dim.dimensionType !== 'CATEGORY' || dim.dimensionType === 'CATEGORY' && dim.dataDimensionType === 'ATTRIBUTE');\n    return onSuccess(filteredDimensions);\n  } catch (err) {\n    return onError(err);\n  }\n};","import { ADD_SETTINGS } from '../reducers/settings';\nimport { apiFetchSystemSettings } from '../api/settings';\nexport const acAddSettings = value => ({\n  type: ADD_SETTINGS,\n  value\n});\nexport const tAddSettings = (...extraSettings) => async dispatch => {\n  const onSuccess = fetchedSettings => {\n    dispatch(acAddSettings(Object.assign({}, fetchedSettings, ...extraSettings)));\n  };\n\n  const onError = error => {\n    console.log('Error (apiFetchSystemSettings): ', error);\n    return error;\n  };\n\n  try {\n    const systemSettings = await apiFetchSystemSettings();\n    return onSuccess({ ...systemSettings\n    });\n  } catch (err) {\n    return onError(err);\n  }\n};","/** @module reducers/selected */\nimport { validateReducer } from '../modules/util';\nexport const SET_STYLE = 'SET_STYLE';\nexport const DEFAULT_STATE_STYLE = 'LIST';\n/**\n * Reducer functions that computes and returns the new state based on the given action\n * @function\n * @param {Object} state The current state\n * @param {Object} action The action to be evaluated\n */\n\nconst style = (state = DEFAULT_STATE_STYLE, action) => {\n  switch (action.type) {\n    case SET_STYLE:\n      return validateReducer(action.value, DEFAULT_STATE_STYLE);\n\n    default:\n      return state;\n  }\n};\n\nexport default style;\n/**\n * Selectors that point to specific props in the state object\n * @function\n * @param {Object} state\n * @returns {Object}\n */\n\nexport const sGetStyleRoot = state => state.style;","import { combineReducers } from 'redux';\nimport dashboards from './dashboards';\nimport selected from './selected';\nimport dashboardsFilter from './dashboardsFilter';\nimport controlBar from './controlBar';\nimport visualizations from './visualizations';\nimport editDashboard from './editDashboard';\nimport printDashboard from './printDashboard';\nimport messages from './messages';\nimport user from './user';\nimport alert from './alert';\nimport itemFilters from './itemFilters';\nimport style from './style';\nimport dimensions from './dimensions';\nimport settings from './settings';\nimport activeModalDimension from './activeModalDimension';\nimport windowHeight from './windowHeight';\nexport default combineReducers({\n  dashboards,\n  selected,\n  dashboardsFilter,\n  controlBar,\n  visualizations,\n  messages,\n  user,\n  editDashboard,\n  printDashboard,\n  itemFilters,\n  style,\n  alert,\n  dimensions,\n  settings,\n  activeModalDimension,\n  windowHeight\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\nconst configureStore = dataEngine => {\n  const middleware = [thunk.withExtraArgument(dataEngine)]; // Enable Redux devtools if extension is installed instead of redux-logger\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  if (!window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && process.env.NODE_ENV !== 'production') {\n    middleware.push(createLogger());\n  }\n\n  return createStore(reducer, composeEnhancers(applyMiddleware(...middleware)));\n};\n\nexport default configureStore;","//------------------------------------------------------------------------------\n// <auto-generated>\n// This code was generated by d2-i18n-generate.\n//\n// Changes to this file may cause incorrect behavior and will be lost if\n// the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\nimport i18n from '@dhis2/d2-i18n';\nimport arTranslations from './ar/translations.json';\nimport ar_IQTranslations from './ar_IQ/translations.json';\nimport ckbTranslations from './ckb/translations.json';\nimport csTranslations from './cs/translations.json';\nimport daTranslations from './da/translations.json';\nimport enTranslations from './en/translations.json';\nimport esTranslations from './es/translations.json';\nimport frTranslations from './fr/translations.json';\nimport idTranslations from './id/translations.json';\nimport kmTranslations from './km/translations.json';\nimport loTranslations from './lo/translations.json';\nimport myTranslations from './my/translations.json';\nimport nbTranslations from './nb/translations.json';\nimport prsTranslations from './prs/translations.json';\nimport psTranslations from './ps/translations.json';\nimport ptTranslations from './pt/translations.json';\nimport pt_BRTranslations from './pt_BR/translations.json';\nimport ruTranslations from './ru/translations.json';\nimport svTranslations from './sv/translations.json';\nimport tetTranslations from './tet/translations.json';\nimport tgTranslations from './tg/translations.json';\nimport ukTranslations from './uk/translations.json';\nimport urTranslations from './ur/translations.json';\nimport uzTranslations from './uz/translations.json';\nimport uz_CyrlTranslations from './uz_Cyrl/translations.json';\nimport viTranslations from './vi/translations.json';\nimport zhTranslations from './zh/translations.json';\nimport zh_CNTranslations from './zh_CN/translations.json';\nconst namespace = 'default';\ni18n.addResources('ar', namespace, arTranslations);\ni18n.addResources('ar_IQ', namespace, ar_IQTranslations);\ni18n.addResources('ckb', namespace, ckbTranslations);\ni18n.addResources('cs', namespace, csTranslations);\ni18n.addResources('da', namespace, daTranslations);\ni18n.addResources('en', namespace, enTranslations);\ni18n.addResources('es', namespace, esTranslations);\ni18n.addResources('fr', namespace, frTranslations);\ni18n.addResources('id', namespace, idTranslations);\ni18n.addResources('km', namespace, kmTranslations);\ni18n.addResources('lo', namespace, loTranslations);\ni18n.addResources('my', namespace, myTranslations);\ni18n.addResources('nb', namespace, nbTranslations);\ni18n.addResources('prs', namespace, prsTranslations);\ni18n.addResources('ps', namespace, psTranslations);\ni18n.addResources('pt', namespace, ptTranslations);\ni18n.addResources('pt_BR', namespace, pt_BRTranslations);\ni18n.addResources('ru', namespace, ruTranslations);\ni18n.addResources('sv', namespace, svTranslations);\ni18n.addResources('tet', namespace, tetTranslations);\ni18n.addResources('tg', namespace, tgTranslations);\ni18n.addResources('uk', namespace, ukTranslations);\ni18n.addResources('ur', namespace, urTranslations);\ni18n.addResources('uz', namespace, uzTranslations);\ni18n.addResources('uz_Cyrl', namespace, uz_CyrlTranslations);\ni18n.addResources('vi', namespace, viTranslations);\ni18n.addResources('zh', namespace, zhTranslations);\ni18n.addResources('zh_CN', namespace, zh_CNTranslations);\nexport default i18n;","import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport dhis2theme from '@dhis2/d2-ui-core/theme/mui3.theme';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { D2Shim } from '@dhis2/app-runtime-adapter-d2';\nimport { useDataEngine } from '@dhis2/app-runtime';\nimport WindowDimensionsProvider from './components/WindowDimensionsProvider';\nimport App from './components/App';\nimport configureStore from './configureStore';\nimport './AppWrapper.css';\nimport './locales';\n\nconst muiTheme = () => createMuiTheme(dhis2theme);\n\nconst d2Config = {\n  schemas: ['chart', 'map', 'report', 'reportTable', 'eventChart', 'eventReport', 'dashboard', 'organisationUnit', 'userGroup']\n}; // TODO: ER and EV plugins require the auth header in development mode.\n// Remove this when these plugins are rewritten\n\nconst authorization = process.env.REACT_APP_DHIS2_AUTHORIZATION || null;\n\nif (authorization) {\n  d2Config.headers = {\n    Authorization: authorization\n  };\n}\n\nconst AppWrapper = () => {\n  const dataEngine = useDataEngine();\n  return <ReduxProvider store={configureStore(dataEngine)}>\n            <MuiThemeProvider theme={muiTheme()}>\n                <D2Shim d2Config={d2Config} i18nRoot=\"./i18n\">\n                    {({\n          d2\n        }) => {\n          if (!d2) {\n            // TODO: Handle errors in d2 initialization\n            return null;\n          }\n\n          return <WindowDimensionsProvider>\n                                <App />\n                            </WindowDimensionsProvider>;\n        }}\n                </D2Shim>\n            </MuiThemeProvider>\n        </ReduxProvider>;\n};\n\nexport default AppWrapper;","import isObject from 'lodash/isObject';\nimport { itemTypeMap } from './itemTypes';\nexport const getVisualizationFromItem = item => {\n  if (!isObject(item)) {\n    return null;\n  }\n\n  const propName = itemTypeMap[item.type]?.propName;\n  return item[propName] || item.reportTable || item.chart || item.map || item.eventReport || item.eventChart || {};\n};\nexport const getVisualizationId = item => getVisualizationFromItem(item).id;\nexport const getVisualizationName = item => getVisualizationFromItem(item).name;","import { REPORT_TABLE, CHART, MAP, EVENT_REPORT, EVENT_CHART, itemTypeMap } from '../../../../modules/itemTypes';\nimport { getVisualizationId } from '../../../../modules/item';\nimport { getGridItemDomId } from '../../../ItemGrid/gridUtil'; //external plugins\n\nconst itemTypeToExternalPlugin = {\n  [MAP]: 'mapPlugin',\n  [EVENT_REPORT]: 'eventReportPlugin',\n  [EVENT_CHART]: 'eventChartPlugin'\n};\n\nconst hasIntegratedPlugin = type => [CHART, REPORT_TABLE].includes(type);\n\nconst getPlugin = type => {\n  if (hasIntegratedPlugin(type)) {\n    return true;\n  }\n\n  const pluginName = itemTypeToExternalPlugin[type];\n  return global[pluginName];\n};\n\nexport const pluginIsAvailable = type => !!getPlugin(type);\nexport const loadPlugin = (plugin, config, credentials) => {\n  if (!(plugin && plugin.load)) {\n    return;\n  }\n\n  plugin.url = credentials.baseUrl;\n  plugin.loadingIndicator = true;\n  plugin.dashboard = true;\n\n  if (credentials.auth) {\n    plugin.auth = credentials.auth;\n  }\n\n  plugin.load(config);\n};\nexport const getLink = (item, baseUrl) => {\n  const appUrl = itemTypeMap[item.type].appUrl(getVisualizationId(item));\n  return `${baseUrl}/${appUrl}`;\n};\nexport const load = async (item, visualization, {\n  credentials,\n  activeType,\n  options = {}\n}) => {\n  const config = { ...visualization,\n    ...options,\n    el: getGridItemDomId(item.id)\n  };\n  const type = activeType || item.type;\n  const plugin = getPlugin(type);\n  loadPlugin(plugin, config, credentials);\n};\nexport const resize = item => {\n  const plugin = getPlugin(item.type);\n\n  if (plugin && plugin.resize) {\n    plugin.resize(getGridItemDomId(item.id));\n  }\n};\nexport const unmount = (item, activeType) => {\n  const plugin = getPlugin(activeType);\n\n  if (plugin && plugin.unmount) {\n    plugin.unmount(getGridItemDomId(item.id));\n  }\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemHeaderWrap\":\"ItemHeader_itemHeaderWrap__JcBP7\",\"itemTitle\":\"ItemHeader_itemTitle__34rHa\",\"itemActionsWrap\":\"ItemHeader_itemActionsWrap__Gx3D9\"};"],"sourceRoot":""}