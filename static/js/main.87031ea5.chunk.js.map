{"version":3,"sources":["components/Item/ListItem/Item.module.css","modules/itemTypes.js","reducers/user.js","reducers/dashboards.js","reducers/selected.js","reducers/visualizations.js","api/metadata.js","api/index.js","api/dashboards.js","components/ItemGrid/gridUtil.js","reducers/messages.js","api/messages.js","reducers/snackbar.js","actions/snackbar.js","components/SnackbarMessage/SnackbarMessage.js","components/Item/VisualizationItem/plugin.js","actions/selected.js","api/localStorage.js","components/Item/MessagesItem/actions.js","reducers/editDashboard.js","reducers/editItemFilters.js","reducers/itemFilters.js","actions/itemFilters.js","actions/editItemFilters.js","api/editDashboard.js","actions/editDashboard.js","actions/dashboards.js","reducers/controlBar.js","api/controlBar.js","actions/controlBar.js","reducers/dimensions.js","reducers/settings.js","actions/dimensions.js","icons/Star.js","api/dataStatistics.js","components/ControlBar/DashboardItemChip.js","icons/AddCircle.js","reducers/dashboardsFilter.js","components/ControlBar/Filter.js","modules/colors.js","components/ControlBar/ShowMoreButton.js","components/ControlBar/controlBarDimensions.js","components/ControlBar/DashboardsBar.js","actions/dashboardsFilter.js","components/Dashboard/DashboardVerticalOffset.js","components/ItemSelect/selectableItems.js","components/ItemSelect/ItemSelectList.js","components/ItemSelect/actions.js","components/ItemSelect/ItemSelectSingle.js","components/ItemSelect/ItemSelect.js","components/TitleBar/EditTitleBar.js","components/ItemFilter/FilterDialog.js","reducers/activeModalDimension.js","actions/activeModalDimension.js","components/ItemFilter/FilterSelector.js","components/TitleBar/Info.js","components/TitleBar/ViewTitleBar.js","components/TitleBar/TitleBar.js","components/Item/VisualizationItem/DefaultPlugin.js","components/Item/ItemHeader.js","components/Item/VisualizationItem/ItemFooter.js","components/Item/ItemHeaderButton.js","components/Item/VisualizationItem/ItemHeaderButtons.js","modules/memoizeOne.js","components/Item/VisualizationItem/Item.js","widgets/Line.js","components/Item/MessagesItem/Item.js","components/Item/NotSupportedItem/Item.js","icons/Description.js","icons/Delete.js","components/Item/ListItem/Item.js","components/Item/ListItem/actions.js","components/Item/TextItem/Item.js","components/Item/AppItem/Item.js","components/Item/SpacerItem/Item.js","components/Item/Item.js","components/ItemGrid/DeleteItemButton.js","widgets/ModalLoadingMask.js","widgets/NoContentMessage.js","components/Item/ProgressiveLoadingContainer.js","components/ItemGrid/ItemGrid.js","components/FilterBar/FilterBadge.js","components/FilterBar/FilterBar.js","components/Dashboard/DashboardContent.js","components/Dashboard/ViewDashboard.js","components/ControlBar/ConfirmDeleteDialog.js","components/ControlBar/EditBar.js","components/Dashboard/EditDashboard.js","components/Dashboard/NewDashboard.js","components/Dashboard/Dashboard.js","components/Dashboard/dashboardModes.js","components/App.js","actions/user.js","locales/index.js","reducers/style.js","reducers/index.js","configureStore.js","modules/theme.js","index.js","modules/util.js"],"names":["module","exports","list","item","itemicon","link","deleteicon","deletebutton","REPORT_TABLE","CHART","MAP","EVENT_REPORT","EVENT_CHART","APP","REPORTS","RESOURCES","USERS","MESSAGES","TEXT","SPACER","DOMAIN_TYPE_AGGREGATE","VISUALIZATION_TYPE_TABLE","VISUALIZATION_TYPE_CHART","VISUALIZATION_TYPE_MAP","spacerContent","emptyTextItemContent","isSpacerType","type","text","isTextType","isPluginType","itemTypeMap","hasOwnProperty","getPlugin","pluginName","plugin","global","_itemTypeMap","Object","_home_travis_build_dhis2_dashboards_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","id","endPointName","propName","countName","pluralTitle","i18n","t","domainType","visualizationType","appUrl","concat","appName","getItemUrl","d2","url","launchUrl","getBaseUrl","getItemIcon","TableIcon","ChartIcon","MapIcon","ExtensionIcon","DescriptionIcon","PersonIcon","FontDownloadIcon","EmailIcon","CropFreeIcon","NotInterestedIcon","DEFAULT_STATE_USER","username","uiLocale","isSuperuser","sGetUserUsername","state","user","DEFAULT_STATE_DASHBOARDS","byId","items","updateDashboardProp","dashboardId","prop","value","objectSpread","defineProperty","sGetDashboardsRoot","dashboards","sGetDashboardById","orObject","sDashboardsIsFetching","sGetAllDashboards","sGetDashboardItems","sGetStarredDashboards","values","filter","dashboard","starred","sGetUnstarredDashboards","sGetDashboardsSortedByStarred","toConsumableArray","arraySort","getCustomDashboards","data","arrayFrom","map","d","index","name","displayName","description","displayDescription","favorite","owner","created","split","join","substr","lastUpdated","access","numberOfItems","orArray","dashboardItems","length","combineReducers","arguments","undefined","action","validateReducer","isLoading","showDescription","sGetSelectedRoot","selected","sGetSelectedId","sGetSelectedIsLoading","sGetSelectedShowDescription","DEFAULT_STATE_VISUALIZATIONS","isEmpty","p","sGetVisualization","visualizations","sGetVisualizationsRoot","getIdNameFields","rename","getDimensionFields","_ref2","withItems","arrayClean","getAxesFields","_ref3","getFavoriteFields","_ref4","withDimensions","withOptions","getFavoritesFields","_ref5","apiFetchFavorite","_ref6","fields","getInstance","then","Api","getApi","get","getEndPointName","onError","error","console","log","getDashboardItemsFields","withFavorite","getDashboardFields","apiFetchDashboard","models","catch","apiStarDashboard","isStarred","post","delete","apiDeleteDashboard","MARGIN","NEW_ITEM_SHAPE","x","y","w","h","isNonNegativeInteger","Number","isInteger","hasShape","withShape","itemWithShape","assign","i","Error","col","row","Math","floor","itemWidth","GRID_ROW_HEIGHT","getShape","originalHeight","round","max","getOriginalHeight","getGridItemDomId","onItemResize","el","document","querySelector","isFunction","setViewportSize","setTimeout","clientWidth","clientHeight","sGetMessagesRoot","messages","getMessages","DEFAULT_STATE_SNACKBAR","message","duration","open","acCloseSnackbar","loadingDashboardMsg","SnackbarMessageContent","_ref","react_default","a","createElement","style","fontWeight","connect","_sGetSnackbar","snackbar","sGetSnackbar","snackbarOpen","snackbarMessage","snackbarDuration","onCloseSnackbar","props","Snackbar_default","SnackbarMessage_SnackbarMessageContent","autoHideDuration","onClose","pluginIsAvailable","activeType","extractFavorite","isObject","reportTable","chart","eventReport","eventChart","loadPlugin","config","credentials","load","baseUrl","loadingIndicator","auth","getId","getName","getLink","asyncToGenerator","regenerator_default","mark","_callee","visualization","_args","wrap","_context","prev","next","stop","_x","_x2","_x3","_x4","apply","this","fetch","_callee2","fetchedFavorite","_context2","sent","abrupt","_x5","resize","unmount","getVisualizationConfig","originalType","extractedMapView","mapViews","find","mv","layer","includes","getWithoutId","acSetSelectedId","acSetSelectedIsLoading","acReceivedVisualization","tLoadDashboard","dispatch","getState","dash","acAppendDashboards","Promise","resolve","t0","tSetSelectedDashboardById","snackbarTimeout","onSuccess","dashboardName","customDashboard","acSetDashboardItems","localStorage","setItem","forEach","messageConversations","clearTimeout","DEFAULT_STATE_EDIT_DASHBOARD","NEW_DASHBOARD_STATE","sGetEditDashboardRoot","editDashboard","sGetIsEditing","sGetEditDashboardItems","DEFAULT_STATE_EDIT_ITEM_FILTERS","sGetEditItemFiltersRoot","editItemFilters","DEFAULT_STATE_ITEM_FILTERS","sGetItemFiltersRoot","itemFilters","sGetFiltersKeys","keys","acRemoveItemFilter","acRemoveEditItemFilter","saveDashboard","width","height","save","msg","response","uid","updateDashboard","postDashboard","create","acAddDashboardItem","itemPropName","generateUid","content","acUpdateDashboardItem","acRemoveDashboardItem","arrayToIdMap","acSetDashboardStarred","tFetchDashboards","collection","paging","toArray","userRows","sGetControlBarUserRows","controlBar","sGetControlBarRoot","KEY","hasNamespace","currentUser","dataStore","has","getNamespace","apiGetControlBarRows","_callee3","namespace","_context3","t1","t2","key","apiPostControlBarRows","_callee4","rows","_context4","set","acSetControlBarUserRows","DEFAULT_DIMENSIONS","pe","FIXED_DIMENSIONS","ou","sGetDimensions","dimensions","DEFAULT_SETTINGS","keyDateFormat","keyAnalysisRelativePeriod","keyAnalysisDigitGroupSeparator","displayNameProperty","rootOrganisationUnit","sGetSettings","settings","sGetSettingsDisplayNameProperty","acSetDimensions","keyBy","sortBy","toLowerCase","StarIcon","className","xmlns","viewBox","fill","apiPostDataStatistics","eventType","styles","chip","margin","color","colors","grey600","display","textDecoration","verticalAlign","icon","marginTop","white","unselected","grey900","withStyles","label","classes","chipProps","selectedState","Star","Link","to","onClick","debounce","Chip","AddCircleIcon","teal600","ownerData","DEFAULT_STATE_DASHBOARDS_FILTER_NAME","DEFAULT_STATE_DASHBOARDS_FILTER_OWNER","order","sGetDashboardsFilterRoot","dashboardsFilter","sGetFilterName","KEYCODE_ENTER","KEYCODE_ESCAPE","filterField","fontSize","top","filterFieldInput","left","filterFieldUnderline","bottom","filterFieldUnderlineFocus","borderColor","borderWidth","clearButton","padding","clearButtonIcon","Filter","_Component","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setFilterValue","event","preventDefault","onChangeName","target","handleKeyUp","keyCode","onKeypressEnter","inherits","createClass","nextProps","setState","TextField_default","onChange","onKeyUp","hintText","inputStyle","hintStyle","filterFieldHint","underlineStyle","underlineFocusStyle","Component","defaultProps","Function","prototype","ClearButton","disabled","IconButton_default","opacity","iconStyle","Clear_default","ControlBar_Filter","react","Filter_Filter","Filter_ClearButton","showMore","cursor","paddingTop","textTransform","visibility","isMaxHeight","textAlign","MIN_ROW_COUNT","getRowsHeight","getNumRowsFromHeight","FIRST_ROW_PADDING_HEIGHT","getTopOffset","getControlBarHeight","expandable","flapHeight","END_FLAP_HEIGHT","MAX_ROW_COUNT","DashboardsBar","_getPrototypeOf2","_len","args","Array","_key","setInitialDashboardState","onChangeHeight","newHeight","newRows","newRowCount","min","onEndDrag","onToggleMaxHeight","onSelectDashboard","history","push","_this$props","selectedId","onChangeFilterName","rowCount","controlBarHeight","contentWrapperStyle","overflowY","ControlBar_default","editMode","marginRight","AddCircle","ControlBar_DashboardItemChip","ControlBar_ShowMoreButton","mapDispatchToProps","withRouter","stateProps","dispatchProps","ownProps","displayDashboards","singleItems","header","listItems","title","ItemSelectList","addItem","tAddListItemContent","newItem","match","toggleSeeMore","seeMore","onChangeItemsLimit","_this2","justifyContent","paddingLeft","Button_default","Divider_default","List","itemUrl","context","ItemIcon","leftIcon","innerDivStyle","hoverColor","primaryText","alignItems","marginLeft","rel","href","Launch_default","contextTypes","PropTypes","object","isRequired","dashboardItem","listItemType","dashboardItemIndex","findIndex","SingleItem","onAddToDashboard","category","addToDashboard","ItemSelectSingle_SingleItem","searchIcon","ItemSearchField","Search_default","fullWidth","ItemSelect","closeList","openList","fetchItems","anchorEl","currentTarget","setFilter","getListItems","itemType","ItemSelect_ItemSelectList","popoverChildren","SingleItems","ItemSelect_ItemSelectSingle","maxOption","api","queryString","maxOptions","add","Set","ItemSelect_ItemSearchField","Popover_default","anchorOrigin","horizontal","vertical","transformOrigin","PaperProps","disableAutoFocus","disableRestoreFocus","React","EditTitleBar","onChangeTitle","onChangeDescription","titleStyle","section","titleDescription","text_field_TextField_default","multiline","rowsMax","placeholder","itemSelect","components_ItemSelect_ItemSelect","selectedDashboard","flex","minWidth","maxWidth","position","peId","ouId","FilterDialog","onConfirm","dimension","selectedItems","dialogId","commonProps","onSelect","onDeselect","onReorder","build","selectedPeriods","ouItems","dialogTitle","_this$props2","Dialog_default","disableEnforceFocus","dialogContent","DialogActions_default","es_Button","kind","DEFAULT_STATE_ACTIVE_MODAL_DIMENSION","sGetActiveModalDimension","activeModalDimension","acSetActiveModalDimension","FilterSelector","openPanel","closePanel","closeDialog","clearActiveModalDimension","selectDimension","setActiveModalDimension","onSelectItems","dimensionId","setEditItemFilters","onDeselectItems","itemIdsToRemove","newList","removeEditItemFilter","onReorderItems","itemIds","oldList","reorderedList","saveFilter","filterItems","addItemFilter","removeItemFilter","theme","selectedDimensions","ArrowDropDown_default","Boolean","fontFamily","typography","onDimensionClick","selectedIds","ItemFilter_FilterDialog","filters","withTheme","Info","show","toggle","InfoOutlined_default","NO_DESCRIPTION","actions","starIcon","textButton","editLink","titleBar","titleBarIcon","ViewTitleBar","toggleSharingDialog","sharingDialogIsOpen","onStarClick","onInfoClick","userSelect","StarBorder","TitleBar_Info","update","manage","ItemFilter_FilterSelector","paddingBottom","d2_ui_sharing_dialog_default","onRequestClose","tStarDashboard","TitleBar","edit","TitleBar_EditTitleBar","TitleBar_ViewTitleBar","DefaultPlugin","pluginCredentials","shouldPluginReload","prevProps","reloadAllowed","filtersChanged","vis","prevVis","visChanged","reloadPlugin","pluginManager","currentVis","useActiveType","getActiveType","defaultHeaders","Authorization","textDiv","HEADER_HEIGHT","ItemHeader","actionButtons","scrollContainer","line","border","backgroundColor","ItemFooter","objectId","d2_ui_interpretations_default","ItemHeaderButton","children","iconBase","buttonBase","buttonDisabled","toggleFooterPadding","borderRadius","baseStyle","container","disabledStyle","activeStyle","inactiveStyle","getItemTypeId","VisualizationItemHeaderButtons","onSelectVisualization","activeFooter","onToggleFooter","toggleFooterBase","toggleFooter","tableButtonStyle","tableBtnStyle","chartButtonStyle","chartBtnStyle","mapButtonStyle","mapBtnStyle","components_Item_ItemHeaderButton","Message_default","ViewList_default","InsertChart_default","Public_default","memoizeOne","fn","lastArgs","lastValue","every","arg","overflow","textOverflow","whiteSpace","fontStretch","lineHeight","applyFilters","visRows","obj","visColumns","columns","visFilters","dimensionFound","dimensionObjects","Item","showFooter","configLoaded","getUniqueKey","uniqueId","getPluginComponent","getContentStyle","data_visualizer_plugin_build","forDashboard","VisualizationItem_DefaultPlugin","onToggleItemExpanded","getTitle","itemName","getActionButtons","ItemHeaderButtons","contentRef","offsetHeight","createRef","_componentDidMount","onVisualizationLoaded","_this$props3","Item_ItemHeader","ref","VisualizationItem_ItemFooter","acReceivedActiveVisualization","Line","PRIVATE","messageTypes","_messageTypes","listStyleType","seeAll","marginBottom","sender","snippet","maxHeight","MessagesItem","getMessageHref","msgIdentifier","messageType","getMessageSender","latestMsg","slice","getMessageItems","editClass","readClass","read","msgDate","location","messageCount","formatDate","userSettings","widgets_Line","string","MessagesContainer","NotSupportedItem","NotInterested_default","align","grey500","DeleteIcon","red500","getItemTitle","removeContent","handler","contentToRemove","ListItem","tRemoveListItemContent","contentItems","array","getContentItems","contentItem","Description","deleteButton","Delete","newContent","textField","onChangeText","updatedItem","d2_ui_rich_text","onEdit","textDivStyle","viewItem","getIframeSrc","appDetails","iframeSrc","ouIds","ouPath","AppItem","appKey","system","installedApps","app","src","SpacerItem","GridItem","VisualizationItem","TextItem","getGridItem","button","right","zIndex","DeleteItemHeaderButton","Delete_default","modal","pointerEvents","dark","ModalLoadingMask","LoadingMask_component_default","NoContentMessage","ProgressiveLoadingContainer","shouldLoad","containerRef","shouldLoadHandler","bufferPx","bufferFactor","window","innerHeight","rect","getBoundingClientRect","removeHandler","checkShouldLoad","debounceMs","addEventListener","removeEventListener","registerHandler","_this3","objectWithoutProperties","ItemGrid","expandedItems","NO_ITEMS_MESSAGE","clickedId","isExpanded","onRemoveItem","onLayoutChange","newLayout","acUpdateDashboardLayout","onResizeStop","layout","oldItem","pluginResize","onRemoveItemWrapper","widgets_NoContentMessage","expandedItem","hProp","minH","widgets_ModalLoadingMask","react_grid_layout_default","cols","rowHeight","innerWidth","compactType","isDraggable","isResizable","draggableCancel","itemClassNames","Item_ProgressiveLoadingContainer","DeleteItemButton","Item_Item_Item","validItems","badgeContainer","badge","badgeRemove","FilterBadge","onRemove","count","FilterBar","onBadgeRemove","onBadgeClick","bar","FilterBar_FilterBadge","removeItemFIlter","filtersSelector","createSelector","reduce","arr","flexWrap","DashboardContent","components_TitleBar_TitleBar","components_FilterBar_FilterBar","components_ItemGrid_ItemGrid","Content","hasDashboardContent","dashboardsIsEmpty","Dashboard_DashboardContent","dashboardsLoaded","contentNotReady","ControlBar_DashboardsBar","Dashboard_DashboardVerticalOffset","ViewDashboard_Content","ConfirmDeleteDialog","onDeleteConfirmed","onContinueEditing","secondary","destructive","DialogTitle_default","DialogContent_default","DialogContentText_default","buttonBarStyle","EditBar","translationDialogIsOpen","dashboardModel","confirmDeleteDialogOpen","redirectUrl","onConfirmDelete","onSave","newId","onDiscard","onDiscardChanges","onDelete","onTranslationsSaved","translations","dbLocale","translation","locale","property","onTranslate","fetchDashboardModel","toggleTranslationDialog","confirmDeleteDialog","deleteAccess","ControlBar_ConfirmDeleteDialog","translationDialog","d2_ui_translation_dialog_default","objectToTranslate","fieldsToTranslate","onTranslationSaved","onTranslationError","err","Redirect","updateAccess","discardBtnText","primary","sGetIsNewDashboard","dashboardToSave","_x6","_x7","tDeleteDashboard","acSetDashboardDisplayName","EditDashboard","initialized","initEditDashboard","setEditDashboard","getDashboardContent","EditDashboard_Content","ControlBar_EditBar","NewDashboard","setNewDashboard","Dashboard","setDashboard","params","selectDashboard","scrollToTop","scrollTo","mode","Dashboard_EditDashboard","Dashboard_NewDashboard","Dashboard_ViewDashboard","dashboardToSelect","preferredId","getItem","App","setCurrentUser","fetchDashboards","setControlBarRows","setDimensions","HeaderBar_default","HashRouter","Switch","Route","exact","path","render","components_Dashboard_Dashboard","components_SnackbarMessage_SnackbarMessage","childContextTypes","controlBarRows","displayNameProp","filteredDimensions","apiFetchDimensions","dim","dimensionType","dataDimensionType","tSetDimensions","moment","addResources","enTranslations","loTranslations","svTranslations","urTranslations","viTranslations","setDefaultNamespace","changeLanguage","objectClean","conversations","$merge","d2Object","keyUiLocale","authorities","newState","k","$unshift","idToRemove","$splice","stateItems","newStateItems","stateItem","si","$set","configureStore","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducer","applyMiddleware","muiTheme","raisedButton","primaryColor","disabledColor","disabledTextColor","getMuiTheme","configI18n","sources","manifest","isProd","getManifest","info","version","manifest_generated_at","process","activities","dhis","dhis2","apiVersion","headers","schemas","getUserSettings","d2Init","initializedD2","ReactDOM","es","store","createMuiTheme","dhis2theme","index_es","src_components_App","getElementById","init","param","isArray","Intl","DateTimeFormat","year","month","day","format","Date","replace","defaultValue","idx","indexOf","_home_travis_build_dhis2_dashboards_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"static/js/main.87031ea5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Item_list__2oHc1\",\"item\":\"Item_item__lO40M\",\"itemicon\":\"Item_itemicon__dv5ah\",\"link\":\"Item_link__2gULT\",\"deleteicon\":\"Item_deleteicon__3c7bl\",\"deletebutton\":\"Item_deletebutton__1DfY5\"};","import i18n from '@dhis2/d2-i18n';\nimport TableIcon from '@material-ui/icons/ViewList';\nimport ChartIcon from '@material-ui/icons/InsertChart';\nimport MapIcon from '@material-ui/icons/Public';\nimport ExtensionIcon from '@material-ui/icons/Extension';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport PersonIcon from '@material-ui/icons/Person';\nimport FontDownloadIcon from '@material-ui/icons/FontDownload';\nimport EmailIcon from '@material-ui/icons/Email';\nimport CropFreeIcon from '@material-ui/icons/CropFree';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\n\nimport { getBaseUrl } from './util';\n\n// Item types\nexport const REPORT_TABLE = 'REPORT_TABLE';\nexport const CHART = 'CHART';\nexport const MAP = 'MAP';\nexport const EVENT_REPORT = 'EVENT_REPORT';\nexport const EVENT_CHART = 'EVENT_CHART';\nexport const APP = 'APP';\nexport const REPORTS = 'REPORTS';\nexport const RESOURCES = 'RESOURCES';\nexport const USERS = 'USERS';\nexport const MESSAGES = 'MESSAGES';\nexport const TEXT = 'TEXT';\nexport const SPACER = 'SPACER';\n\n// Domain types\nexport const DOMAIN_TYPE_AGGREGATE = 'AGGREGATE';\nexport const DOMAIN_TYPE_TRACKER = 'TRACKER';\n\n// Visualization types\nexport const VISUALIZATION_TYPE_TABLE = 'TABLE';\nexport const VISUALIZATION_TYPE_CHART = 'CHART';\nexport const VISUALIZATION_TYPE_MAP = 'MAP';\n\nexport const spacerContent = 'SPACER_ITEM_FOR_DASHBOARD_LAYOUT_CONVENIENCE';\nexport const emptyTextItemContent = 'TEXT_ITEM_WITH_NO_CONTENT';\nexport const isSpacerType = item =>\n    item.type === TEXT && item.text === spacerContent;\nexport const isTextType = item =>\n    item.type === TEXT && item.text !== spacerContent;\nexport const isPluginType = item =>\n    itemTypeMap[item.type].hasOwnProperty('plugin');\n\nexport const getPlugin = type => {\n    const pluginName = itemTypeMap[type].plugin;\n\n    if (type === CHART) {\n        return true;\n    }\n\n    return global[pluginName];\n};\n\n// Item type map\nexport const itemTypeMap = {\n    [REPORT_TABLE]: {\n        id: REPORT_TABLE,\n        endPointName: 'reportTables',\n        propName: 'reportTable',\n        countName: 'reportTableCount',\n        pluralTitle: i18n.t('Pivot tables'),\n        plugin: 'reportTablePlugin',\n        domainType: DOMAIN_TYPE_AGGREGATE,\n        visualizationType: VISUALIZATION_TYPE_TABLE,\n        appUrl: id => `dhis-web-pivot/?id=${id}`,\n        appName: i18n.t('Pivot Tables'),\n    },\n    [CHART]: {\n        id: CHART,\n        endPointName: 'charts',\n        propName: 'chart',\n        countName: 'chartCount',\n        pluralTitle: i18n.t('Charts'),\n        plugin: 'chartPlugin',\n        domainType: DOMAIN_TYPE_AGGREGATE,\n        visualizationType: VISUALIZATION_TYPE_CHART,\n        appUrl: id => `dhis-web-data-visualizer/#/${id}`,\n        appName: i18n.t('Visualizer'),\n    },\n    [MAP]: {\n        id: MAP,\n        endPointName: 'maps',\n        propName: 'map',\n        countName: 'mapCount',\n        pluralTitle: i18n.t('Maps'),\n        plugin: 'mapPlugin',\n        domainType: DOMAIN_TYPE_AGGREGATE,\n        visualizationType: VISUALIZATION_TYPE_MAP,\n        appUrl: id => `dhis-web-maps/?id=${id}`,\n        appName: i18n.t('Maps'),\n    },\n    [EVENT_REPORT]: {\n        id: EVENT_REPORT,\n        endPointName: 'eventReports',\n        propName: 'eventReport',\n        countName: 'eventReportCount',\n        pluralTitle: i18n.t('Event reports'),\n        plugin: 'eventReportPlugin',\n        domainType: DOMAIN_TYPE_TRACKER,\n        visualizationType: VISUALIZATION_TYPE_TABLE,\n        appUrl: id => `dhis-web-event-reports/?id=${id}`,\n        appName: i18n.t('Event Reports'),\n    },\n    [EVENT_CHART]: {\n        id: EVENT_CHART,\n        endPointName: 'eventCharts',\n        propName: 'eventChart',\n        countName: 'eventChartCount',\n        pluralTitle: i18n.t('Event charts'),\n        plugin: 'eventChartPlugin',\n        domainType: DOMAIN_TYPE_TRACKER,\n        visualizationType: VISUALIZATION_TYPE_CHART,\n        appUrl: id => `dhis-web-event-visualizer/?id=${id}`,\n        appName: i18n.t('Event Visualizer'),\n    },\n    [APP]: {\n        endPointName: 'apps',\n        propName: 'appKey',\n        countName: 'appCount',\n        pluralTitle: 'Apps',\n    },\n    [REPORTS]: {\n        id: REPORTS,\n        endPointName: 'reports',\n        propName: 'reports',\n        countName: 'reportCount',\n        pluralTitle: i18n.t('Reports'),\n        appUrl: id =>\n            `dhis-web-reporting/getReportParams.action?mode=report&uid=${id}`,\n    },\n    [RESOURCES]: {\n        id: RESOURCES,\n        endPointName: 'resources',\n        propName: 'resources',\n        countName: 'resourceCount',\n        pluralTitle: i18n.t('Resources'),\n        appUrl: id => `api/documents/${id}/data`,\n    },\n    [USERS]: {\n        id: USERS,\n        endPointName: 'users',\n        propName: 'users',\n        countName: 'userCount',\n        pluralTitle: i18n.t('Users'),\n        appUrl: id => `dhis-web-dashboard-integration/profile.action?id=${id}`,\n    },\n    [TEXT]: {\n        id: TEXT,\n        propName: 'text',\n    },\n    [MESSAGES]: {\n        propName: 'messages',\n    },\n    [SPACER]: {\n        propName: 'text',\n    },\n};\n\nexport const getItemUrl = (type, item, d2) => {\n    let url;\n\n    if (type === APP) {\n        url = item.launchUrl;\n    }\n\n    if (itemTypeMap[type] && itemTypeMap[type].appUrl) {\n        url = `${getBaseUrl(d2)}/${itemTypeMap[type].appUrl(item.id)}`;\n    }\n\n    return url;\n};\n\nexport const getItemIcon = type => {\n    switch (type) {\n        case REPORT_TABLE:\n        case EVENT_REPORT:\n        case REPORTS:\n            return TableIcon;\n        case CHART:\n        case EVENT_CHART:\n            return ChartIcon;\n        case MAP:\n            return MapIcon;\n        case APP:\n            return ExtensionIcon;\n        case RESOURCES:\n            return DescriptionIcon;\n        case USERS:\n            return PersonIcon;\n        case TEXT:\n            return FontDownloadIcon;\n        case MESSAGES:\n            return EmailIcon;\n        case SPACER:\n            return CropFreeIcon;\n        default:\n            return NotInterestedIcon;\n    }\n};\n","export const RECEIVED_USER = 'RECEIVED_USER';\n\nexport const DEFAULT_STATE_USER = {\n    id: '',\n    username: '',\n    uiLocale: '',\n    isSuperuser: false,\n};\n\nexport default (state = DEFAULT_STATE_USER, action) => {\n    switch (action.type) {\n        case RECEIVED_USER: {\n            return fromD2ToUserObj(action.value);\n        }\n        default:\n            return state;\n    }\n};\n\nfunction fromD2ToUserObj(d2Object) {\n    return {\n        id: d2Object.id,\n        username: d2Object.username,\n        uiLocale: d2Object.settings.keyUiLocale,\n        isSuperuser: d2Object.authorities.has('ALL'),\n    };\n}\n\n// selectors\n\nexport const sGetUserId = state => state.user.id;\nexport const sGetUserUsername = state => state.user.username;\nexport const sGetIsSuperuser = state => state.user.isSuperuser;\nexport const sGetUiLocale = state => state.user.uiLocale;\n","/** @module reducers/dashboards */\n\nimport arrayFrom from 'd2-utilizr/lib/arrayFrom';\nimport arraySort from 'd2-utilizr/lib/arraySort';\n\nimport { orArray, orObject } from '../modules/util';\nimport {\n    SPACER,\n    isSpacerType,\n    isTextType,\n    emptyTextItemContent,\n} from '../modules/itemTypes';\n\nexport const SET_DASHBOARDS = 'SET_DASHBOARDS';\nexport const ADD_DASHBOARDS = 'ADD_DASHBOARDS';\nexport const SET_DASHBOARD_STARRED = 'SET_DASHBOARD_STARRED';\nexport const SET_DASHBOARD_DISPLAY_NAME = 'SET_DASHBOARD_DISPLAY_NAME';\nexport const SET_DASHBOARD_ITEMS = 'SET_DASHBOARD_ITEMS';\n\nexport const DEFAULT_STATE_DASHBOARDS = {\n    byId: null,\n    items: [],\n};\n\n// reducer helper functions\n\nconst updateDashboardProp = (state, dashboardId, prop, value) => ({\n    byId: {\n        ...state.byId,\n        [dashboardId]: {\n            ...state.byId[dashboardId],\n            [prop]: value,\n        },\n    },\n    items: state.items,\n});\n\n/**\n * Reducer that computes and returns the new state based on the given action\n * @function\n * @param {Object} state The current state\n * @param {Object} action The action to be evaluated\n * @returns {Object}\n */\nexport default (state = DEFAULT_STATE_DASHBOARDS, action) => {\n    switch (action.type) {\n        case SET_DASHBOARDS: {\n            return {\n                byId: action.value,\n                items: [],\n            };\n        }\n        case ADD_DASHBOARDS: {\n            return {\n                ...state,\n                byId: {\n                    ...state.byId,\n                    ...action.value,\n                },\n            };\n        }\n        case SET_DASHBOARD_STARRED: {\n            return updateDashboardProp(\n                state,\n                action.dashboardId,\n                'starred',\n                action.value\n            );\n        }\n        case SET_DASHBOARD_DISPLAY_NAME: {\n            return updateDashboardProp(\n                state,\n                action.dashboardId,\n                'displayName',\n                action.value\n            );\n        }\n        case SET_DASHBOARD_ITEMS: {\n            return {\n                ...state,\n                items: action.value,\n            };\n        }\n        default:\n            return state;\n    }\n};\n\n// root selector\n\nexport const sGetDashboardsRoot = state => state.dashboards;\n\n// selector level 1\n\n/**\n * Selector which returns a dashboard by id from the state object\n * If no matching dashboard is found it returns undefined\n * If dashboards.byId is null, then the dashboards api request\n * has not yet completed. If dashboards.byId is an empty object\n * then the dashboards api request is complete, but no dashboards\n * were returned\n *\n * @function\n * @param {Object} state The current state\n * @param {Number} id The id of the dashboard\n * @returns {Object | undefined}\n */\nexport const sGetDashboardById = (state, id) =>\n    orObject(sGetDashboardsRoot(state).byId)[id];\n\nexport const sDashboardsIsFetching = state => {\n    return sGetDashboardsRoot(state).byId === null;\n};\n\n/**\n * Selector which returns all dashboards (the byId object)\n *\n * @function\n * @param {Object} state The current state\n * @returns {Object | undefined}\n */\nexport const sGetAllDashboards = state =>\n    orObject(sGetDashboardsRoot(state).byId);\n\n/**\n * Selector which returns the current dashboard items\n *\n * @function\n * @param {Object} state The current state\n * @returns {Array}\n */\nexport const sGetDashboardItems = state => sGetDashboardsRoot(state).items;\n\n// selector level 2\n\nexport const sGetStarredDashboards = state =>\n    Object.values(sGetAllDashboards(state)).filter(\n        dashboard => dashboard.starred === true\n    );\n\nexport const sGetUnstarredDashboards = state =>\n    Object.values(sGetAllDashboards(state)).filter(\n        dashboard => dashboard.starred === false\n    );\n\n// selector level 3\n\nexport const sGetStarredDashboardIds = state => {\n    return sGetStarredDashboards(state).map(dashboard => dashboard.id);\n};\n\nexport const sGetUnstarredDashboardIds = state =>\n    sGetUnstarredDashboards(state).map(dashboard => dashboard.id);\n\nexport const sGetDashboardsSortedByStarred = state => [\n    ...arraySort(sGetStarredDashboards(state), 'ASC', 'displayName'),\n    ...arraySort(sGetUnstarredDashboards(state), 'ASC', 'displayName'),\n];\n\n// utils\n\n/**\n * Returns the array of dashboards, customized for ui\n * @function\n * @param {Array} data The original dashboard list\n * @returns {Array}\n */\nexport const getCustomDashboards = data => {\n    const uiItems = items =>\n        items.map(item => {\n            const type = isSpacerType(item) ? SPACER : item.type;\n            const text = isTextType(item)\n                ? item.text === emptyTextItemContent\n                    ? ''\n                    : item.text\n                : null;\n\n            return {\n                ...item,\n                ...(text !== null ? { text } : {}),\n                type,\n            };\n        });\n\n    return arrayFrom(data).map((d, index) => ({\n        id: d.id,\n        name: d.name,\n        displayName: d.displayName,\n        description: d.description,\n        displayDescription: d.displayDescription,\n        starred: d.favorite,\n        owner: d.user.name,\n        created: d.created\n            .split('T')\n            .join(' ')\n            .substr(0, 16),\n        lastUpdated: d.lastUpdated\n            .split('T')\n            .join(' ')\n            .substr(0, 16),\n        access: d.access,\n        numberOfItems: orArray(d.dashboardItems).length,\n        dashboardItems: uiItems(d.dashboardItems),\n    }));\n};\n","/** @module reducers/selected */\nimport { combineReducers } from 'redux';\n\nimport { validateReducer } from '../modules/util';\n\nexport const SET_SELECTED_ID = 'SET_SELECTED_ID';\nexport const SET_SELECTED_ISLOADING = 'SET_SELECTED_ISLOADING';\nexport const SET_SELECTED_SHOWDESCRIPTION = 'SET_SELECTED_SHOWDESCRIPTION';\n\nexport const DEFAULT_STATE_SELECTED_ID = null;\nexport const DEFAULT_STATE_SELECTED_ISLOADING = false;\nexport const DEFAULT_STATE_SELECTED_SHOWDESCRIPTION = false;\n\n/**\n * Reducer functions that computes and returns the new state based on the given action\n * @function\n * @param {Object} state The current state\n * @param {Object} action The action to be evaluated\n */\nconst id = (state = DEFAULT_STATE_SELECTED_ID, action) => {\n    switch (action.type) {\n        case SET_SELECTED_ID:\n            return validateReducer(action.value, DEFAULT_STATE_SELECTED_ID);\n        default:\n            return state;\n    }\n};\n\nconst isLoading = (state = DEFAULT_STATE_SELECTED_ISLOADING, action) => {\n    switch (action.type) {\n        case SET_SELECTED_ISLOADING:\n            return validateReducer(\n                action.value,\n                DEFAULT_STATE_SELECTED_ISLOADING\n            );\n        default:\n            return state;\n    }\n};\n\nconst showDescription = (\n    state = DEFAULT_STATE_SELECTED_SHOWDESCRIPTION,\n    action\n) => {\n    switch (action.type) {\n        case SET_SELECTED_SHOWDESCRIPTION:\n            return validateReducer(\n                action.value,\n                DEFAULT_STATE_SELECTED_SHOWDESCRIPTION\n            );\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    id,\n    isLoading,\n    showDescription,\n});\n\n// Selectors\n\nexport const sGetSelectedRoot = state => state.selected;\n\nexport const sGetSelectedId = state => sGetSelectedRoot(state).id;\n\nexport const sGetSelectedIsLoading = state => sGetSelectedRoot(state).isLoading;\n\nexport const sGetSelectedShowDescription = state =>\n    sGetSelectedRoot(state).showDescription;\n","import { orObject } from '../modules/util';\nimport objectClean from 'd2-utilizr/lib/objectClean';\n\n/** @module reducers/visualizations */\n\nexport const RECEIVED_VISUALIZATION = 'RECEIVED_VISUALIZATION';\nexport const RECEIVED_ACTIVE_VISUALIZATION = 'RECEIVED_ACTIVE_VISUALIZATION';\n\nexport const DEFAULT_STATE_VISUALIZATIONS = {};\n\nconst isEmpty = p => p === undefined || p === null;\n\nexport default (state = DEFAULT_STATE_VISUALIZATIONS, action) => {\n    switch (action.type) {\n        case RECEIVED_VISUALIZATION: {\n            return {\n                ...state,\n                [action.value.id]: objectClean(\n                    {\n                        ...orObject(state[action.value.id]),\n                        ...action.value,\n                    },\n                    isEmpty\n                ),\n            };\n        }\n        case RECEIVED_ACTIVE_VISUALIZATION: {\n            return {\n                ...state,\n                [action.id]: objectClean(\n                    {\n                        ...orObject(state[action.id]),\n                        activeType: action.activeType,\n                    },\n                    isEmpty\n                ),\n            };\n        }\n        default:\n            return state;\n    }\n};\n\n// root selector\nexport const sGetVisualizationsRoot = state => state.visualizations;\n\n// selectors level 1\nexport const sGetVisualization = (state, id) => {\n    return sGetVisualizationsRoot(state)[id];\n};\n","import { getInstance } from 'd2';\nimport arrayClean from 'd2-utilizr/lib/arrayClean';\n\nimport { getEndPointName } from './index';\n\n// Id, name\nexport const getIdNameFields = ({ rename } = {}) => [\n    'id',\n    `${rename ? 'displayName~rename(name)' : 'name,displayName'}`,\n];\n\n// Item\nexport const getItemFields = () => [\n    'dimensionItem~rename(id)',\n    'displayName~rename(name)',\n    'dimensionItemType',\n];\n\n// Dimension\nexport const getDimensionFields = ({ withItems }) =>\n    arrayClean([\n        'dimension',\n        'legendSet[id]',\n        'filter',\n        withItems ? `items[${getItemFields().join(',')}]` : ``,\n    ]);\n\n// Axis\nexport const getAxesFields = ({ withItems }) => [\n    `columns[${getDimensionFields({ withItems }).join(',')}]`,\n    `rows[${getDimensionFields({ withItems }).join(',')}]`,\n    `filters[${getDimensionFields({ withItems }).join(',')}]`,\n];\n\n// Favorite\nexport const getFavoriteFields = ({ withDimensions, withOptions }) => {\n    return arrayClean([\n        `${getIdNameFields({ rename: true }).join(',')}`,\n        'displayDescription~rename(description)',\n        withDimensions ? `${getAxesFields({ withItems: true }).join(',')}` : ``,\n        withOptions\n            ? [\n                  '*',\n                  '!attributeDimensions',\n                  '!attributeValues',\n                  '!category',\n                  '!categoryDimensions',\n                  '!categoryOptionGroupSetDimensions',\n                  '!columnDimensions',\n                  '!dataDimensionItems',\n                  '!dataElementDimensions',\n                  '!dataElementGroupSetDimensions',\n                  '!filterDimensions',\n                  '!itemOrganisationUnitGroups',\n                  '!lastUpdatedBy',\n                  '!organisationUnitGroupSetDimensions',\n                  '!organisationUnitLevels',\n                  '!organisationUnits',\n                  '!programIndicatorDimensions',\n                  '!relativePeriods',\n                  '!reportParams',\n                  '!rowDimensions',\n                  '!series',\n                  '!translations',\n                  '!userOrganisationUnit',\n                  '!userOrganisationUnitChildren',\n                  '!userOrganisationUnitGrandChildren',\n              ].join(',')\n            : '',\n    ]);\n};\n\nexport const getFavoritesFields = ({ withDimensions, withOptions }) => [\n    `reportTable[${getFavoriteFields({ withDimensions }).join(',')}]`,\n    `chart[${['type', ...getFavoriteFields({ withDimensions })].join(',')}]`,\n    `map[${getFavoriteFields({ withDimensions }).join(',')}]`,\n    `eventReport[${getFavoriteFields({ withDimensions }).join(',')}]`,\n    `eventChart[${getFavoriteFields({ withDimensions }).join(',')}]`,\n];\n\n// List item\nexport const getListItemFields = () => [\n    `reports[${getIdNameFields({ rename: true }).join(',')}]`,\n    `resources[${getIdNameFields({ rename: true }).join(',')}]`,\n    `users[${getIdNameFields({ rename: true }).join(',')}]`,\n];\n\n// Map\nexport const getMapFields = () => [\n    `${getIdNameFields({ rename: true }).join(',')}`,\n    'user,longitude,latitude,zoom,basemap',\n    `mapViews[${getFavoriteFields({\n        withDimensions: true,\n        withOptions: true,\n    })}]`,\n];\n\n// Api\n\n// Get more info about the favorite of a dashboard item\nexport const apiFetchFavorite = (id, type, { fields }) =>\n    getInstance().then(d2 =>\n        d2.Api.getApi().get(`${getEndPointName(type)}/${id}`, {\n            fields:\n                fields ||\n                getFavoriteFields({\n                    withDimensions: true,\n                    withOptions: true,\n                }),\n        })\n    );\n","import arrayClean from 'd2-utilizr/lib/arrayClean';\nimport { itemTypeMap } from '../modules/itemTypes';\nimport {\n    getListItemFields,\n    getFavoritesFields,\n    getIdNameFields,\n} from './metadata';\n\n// Helper functions\n\nexport const onError = error => console.log('Error: ', error);\n\nexport const getEndPointName = type => itemTypeMap[type].endPointName;\n\n// Dashboard item\nexport const getDashboardItemsFields = ({ withFavorite } = {}) =>\n    arrayClean([\n        'id',\n        'type',\n        'shape',\n        'x',\n        'y',\n        'width~rename(w)',\n        'height~rename(h)',\n        'messages',\n        'text',\n        'appKey',\n        `${getListItemFields().join(',')}`,\n        withFavorite\n            ? `${getFavoritesFields({\n                  withDimensions: withFavorite.withDimensions,\n              }).join(',')}`\n            : ``,\n    ]);\n\n// Dashboard\nexport const getDashboardFields = ({ withItems, withFavorite } = {}) =>\n    arrayClean([\n        `${getIdNameFields().join(',')}`,\n        'description',\n        'displayDescription',\n        'favorite',\n        `user[${getIdNameFields({ rename: true }).join(',')}]`,\n        'created',\n        'lastUpdated',\n        'access',\n        withItems\n            ? `dashboardItems[${getDashboardItemsFields({\n                  withFavorite,\n              }).join(',')}]`\n            : ``,\n    ]);\n","import { getInstance } from 'd2';\nimport arrayClean from 'd2-utilizr/lib/arrayClean';\nimport { onError, getDashboardFields } from './index';\n\n// Get \"all\" dashboards on startup\nexport const apiFetchDashboards = () =>\n    getInstance()\n        .then(d2 =>\n            d2.models.dashboard.list({\n                fields: [\n                    getDashboardFields().join(','),\n                    'dashboardItems[id]',\n                ].join(','),\n                paging: 'false',\n            })\n        )\n        .catch(onError);\n\n// Get more info about selected dashboard\nexport const apiFetchDashboard = id =>\n    getInstance()\n        .then(d2 =>\n            d2.models.dashboard.get(id, {\n                fields: arrayClean(\n                    getDashboardFields({\n                        withItems: true,\n                        withFavorite: { withDimensions: false },\n                    })\n                ).join(','),\n            })\n        )\n        .catch(onError);\n\n// Star dashboard\nexport const apiStarDashboard = (id, isStarred) => {\n    const url = `dashboards/${id}/favorite`;\n\n    getInstance().then(d2 => {\n        if (isStarred) {\n            d2.Api.getApi().post(url);\n        } else {\n            d2.Api.getApi().delete(url);\n        }\n    });\n};\n\nexport const apiDeleteDashboard = id => {\n    return getInstance()\n        .then(d2 => {\n            return d2.models.dashboards\n                .get(id)\n                .then(dashboard => dashboard.delete());\n        })\n        .catch(onError);\n};\n","import isFunction from 'd2-utilizr/lib/isFunction';\n\nimport { orObject } from '../../modules/util';\n\n// Dimensions for the react-grid-layout\n\nexport const GRID_COMPACT_TYPE = 'vertical'; // vertical | horizonal | null\nexport const GRID_ROW_HEIGHT = 10;\nconst GRID_COLUMN_WIDTH_PX = 20;\nconst GRID_LAYOUT = 'FLEXIBLE'; // FIXED | FLEXIBLE\nexport const MARGIN = [10, 10];\n\nexport const NEW_ITEM_SHAPE = { x: 0, y: 0, w: 20, h: 29 };\nexport const ITEM_MIN_HEIGHT = 4;\n\n// Dimensions for getShape\n\nconst NUMBER_OF_ITEM_COLS = 2;\nconst GRID_COLUMNS = 60;\n\nexport const getGridColumns = () => {\n    switch (GRID_LAYOUT) {\n        case 'FLEXIBLE':\n            return GRID_COLUMNS;\n        case 'FIXED':\n            return Math.floor((window.innerWidth - 20) / GRID_COLUMN_WIDTH_PX);\n        default:\n            return GRID_COLUMNS;\n    }\n};\n\n// isNonNegativeInteger\n\nconst isNonNegativeInteger = x => Number.isInteger(x) && x >= 0;\n\n// Does the item have all the shape properties?\n\nexport const hasShape = item =>\n    isNonNegativeInteger(item.x) &&\n    isNonNegativeInteger(item.y) &&\n    isNonNegativeInteger(item.w) &&\n    isNonNegativeInteger(item.h);\n\n// returns a rectangular grid block dimensioned with x, y, w, h in grid units.\n// based on a grid with 3 items across\nexport const getShape = i => {\n    if (!isNonNegativeInteger(i)) {\n        throw new Error('Invalid grid block number');\n    }\n\n    const col = i % NUMBER_OF_ITEM_COLS;\n    const row = Math.floor(i / NUMBER_OF_ITEM_COLS);\n    const itemWidth = Math.floor((GRID_COLUMNS - 1) / NUMBER_OF_ITEM_COLS);\n    const itemHeight = GRID_ROW_HEIGHT * 2;\n\n    return {\n        x: col * itemWidth,\n        y: row * itemHeight,\n        w: itemWidth,\n        h: itemHeight,\n    };\n};\n\n/**\n * Calculates the grid item's original height in pixels based\n * on the height in grid units. This calculation\n * is copied directly from react-grid-layout GridItem.js (calcPosition)\n *\n * @param {Object} item item containing shape (x, y, w, h)\n */\nconst getOriginalHeight = item => {\n    const originalHeight = Math.round(\n        GRID_ROW_HEIGHT * item.h + Math.max(0, item.h - 1) * MARGIN[1]\n    );\n\n    return { originalHeight };\n};\n\n/**\n * Returns an array of items containing the x, y, w, h dimensions\n * and the item's originalheight in pixels\n * @function\n * @param {Array} items\n * @returns {Array}\n */\n\nexport const withShape = items =>\n    items.map((item, index) => {\n        const itemWithShape = hasShape(item)\n            ? item\n            : Object.assign({}, item, getShape(index));\n\n        return Object.assign(\n            {},\n            itemWithShape,\n            getOriginalHeight(itemWithShape)\n        );\n    });\n\nexport const getGridItemDomId = id => `item-${id}`;\n\nexport function onItemResize(id) {\n    const el = orObject(document.querySelector(`#${getGridItemDomId(id)}`));\n    if (isFunction(el.setViewportSize))\n        setTimeout(\n            () => el.setViewportSize(el.clientWidth - 5, el.clientHeight - 5),\n            10\n        );\n}\n","import update from 'immutability-helper';\nimport { arrayToIdMap } from '../modules/util';\n\nexport const RECEIVED_MESSAGES = 'RECEIVED_MESSAGES';\n\nexport default (state = {}, action) => {\n    switch (action.type) {\n        case RECEIVED_MESSAGES: {\n            const conversations = arrayToIdMap(action.value);\n\n            const newState = update(state, { $merge: conversations });\n\n            return newState;\n        }\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const sGetMessagesRoot = state => state.messages;\n","import { getInstance } from 'd2';\n\nexport const getMessages = () => {\n    const fields =\n        'id,messageCount,lastUpdated,messageType,displayName,read,messages[id,read,sender[id,displayName],text,lastUpdated]';\n    const url = `/messageConversations?fields=${fields}&order=read:asc&pageSize=200`;\n    return getInstance()\n        .then(d2 => d2.Api.getApi().get(url))\n        .catch(error => console.log('Error:', error));\n};\n","export const RECEIVED_SNACKBAR_MESSAGE = 'RECEIVED_SNACKBAR_MESSAGE';\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\n\nexport const DEFAULT_STATE_SNACKBAR = {\n    message: {},\n    duration: null,\n    open: false,\n};\n\nexport default (state = DEFAULT_STATE_SNACKBAR, action) => {\n    switch (action.type) {\n        case RECEIVED_SNACKBAR_MESSAGE: {\n            return { ...state, ...action.value };\n        }\n        case CLOSE_SNACKBAR: {\n            return DEFAULT_STATE_SNACKBAR;\n        }\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const sGetSnackbar = state => state.snackbar || DEFAULT_STATE_SNACKBAR;\n","import {\n    RECEIVED_SNACKBAR_MESSAGE,\n    CLOSE_SNACKBAR,\n} from '../reducers/snackbar';\n\nexport const acReceivedSnackbarMessage = value => ({\n    type: RECEIVED_SNACKBAR_MESSAGE,\n    value,\n});\n\nexport const acCloseSnackbar = () => ({\n    type: CLOSE_SNACKBAR,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport { sGetSnackbar } from '../../reducers/snackbar';\nimport { acCloseSnackbar } from '../../actions/snackbar';\n\nconst LOADING_DASHBOARD = 'LOADING_DASHBOARD';\nexport const loadingDashboardMsg = { name: '', type: LOADING_DASHBOARD };\n\nconst SnackbarMessageContent = ({ message }) => {\n    if (typeof message === 'object') {\n        //future message types:  switch(message.type)\n        return (\n            <span>\n                Loading <span style={{ fontWeight: 800 }}>{message.name}</span>{' '}\n                dashboard\n            </span>\n        );\n    }\n    return message;\n};\n\nexport const SnackbarMessage = props => {\n    return (\n        <Snackbar\n            open={props.snackbarOpen}\n            message={<SnackbarMessageContent message={props.snackbarMessage} />}\n            autoHideDuration={props.snackbarDuration}\n            onClose={props.onCloseSnackbar}\n        />\n    );\n};\n\nconst mapStateToProps = state => {\n    const { message, duration, open } = sGetSnackbar(state);\n    return {\n        snackbarOpen: open,\n        snackbarMessage: message,\n        snackbarDuration: duration,\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        onCloseSnackbar: acCloseSnackbar,\n    }\n)(SnackbarMessage);\n","import isObject from 'lodash/isObject';\nimport { apiFetchFavorite, getMapFields } from '../../../api/metadata';\nimport {\n    REPORT_TABLE,\n    CHART,\n    MAP,\n    EVENT_REPORT,\n    EVENT_CHART,\n    itemTypeMap,\n    getPlugin,\n} from '../../../modules/itemTypes';\nimport { getBaseUrl, getWithoutId } from '../../../modules/util';\nimport { getGridItemDomId } from '../../ItemGrid/gridUtil';\n\nexport const THEMATIC_LAYER = 'thematic';\n\nexport const pluginIsAvailable = (item = {}, visualization = {}) => {\n    const type = visualization.activeType || item.type;\n\n    return !!getPlugin(type);\n};\n\nexport const extractFavorite = item => {\n    if (!isObject(item)) {\n        return null;\n    }\n\n    switch (item.type) {\n        case REPORT_TABLE:\n            return item.reportTable;\n        case CHART:\n            return item.chart;\n        case MAP:\n            return item.map;\n        case EVENT_REPORT:\n            return item.eventReport;\n        case EVENT_CHART:\n            return item.eventChart;\n        default:\n            return (\n                item.reportTable ||\n                item.chart ||\n                item.map ||\n                item.eventReport ||\n                item.eventChart ||\n                {}\n            );\n    }\n};\n\nexport const extractMapView = map =>\n    map.mapViews && map.mapViews.find(mv => mv.layer.includes(THEMATIC_LAYER));\n\nexport const loadPlugin = (plugin, config, credentials) => {\n    if (!(plugin && plugin.load)) {\n        return;\n    }\n\n    plugin.url = credentials.baseUrl;\n    plugin.loadingIndicator = true;\n    plugin.dashboard = true;\n    if (credentials.auth) {\n        plugin.auth = credentials.auth;\n    }\n    plugin.load(config);\n};\n\nexport const getId = item => extractFavorite(item).id;\nexport const getName = item => extractFavorite(item).name;\nexport const getDescription = item => extractFavorite(item).description;\nexport const getLink = (item, d2) => {\n    const baseUrl = getBaseUrl(d2);\n    const appUrl = itemTypeMap[item.type].appUrl(getId(item));\n\n    return `${baseUrl}/${appUrl}`;\n};\n\nexport const load = async (\n    item,\n    visualization,\n    credentials,\n    activeType,\n    filter = {}\n) => {\n    const config = {\n        ...visualization,\n        el: getGridItemDomId(item.id),\n    };\n\n    const type = activeType || item.type;\n    const plugin = getPlugin(type);\n\n    loadPlugin(plugin, config, credentials);\n};\n\nexport const fetch = async item => {\n    const fetchedFavorite = await apiFetchFavorite(getId(item), item.type, {\n        fields: item.type === MAP ? getMapFields() : null,\n    });\n\n    return fetchedFavorite;\n};\n\nexport const resize = item => {\n    const plugin = getPlugin(item.type);\n\n    if (plugin && plugin.resize) {\n        plugin.resize(getGridItemDomId(item.id));\n    }\n};\n\nexport const unmount = (item, activeType) => {\n    const plugin = getPlugin(activeType);\n\n    if (plugin && plugin.unmount) {\n        plugin.unmount(getGridItemDomId(item.id));\n    }\n};\n\nexport const getVisualizationConfig = (\n    visualization,\n    originalType,\n    activeType\n) => {\n    if (originalType === MAP && originalType !== activeType) {\n        const extractedMapView = extractMapView(visualization);\n\n        if (extractedMapView === undefined) {\n            return null;\n        }\n\n        return getWithoutId({\n            ...visualization,\n            ...extractedMapView,\n            mapViews: undefined,\n        });\n    }\n\n    return getWithoutId(visualization);\n};\n","import {\n    SET_SELECTED_ID,\n    SET_SELECTED_ISLOADING,\n    SET_SELECTED_SHOWDESCRIPTION,\n} from '../reducers/selected';\nimport {\n    RECEIVED_VISUALIZATION,\n    RECEIVED_ACTIVE_VISUALIZATION,\n} from '../reducers/visualizations';\nimport { sGetSelectedIsLoading } from '../reducers/selected';\nimport { sGetUserUsername } from '../reducers/user';\nimport { getCustomDashboards, sGetDashboardById } from '../reducers/dashboards';\nimport { apiFetchDashboard } from '../api/dashboards';\nimport { acSetDashboardItems, acAppendDashboards } from './dashboards';\nimport { withShape } from '../components/ItemGrid/gridUtil';\nimport { tGetMessages } from '../components/Item/MessagesItem/actions';\nimport { acReceivedSnackbarMessage, acCloseSnackbar } from './snackbar';\nimport { storePreferredDashboardId } from '../api/localStorage';\nimport { loadingDashboardMsg } from '../components/SnackbarMessage/SnackbarMessage';\nimport {\n    REPORT_TABLE,\n    CHART,\n    MAP,\n    EVENT_REPORT,\n    EVENT_CHART,\n    MESSAGES,\n} from '../modules/itemTypes';\nimport { extractFavorite } from '../components/Item/VisualizationItem/plugin';\nimport { orObject } from '../modules/util';\n\n// actions\n\nexport const acSetSelectedId = value => ({\n    type: SET_SELECTED_ID,\n    value,\n});\n\nexport const acSetSelectedIsLoading = value => ({\n    type: SET_SELECTED_ISLOADING,\n    value,\n});\n\nexport const acSetSelectedShowDescription = value => ({\n    type: SET_SELECTED_SHOWDESCRIPTION,\n    value,\n});\n\nexport const acReceivedVisualization = value => ({\n    type: RECEIVED_VISUALIZATION,\n    value,\n});\n\nexport const acReceivedActiveVisualization = (id, type, activeType) => {\n    const action = {\n        type: RECEIVED_ACTIVE_VISUALIZATION,\n        id,\n    };\n\n    if (activeType !== type) {\n        action.activeType = activeType;\n    }\n\n    return action;\n};\n\nexport const tLoadDashboard = id => async (dispatch, getState) => {\n    try {\n        const dash = await apiFetchDashboard(id);\n        dispatch(acAppendDashboards(dash));\n\n        return Promise.resolve(dash);\n    } catch (err) {\n        console.log('Error: ', err);\n        return err;\n    }\n};\n\n// thunks\nexport const tSetSelectedDashboardById = id => async (dispatch, getState) => {\n    dispatch(acSetSelectedIsLoading(true));\n\n    const snackbarTimeout = setTimeout(() => {\n        const dashboardName = orObject(sGetDashboardById(getState(), id))\n            .displayName;\n        if (sGetSelectedIsLoading(getState()) && dashboardName) {\n            loadingDashboardMsg.name = dashboardName;\n\n            dispatch(\n                acReceivedSnackbarMessage({\n                    message: loadingDashboardMsg,\n                    open: true,\n                })\n            );\n        }\n    }, 500);\n\n    const onSuccess = selected => {\n        const customDashboard = getCustomDashboards(selected)[0];\n\n        dispatch(\n            acSetDashboardItems(withShape(customDashboard.dashboardItems))\n        );\n\n        storePreferredDashboardId(sGetUserUsername(getState()), id);\n\n        // add visualizations to store\n        customDashboard.dashboardItems.forEach(item => {\n            switch (item.type) {\n                case REPORT_TABLE:\n                case CHART:\n                case MAP:\n                case EVENT_REPORT:\n                case EVENT_CHART:\n                    dispatch(acReceivedVisualization(extractFavorite(item)));\n                    break;\n                case MESSAGES:\n                    dispatch(tGetMessages(id));\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        dispatch(acSetSelectedId(id));\n\n        dispatch(acSetSelectedIsLoading(false));\n\n        clearTimeout(snackbarTimeout);\n\n        dispatch(acCloseSnackbar());\n\n        return selected;\n    };\n\n    const onError = error => {\n        console.log('Error: ', error);\n        return error;\n    };\n\n    try {\n        const selected = await dispatch(tLoadDashboard(id));\n\n        return onSuccess(selected);\n    } catch (err) {\n        return onError(err);\n    }\n};\n","export const getPreferredDashboardId = username =>\n    localStorage.getItem(`dhis2.dashboard.current.${username}`) || undefined;\n\nexport const storePreferredDashboardId = (username, dashboardId) => {\n    localStorage.setItem(`dhis2.dashboard.current.${username}`, dashboardId);\n};\n","import { RECEIVED_MESSAGES } from '../../../reducers/messages';\nimport { getMessages } from '../../../api/messages';\n\nconst onError = (action, error) => {\n    console.log(`Error in action ${action}: ${error}`);\n    return error;\n};\n\nexport const receivedMessages = value => ({\n    type: RECEIVED_MESSAGES,\n    value,\n});\n\nexport const tGetMessages = dashboardItemId => async dispatch => {\n    try {\n        const messages = await getMessages();\n        const { messageConversations } = messages;\n\n        return dispatch(receivedMessages(messageConversations));\n    } catch (err) {\n        return onError('Get Messages', err);\n    }\n};\n","/** @module reducers/editDashboard */\nimport update from 'immutability-helper';\nimport isEmpty from 'lodash/isEmpty';\nimport { orArray, orObject } from '../modules/util';\n\nexport const RECEIVED_EDIT_DASHBOARD = 'RECEIVED_EDIT_DASHBOARD';\nexport const RECEIVED_NOT_EDITING = 'RECEIVED_NOT_EDITING';\nexport const START_NEW_DASHBOARD = 'START_NEW_DASHBOARD';\nexport const RECEIVED_TITLE = 'RECEIVED_TITLE';\nexport const RECEIVED_DESCRIPTION = 'RECEIVED_DESCRIPTION';\nexport const ADD_DASHBOARD_ITEM = 'ADD_DASHBOARD_ITEM';\nexport const REMOVE_DASHBOARD_ITEM = 'REMOVE_DASHBOARD_ITEM';\nexport const UPDATE_DASHBOARD_ITEM = 'UPDATE_DASHBOARD_ITEM';\nexport const RECEIVED_DASHBOARD_LAYOUT = 'RECEIVED_DASHBOARD_LAYOUT';\n\nexport const DEFAULT_STATE_EDIT_DASHBOARD = {};\nexport const NEW_DASHBOARD_STATE = {\n    id: '',\n    name: '',\n    access: {},\n    description: '',\n    dashboardItems: [],\n};\n\nexport default (state = DEFAULT_STATE_EDIT_DASHBOARD, action) => {\n    switch (action.type) {\n        case RECEIVED_EDIT_DASHBOARD:\n            const newState = {};\n            Object.keys(NEW_DASHBOARD_STATE).map(\n                k => (newState[k] = action.value[k])\n            );\n            return newState;\n        case RECEIVED_NOT_EDITING:\n            return DEFAULT_STATE_EDIT_DASHBOARD;\n        case START_NEW_DASHBOARD:\n            return NEW_DASHBOARD_STATE;\n        case RECEIVED_TITLE: {\n            return Object.assign({}, state, { name: action.value });\n        }\n        case RECEIVED_DESCRIPTION: {\n            return Object.assign({}, state, {\n                description: action.value,\n            });\n        }\n        case ADD_DASHBOARD_ITEM:\n            return update(state, {\n                dashboardItems: { $unshift: [action.value] },\n            });\n        case REMOVE_DASHBOARD_ITEM: {\n            const idToRemove = action.value;\n\n            const dashboardItemIndex = state.dashboardItems.findIndex(\n                item => item.id === idToRemove\n            );\n\n            if (dashboardItemIndex > -1) {\n                return update(state, {\n                    dashboardItems: {\n                        $splice: [[dashboardItemIndex, 1]],\n                    },\n                });\n            }\n\n            return state;\n        }\n        case RECEIVED_DASHBOARD_LAYOUT: {\n            const stateItems = orArray(state.dashboardItems);\n\n            const newStateItems = action.value.map(({ x, y, w, h, i }) => {\n                const stateItem = stateItems.find(si => si.id === i);\n\n                return Object.assign({}, stateItem, { w, h, x, y });\n            });\n\n            return update(state, {\n                dashboardItems: { $set: newStateItems },\n            });\n        }\n        case UPDATE_DASHBOARD_ITEM: {\n            const dashboardItem = action.value;\n\n            const dashboardItemIndex = state.dashboardItems.findIndex(\n                item => item.id === dashboardItem.id\n            );\n\n            if (dashboardItemIndex > -1) {\n                const newState = update(state, {\n                    dashboardItems: {\n                        $splice: [[dashboardItemIndex, 1, dashboardItem]],\n                    },\n                });\n\n                return newState;\n            }\n\n            return state;\n        }\n        default:\n            return state;\n    }\n};\n\n// root selector\n\nexport const sGetEditDashboardRoot = state => state.editDashboard;\n\n// selectors\n\nexport const sGetIsEditing = state => !isEmpty(state.editDashboard);\n\nexport const sGetIsNewDashboard = state => {\n    return (\n        !isEmpty(state.editDashboard) && sGetEditDashboardRoot(state).id === ''\n    );\n};\n\nexport const sGetEditDashboardItems = state =>\n    orObject(sGetEditDashboardRoot(state)).dashboardItems;\n","export const CLEAR_EDIT_ITEM_FILTERS = 'CLEAR_EDIT_ITEM_FILTERS';\nexport const REMOVE_EDIT_ITEM_FILTER = 'REMOVE_EDIT_ITEM_FILTER';\nexport const SET_EDIT_ITEM_FILTERS = 'SET_EDIT_ITEM_FILTERS';\n\nexport const DEFAULT_STATE_EDIT_ITEM_FILTERS = {};\n\nexport default (state = DEFAULT_STATE_EDIT_ITEM_FILTERS, action) => {\n    switch (action.type) {\n        case REMOVE_EDIT_ITEM_FILTER: {\n            const newState = { ...state };\n\n            delete newState[action.id];\n\n            return newState;\n        }\n        case SET_EDIT_ITEM_FILTERS: {\n            return action.filters;\n        }\n        case CLEAR_EDIT_ITEM_FILTERS: {\n            return DEFAULT_STATE_EDIT_ITEM_FILTERS;\n        }\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const sGetEditItemFiltersRoot = state => state.editItemFilters;\n\nexport const sGetEditFiltersKeys = state =>\n    Object.keys(sGetEditItemFiltersRoot(state));\n","export const CLEAR_ITEM_FILTERS = 'CLEAR_ITEM_FILTERS';\nexport const SET_ITEM_FILTERS = 'SET_ITEM_FILTERS';\nexport const ADD_ITEM_FILTER = 'ADD_ITEM_FILTER';\nexport const REMOVE_ITEM_FILTER = 'REMOVE_ITEM_FILTER';\n\nexport const DEFAULT_STATE_ITEM_FILTERS = {};\n\nexport default (state = DEFAULT_STATE_ITEM_FILTERS, action) => {\n    switch (action.type) {\n        case ADD_ITEM_FILTER: {\n            return {\n                ...state,\n                [action.filter.id]: action.filter.value,\n            };\n        }\n        case REMOVE_ITEM_FILTER: {\n            const newState = { ...state };\n\n            delete newState[action.id];\n\n            return newState;\n        }\n        case SET_ITEM_FILTERS: {\n            return action.filters;\n        }\n        case CLEAR_ITEM_FILTERS: {\n            return DEFAULT_STATE_ITEM_FILTERS;\n        }\n        default:\n            return state;\n    }\n};\n\n// selectors\n\nexport const sGetItemFiltersRoot = state => state.itemFilters;\n\nexport const sGetFiltersKeys = state => Object.keys(sGetItemFiltersRoot(state));\n","import {\n    ADD_ITEM_FILTER,\n    REMOVE_ITEM_FILTER,\n    SET_ITEM_FILTERS,\n    CLEAR_ITEM_FILTERS,\n} from '../reducers/itemFilters';\n\nexport const FILTER_ORG_UNIT = 'ou';\n\n// actions\n\nexport const acAddItemFilter = filter => ({\n    type: ADD_ITEM_FILTER,\n    filter,\n});\n\nexport const acRemoveItemFilter = id => ({\n    type: REMOVE_ITEM_FILTER,\n    id,\n});\n\nexport const acClearItemFilters = () => ({\n    type: CLEAR_ITEM_FILTERS,\n});\n\nexport const acSetItemFilters = filters => ({\n    type: SET_ITEM_FILTERS,\n    filters,\n});\n","import {\n    REMOVE_EDIT_ITEM_FILTER,\n    SET_EDIT_ITEM_FILTERS,\n    CLEAR_EDIT_ITEM_FILTERS,\n} from '../reducers/editItemFilters';\n\n// actions\n\nexport const acRemoveEditItemFilter = id => ({\n    type: REMOVE_EDIT_ITEM_FILTER,\n    id,\n});\n\nexport const acClearEditItemFilters = () => ({\n    type: CLEAR_EDIT_ITEM_FILTERS,\n});\n\nexport const acSetEditItemFilters = filters => ({\n    type: SET_EDIT_ITEM_FILTERS,\n    filters,\n});\n","import { getInstance } from 'd2';\n\nconst onError = error => console.log('Error: ', error);\n\nconst saveDashboard = (dashboard, data) => {\n    const { name, description, dashboardItems } = data;\n\n    dashboard.name = name;\n    dashboard.description = description;\n    dashboard.dashboardItems = dashboardItems.map(item =>\n        Object.assign({}, item, { width: item.w, height: item.h })\n    );\n\n    return dashboard.save().then(msg => msg.response.uid);\n};\n\nexport const updateDashboard = data => {\n    return getInstance()\n        .then(d2 => {\n            return d2.models.dashboards\n                .get(data.id)\n                .then(dashboard => saveDashboard(dashboard, data));\n        })\n        .catch(onError);\n};\n\nexport const postDashboard = data => {\n    return getInstance().then(d2 => {\n        const dashboard = d2.models.dashboards.create();\n\n        return saveDashboard(dashboard, data);\n    });\n};\n","import { generateUid } from 'd2/uid';\n\nimport {\n    RECEIVED_EDIT_DASHBOARD,\n    START_NEW_DASHBOARD,\n    RECEIVED_NOT_EDITING,\n    RECEIVED_TITLE,\n    RECEIVED_DESCRIPTION,\n    RECEIVED_DASHBOARD_LAYOUT,\n    ADD_DASHBOARD_ITEM,\n    UPDATE_DASHBOARD_ITEM,\n    REMOVE_DASHBOARD_ITEM,\n} from '../reducers/editDashboard';\nimport { sGetEditDashboardRoot } from '../reducers/editDashboard';\nimport { updateDashboard, postDashboard } from '../api/editDashboard';\nimport { tSetSelectedDashboardById } from '../actions/selected';\nimport { NEW_ITEM_SHAPE } from '../components/ItemGrid/gridUtil';\nimport {\n    itemTypeMap,\n    isSpacerType,\n    TEXT,\n    emptyTextItemContent,\n    isTextType,\n} from '../modules/itemTypes';\n\nconst onError = error => {\n    console.log('Error (Saving Dashboard): ', error);\n    return error;\n};\n\n// actions\n\nexport const acSetEditDashboard = (dashboard, items) => {\n    const val = {\n        ...dashboard,\n        dashboardItems: items,\n    };\n\n    return {\n        type: RECEIVED_EDIT_DASHBOARD,\n        value: val,\n    };\n};\n\nexport const acSetEditNewDashboard = () => ({\n    type: START_NEW_DASHBOARD,\n});\n\nexport const acClearEditDashboard = () => ({\n    type: RECEIVED_NOT_EDITING,\n});\n\nexport const acSetDashboardTitle = value => ({\n    type: RECEIVED_TITLE,\n    value,\n});\n\nexport const acSetDashboardDescription = value => ({\n    type: RECEIVED_DESCRIPTION,\n    value,\n});\n\nexport const acUpdateDashboardLayout = value => ({\n    type: RECEIVED_DASHBOARD_LAYOUT,\n    value,\n});\n\nexport const acAddDashboardItem = item => {\n    const type = item.type;\n    delete item.type;\n    const itemPropName = itemTypeMap[type].propName;\n\n    return {\n        type: ADD_DASHBOARD_ITEM,\n        value: {\n            id: generateUid(),\n            type,\n            [itemPropName]: item.content,\n            ...NEW_ITEM_SHAPE,\n        },\n    };\n};\n\nexport const acUpdateDashboardItem = item => ({\n    type: UPDATE_DASHBOARD_ITEM,\n    value: item,\n});\n\nexport const acRemoveDashboardItem = value => ({\n    type: REMOVE_DASHBOARD_ITEM,\n    value,\n});\n\n// thunks\n\nexport const tSaveDashboard = () => async (dispatch, getState) => {\n    const dashboard = sGetEditDashboardRoot(getState());\n\n    const dashboardItems = dashboard.dashboardItems.map(item => {\n        const text = isTextType(item)\n            ? item.text || emptyTextItemContent\n            : null;\n\n        const type = isSpacerType(item) ? TEXT : item.type;\n\n        return {\n            ...item,\n            ...(text ? { text } : {}),\n            type,\n        };\n    });\n\n    const dashboardToSave = {\n        ...dashboard,\n        dashboardItems,\n    };\n\n    try {\n        const dashboardId = dashboardToSave.id\n            ? await updateDashboard(dashboardToSave)\n            : await postDashboard(dashboardToSave);\n\n        dispatch(acClearEditDashboard());\n        await dispatch(tSetSelectedDashboardById(dashboardId));\n\n        return Promise.resolve(dashboardId);\n    } catch (error) {\n        onError(error);\n    }\n};\n","import {\n    SET_DASHBOARDS,\n    ADD_DASHBOARDS,\n    SET_DASHBOARD_STARRED,\n    SET_DASHBOARD_DISPLAY_NAME,\n    SET_DASHBOARD_ITEMS,\n} from '../reducers/dashboards';\nimport {\n    getCustomDashboards,\n    sGetDashboardById,\n    sGetDashboardsSortedByStarred,\n} from '../reducers/dashboards';\nimport { sGetUserUsername } from '../reducers/user';\nimport { tSetSelectedDashboardById, acSetSelectedId } from './selected';\nimport { sGetSelectedId } from '../reducers/selected';\nimport { sGetIsEditing } from '../reducers/editDashboard';\nimport { sGetEditItemFiltersRoot } from '../reducers/editItemFilters';\nimport { acSetItemFilters, acClearItemFilters } from './itemFilters';\nimport { acClearEditItemFilters } from './editItemFilters';\nimport { acClearEditDashboard } from './editDashboard';\nimport {\n    apiFetchDashboards,\n    apiStarDashboard,\n    apiDeleteDashboard,\n} from '../api/dashboards';\nimport { getPreferredDashboardId } from '../api/localStorage';\nimport { arrayToIdMap } from '../modules/util';\n\n// actions\n\nexport const acSetDashboards = dashboards => ({\n    type: SET_DASHBOARDS,\n    value: arrayToIdMap(getCustomDashboards(dashboards)),\n});\n\nexport const acAppendDashboards = dashboards => ({\n    type: ADD_DASHBOARDS,\n    value: arrayToIdMap(getCustomDashboards(dashboards)),\n});\n\nexport const acSetDashboardStarred = (dashboardId, isStarred) => ({\n    type: SET_DASHBOARD_STARRED,\n    dashboardId: dashboardId,\n    value: isStarred,\n});\n\nexport const acSetDashboardDisplayName = (dashboardId, value) => ({\n    type: SET_DASHBOARD_DISPLAY_NAME,\n    dashboardId,\n    value,\n});\n\nexport const acSetDashboardItems = value => ({\n    type: SET_DASHBOARD_ITEMS,\n    value,\n});\n\n// thunks\n\nexport const tFetchDashboards = () => async dispatch => {\n    const collection = await apiFetchDashboards();\n    dispatch(acSetDashboards(collection.toArray()));\n};\n\nexport const tSelectDashboard = id => async (dispatch, getState) => {\n    const onError = error => {\n        console.log('Error (apiFetchDashboards): ', error);\n        return error;\n    };\n\n    try {\n        const state = getState();\n\n        let dashboardToSelect = null;\n        if (id) {\n            dashboardToSelect = sGetDashboardById(state, id) || null;\n        } else {\n            const preferredId = getPreferredDashboardId(\n                sGetUserUsername(state)\n            );\n            const dash = sGetDashboardById(state, preferredId);\n            dashboardToSelect =\n                preferredId && dash\n                    ? dash\n                    : sGetDashboardsSortedByStarred(state)[0];\n        }\n\n        if (dashboardToSelect) {\n            dispatch(tSetSelectedDashboardById(dashboardToSelect.id));\n\n            if (dashboardToSelect.id === sGetSelectedId(state)) {\n                if (sGetIsEditing(state)) {\n                    // disable filters when switching to edit mode\n                    dispatch(acClearItemFilters());\n                } else {\n                    // enable filters when switching to view mode\n                    dispatch(acSetItemFilters(sGetEditItemFiltersRoot(state)));\n                }\n            } else {\n                // clear filters when switching dashboard\n                dispatch(acClearEditItemFilters());\n                dispatch(acClearItemFilters());\n            }\n        } else {\n            dispatch(acSetSelectedId(false));\n        }\n    } catch (err) {\n        return onError(err);\n    }\n};\n\nexport const tStarDashboard = (id, isStarred) => async (dispatch, getState) => {\n    const onSuccess = id => {\n        dispatch(acSetDashboardStarred(id, isStarred));\n        return id;\n    };\n\n    const onError = error => {\n        console.log('Error (apiStarDashboard): ', error);\n        return error;\n    };\n    try {\n        await apiStarDashboard(id, isStarred);\n        return onSuccess(id);\n    } catch (err) {\n        return onError(err);\n    }\n};\n\nexport const tDeleteDashboard = id => async (dispatch, getState) => {\n    try {\n        await apiDeleteDashboard(id);\n        dispatch(acClearEditDashboard());\n        dispatch(acSetSelectedId());\n        dispatch(acSetDashboardItems([]));\n\n        await dispatch(tFetchDashboards());\n\n        return Promise.resolve();\n    } catch (err) {\n        console.log('Error (deleteDashboard): ', err);\n        return err;\n    }\n};\n","/** @module reducers/controlBar */\nimport { combineReducers } from 'redux';\nimport { validateReducer } from '../modules/util';\n\nexport const SET_CONTROLBAR_USER_ROWS = 'SET_CONTROLBAR_USER_ROWS';\n\nexport const DEFAULT_STATE_CONTROLBAR_ROWS = 1;\n\nconst userRows = (state = DEFAULT_STATE_CONTROLBAR_ROWS, action) => {\n    switch (action.type) {\n        case SET_CONTROLBAR_USER_ROWS:\n            return validateReducer(action.value, DEFAULT_STATE_CONTROLBAR_ROWS);\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    userRows,\n});\n\n/**\n * Selectors that point to specific props in the state object\n * @function\n * @param {Object} state\n * @returns {Object}\n */\nexport const sGetControlBarRoot = state => state.controlBar;\n\n// Selector dependency level 2\n\nexport const sGetControlBarUserRows = state =>\n    sGetControlBarRoot(state).userRows;\n","import { getInstance } from 'd2';\nimport { DEFAULT_STATE_CONTROLBAR_ROWS } from '../reducers/controlBar';\n\nconst NAMESPACE = 'dashboard';\nconst KEY = 'controlBarRows';\n\nconst hasNamespace = async d2 => await d2.currentUser.dataStore.has(NAMESPACE);\n\nconst getNamespace = async (d2, hasNamespace) =>\n    hasNamespace\n        ? await d2.currentUser.dataStore.get(NAMESPACE)\n        : await d2.currentUser.dataStore.create(NAMESPACE);\n\nexport const apiGetControlBarRows = async () => {\n    const d2 = await getInstance();\n    const namespace = await getNamespace(d2, await hasNamespace(d2));\n    const hasKey = namespace.keys && namespace.keys.find(key => key === KEY);\n\n    if (hasKey) {\n        return await namespace.get(KEY);\n    } else {\n        await apiPostControlBarRows(DEFAULT_STATE_CONTROLBAR_ROWS, namespace);\n        console.log(\n            '(These errors to /userDataStore/dashboard can be ignored)'\n        );\n        return DEFAULT_STATE_CONTROLBAR_ROWS;\n    }\n};\n\nexport const apiPostControlBarRows = async (rows, namespace) => {\n    const d2 = await getInstance();\n    const ns = namespace || (await getNamespace(d2, hasNamespace));\n\n    ns.set(KEY, rows);\n};\n","import { SET_CONTROLBAR_USER_ROWS } from '../reducers/controlBar';\nimport { apiGetControlBarRows } from '../api/controlBar';\n\n// actions\n\nexport const acSetControlBarUserRows = rows => ({\n    type: SET_CONTROLBAR_USER_ROWS,\n    value: rows,\n});\n\n// thunks\n\nexport const tSetControlBarRows = () => async (dispatch, getState) => {\n    const onSuccess = rows => {\n        dispatch(acSetControlBarUserRows(rows));\n    };\n\n    const onError = error => {\n        console.log('Error (apiGetControlBarRows): ', error);\n        return error;\n    };\n\n    try {\n        const controlBarRows = await apiGetControlBarRows();\n        return onSuccess(controlBarRows);\n    } catch (err) {\n        return onError(err);\n    }\n};\n","import { FIXED_DIMENSIONS } from '@dhis2/d2-ui-analytics';\n\nexport const SET_DIMENSIONS = 'SET_DIMENSIONS';\nexport const DEFAULT_DIMENSIONS = {\n    pe: FIXED_DIMENSIONS.pe,\n    ou: FIXED_DIMENSIONS.ou,\n};\n\nexport default (state = DEFAULT_DIMENSIONS, action) => {\n    switch (action.type) {\n        case SET_DIMENSIONS: {\n            return {\n                ...DEFAULT_DIMENSIONS,\n                ...action.value,\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport const sGetDimensions = state => state.dimensions;\n","export const SET_SETTINGS = 'SET_SETTINGS';\nexport const ADD_SETTINGS = 'ADD_SETTINGS';\n\nexport const DEFAULT_SETTINGS = {\n    keyDateFormat: 'yyyy-MM-dd',\n    keyAnalysisRelativePeriod: 'LAST_12_MONTHS',\n    keyAnalysisDigitGroupSeparator: 'SPACE',\n    displayNameProperty: 'displayName',\n    uiLocale: 'en',\n    rootOrganisationUnit: {},\n};\n\nexport default (state = DEFAULT_SETTINGS, action) => {\n    switch (action.type) {\n        case SET_SETTINGS: {\n            return Object.assign({}, action.value);\n        }\n        case ADD_SETTINGS: {\n            return {\n                ...state,\n                ...action.value,\n            };\n        }\n        default:\n            return state;\n    }\n};\n\n// Selectors\n\nexport const sGetSettings = state => state.settings;\n\nexport const sGetSettingsDisplayNameProperty = state =>\n    sGetSettings(state).displayNameProperty;\n\nexport const sGetRootOrgUnit = state =>\n    sGetSettings(state).rootOrganisationUnit;\n\nexport const sGetRelativePeriod = state =>\n    sGetSettings(state).keyAnalysisRelativePeriod;\n\nexport const sGetUiLocale = state => sGetSettings(state).uiLocale;\n","import keyBy from 'lodash/keyBy';\nimport sortBy from 'lodash/sortBy';\nimport { SET_DIMENSIONS } from '../reducers/dimensions';\nimport { apiFetchDimensions } from '@dhis2/d2-ui-analytics';\nimport { sGetSettingsDisplayNameProperty } from '../reducers/settings';\n\nexport const acSetDimensions = dimensions => ({\n    type: SET_DIMENSIONS,\n    value: keyBy(sortBy(dimensions, [d => d.name.toLowerCase()]), 'id'),\n});\n\nexport const tSetDimensions = d2 => async (dispatch, getState) => {\n    const onSuccess = dimensions => {\n        dispatch(acSetDimensions(dimensions));\n    };\n\n    const onError = error => {\n        console.log('Error (apiFetchDimensions): ', error);\n        return error;\n    };\n\n    try {\n        const displayNameProp = sGetSettingsDisplayNameProperty(getState());\n        const dimensions = await apiFetchDimensions(d2, displayNameProp);\n\n        // filter out CATEGORY that are not of type ATTRIBUTE\n        const filteredDimensions = dimensions.filter(\n            dim =>\n                dim.dimensionType !== 'CATEGORY' ||\n                (dim.dimensionType === 'CATEGORY' &&\n                    dim.dataDimensionType === 'ATTRIBUTE')\n        );\n        return onSuccess(filteredDimensions);\n    } catch (err) {\n        return onError(err);\n    }\n};\n","import React from 'react';\n\nconst StarIcon = ({ className }) => (\n    <svg\n        className={className}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n    >\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>\n);\n\nexport default StarIcon;\n","import { getInstance } from 'd2';\n\nexport const apiPostDataStatistics = async (eventType, id) => {\n    const d2 = await getInstance();\n    const url = `dataStatistics?eventType=${eventType}&favorite=${id}`;\n\n    d2.Api.getApi().post(url);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Chip, colors } from '@dhis2/ui-core';\nimport { Link } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\n\nimport StarIcon from '../../icons/Star';\nimport { apiPostDataStatistics } from '../../api/dataStatistics';\n\nconst styles = {\n    chip: {\n        margin: '3px',\n    },\n    link: {\n        color: colors.grey600,\n        display: 'inline-block',\n        textDecoration: 'none',\n        verticalAlign: 'top',\n    },\n    icon: {\n        height: '20px',\n        marginTop: '2px',\n        width: '20px',\n    },\n    selected: {\n        fill: colors.white,\n    },\n    unselected: {\n        fill: colors.grey900,\n    },\n};\n\nexport const DashboardItemChip = ({\n    starred,\n    selected,\n    label,\n    dashboardId,\n    classes,\n}) => {\n    const chipProps = {\n        selected,\n        className: classes.chip,\n    };\n\n    if (starred) {\n        const selectedState = selected ? classes.selected : classes.unselected;\n        chipProps.icon = (\n            <StarIcon className={`${classes.icon} ${selectedState}`} />\n        );\n    }\n\n    return (\n        <Link\n            className={classes.link}\n            to={`/${dashboardId}`}\n            onClick={debounce(\n                () => apiPostDataStatistics('DASHBOARD_VIEW', dashboardId),\n                500\n            )}\n        >\n            <Chip {...chipProps}>{label}</Chip>\n        </Link>\n    );\n};\n\nDashboardItemChip.propTypes = {\n    starred: PropTypes.bool.isRequired,\n    selected: PropTypes.bool.isRequired,\n    label: PropTypes.string.isRequired,\n    dashboardId: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(DashboardItemChip);\n","import React from 'react';\nimport { colors } from '@dhis2/ui-core';\n\nconst AddCircleIcon = () => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"32\"\n        height=\"32\"\n        fill={colors.teal600}\n        viewBox=\"0 0 24 24\"\n    >\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4 11h-3v3c0 .55-.45 1-1 1s-1-.45-1-1v-3H8c-.55 0-1-.45-1-1s.45-1 1-1h3V8c0-.55.45-1 1-1s1 .45 1 1v3h3c.55 0 1 .45 1 1s-.45 1-1 1z\" />\n    </svg>\n);\n\nexport default AddCircleIcon;\n","import { combineReducers } from 'redux';\nimport { validateReducer } from '../modules/util';\n\nexport const SET_DASHBOARDS_FILTER_NAME = 'SET_DASHBOARDS_FILTER_NAME';\nexport const SET_DASHBOARDS_FILTER_OWNER = 'SET_DASHBOARDS_FILTER_OWNER';\nexport const SET_DASHBOARDS_FILTER_ORDER = 'SET_DASHBOARDS_FILTER_ORDER';\n\nexport const ownerData = [\n    { id: 'ALL', value: 'All users' },\n    { id: 'ME', value: 'Created by me' },\n    { id: 'OTHERS', value: 'Created by others' },\n];\n\nexport const orderData = [\n    { id: 'NAME:ASC', value: 'Name (asc)' },\n    { id: 'NAME:ASC', value: 'Name (desc)' },\n    { id: 'ITEMS:ASC', value: 'Number of items (asc)' },\n    { id: 'ITEMS:ASC', value: 'Number of items (desc)' },\n    { id: 'CREATED:ASC', value: 'Created date (asc)' },\n    { id: 'CREATED:ASC', value: 'Created date (desc)' },\n];\n\nexport const DEFAULT_STATE_DASHBOARDS_FILTER_NAME = '';\nexport const DEFAULT_STATE_DASHBOARDS_FILTER_OWNER = ownerData[0].id;\nexport const DEFAULT_STATE_DASHBOARDS_FILTER_ORDER = orderData[0].id;\n\nconst name = (state = DEFAULT_STATE_DASHBOARDS_FILTER_NAME, action) => {\n    switch (action.type) {\n        case SET_DASHBOARDS_FILTER_NAME:\n            return validateReducer(\n                action.value,\n                DEFAULT_STATE_DASHBOARDS_FILTER_NAME\n            );\n        default:\n            return state;\n    }\n};\n\nconst owner = (state = DEFAULT_STATE_DASHBOARDS_FILTER_OWNER, action) => {\n    switch (action.type) {\n        case SET_DASHBOARDS_FILTER_OWNER:\n            return validateReducer(\n                action.value,\n                DEFAULT_STATE_DASHBOARDS_FILTER_NAME\n            );\n        default:\n            return state;\n    }\n};\n\nconst order = (state = DEFAULT_STATE_DASHBOARDS_FILTER_ORDER, action) => {\n    switch (action.type) {\n        case SET_DASHBOARDS_FILTER_ORDER:\n            return validateReducer(\n                action.value,\n                DEFAULT_STATE_DASHBOARDS_FILTER_ORDER\n            );\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    name,\n    owner,\n    order,\n});\n\n// selectors\n\nexport const sGetDashboardsFilterRoot = state => state.dashboardsFilter;\n\n// selector dependency level 2\n\nexport const sGetFilterName = state => sGetDashboardsFilterRoot(state).name;\nexport const sGetFilterOwner = state => sGetDashboardsFilterRoot(state).owner;\nexport const sGetFilterOrder = state => sGetDashboardsFilterRoot(state).order;\n","import React, { Component, Fragment } from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport PropTypes from 'prop-types';\nimport TextField from 'material-ui/TextField';\nimport IconButton from 'material-ui/IconButton';\nimport IconClear from '@material-ui/icons/Clear';\nimport isEmpty from 'd2-utilizr/lib/isEmpty';\n\nimport { DEFAULT_STATE_DASHBOARDS_FILTER_NAME } from '../../reducers/dashboardsFilter';\n\nexport const KEYCODE_ENTER = 13;\nexport const KEYCODE_ESCAPE = 27;\n\nconst styles = {\n    filterField: {\n        fontSize: '14px',\n        width: '200px',\n        height: '30px',\n        top: '-1px',\n    },\n    filterFieldInput: {\n        top: '-9px',\n        left: '1px',\n    },\n    filterFieldUnderline: {\n        bottom: '10px',\n    },\n    filterFieldUnderlineFocus: {\n        borderColor: '#aaa',\n        borderWidth: '1px',\n    },\n    clearButton: {\n        width: '20px',\n        height: '24px',\n        padding: 0,\n        top: '-5px',\n        left: '-18px',\n    },\n    clearButtonIcon: {\n        width: '16px',\n        height: '16px',\n    },\n};\n\nexport class Filter extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: DEFAULT_STATE_DASHBOARDS_FILTER_NAME,\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            value: nextProps.name,\n        });\n    }\n\n    setFilterValue = event => {\n        event.preventDefault();\n\n        this.props.onChangeName(event.target.value);\n    };\n\n    handleKeyUp = event => {\n        switch (event.keyCode) {\n            case KEYCODE_ENTER:\n                this.props.onKeypressEnter();\n                break;\n            case KEYCODE_ESCAPE:\n                this.props.onChangeName();\n                break;\n            default:\n                break;\n        }\n    };\n\n    render() {\n        return (\n            <TextField\n                className=\"FilterField\"\n                value={this.state.value}\n                onChange={this.setFilterValue}\n                onKeyUp={this.handleKeyUp}\n                hintText={i18n.t('Search for a dashboard')}\n                style={styles.filterField}\n                inputStyle={styles.filterFieldInput}\n                hintStyle={styles.filterFieldHint}\n                underlineStyle={styles.filterFieldUnderline}\n                underlineFocusStyle={styles.filterFieldUnderlineFocus}\n            />\n        );\n    }\n}\n\nFilter.propTypes = {\n    name: PropTypes.string,\n    onChangeName: PropTypes.func,\n};\n\nFilter.defaultProps = {\n    name: '',\n    onChangeName: Function.prototype,\n};\n\nexport const ClearButton = ({ name, onChangeName }) => {\n    const disabled = isEmpty(name);\n\n    const clearFilter = () => onChangeName();\n\n    return (\n        <IconButton\n            style={Object.assign({}, styles.clearButton, {\n                opacity: disabled ? 0 : 1,\n            })}\n            iconStyle={styles.clearButtonIcon}\n            onClick={clearFilter}\n            disabled={disabled}\n        >\n            <IconClear color=\"action\" />\n        </IconButton>\n    );\n};\n\nClearButton.propTypes = {\n    name: PropTypes.string.isRequired,\n    onChangeName: PropTypes.func.isRequired,\n};\n\nexport default props => (\n    <Fragment>\n        <Filter {...props} />\n        <ClearButton {...props} />\n    </Fragment>\n);\n","const lightGrey = '#ECEFF1';\nconst lightMediumGrey = '#9E9E9E';\nconst mediumGrey = '#393939';\nconst charcoalGrey = '#8C8C8C';\nconst darkGrey = '#494949';\nconst muiDefaultGrey = '#757575';\n\nconst red = '#E53935';\n\nconst paleBlue = '#E3F2FD';\nconst lightBlue = '#EAF4FF'; //'#63A4FF'\nconst royalBlue = '#004BA0';\n\nconst mint = '#B2DFDB';\nconst lightGreen = '#48A999';\nconst mediumGreen = '#00796B';\nconst darkGreen = '#004C40';\n\nconst paleYellow = '#FFF8E1';\n\nconst white = '#FFFFFF';\nconst black = 'rgba(0,0,0,0.87)';\n\nexport const colors = {\n    lightGrey,\n    lightMediumGrey,\n    mediumGrey,\n    charcoalGrey,\n    darkGrey,\n    muiDefaultGrey,\n    red,\n    paleBlue,\n    lightBlue,\n    royalBlue,\n    mint,\n    lightGreen,\n    mediumGreen,\n    darkGreen,\n    paleYellow,\n    white,\n    black,\n};\n","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { colors } from '../../modules/colors';\n\nexport const SHOWMORE_BAR_HEIGHT = 16;\n\nconst styles = {\n    showMore: {\n        color: colors.royalBlue,\n        cursor: 'pointer',\n        fontSize: 11,\n        fontWeight: 700,\n        height: SHOWMORE_BAR_HEIGHT,\n        paddingTop: 5,\n        textTransform: 'uppercase',\n        visibility: 'visible',\n    },\n};\n\nexport const ShowMoreButton = ({ onClick, isMaxHeight, classes }) => (\n    <div style={{ textAlign: 'center' }}>\n        <div className={classes.showMore} onClick={onClick}>\n            {isMaxHeight ? i18n.t('Show less') : i18n.t('Show more')}\n        </div>\n    </div>\n);\n\nexport default withStyles(styles)(ShowMoreButton);\n","import { END_FLAP_HEIGHT } from '@dhis2/d2-ui-core/control-bar/ControlBar';\nimport { SHOWMORE_BAR_HEIGHT } from './ShowMoreButton';\n\nexport const CONTROL_BAR_ROW_HEIGHT = 40;\nexport const FIRST_ROW_PADDING_HEIGHT = 10;\nexport const MIN_ROW_COUNT = 1;\n\nconst HEADERBAR_HEIGHT = 48;\n\nconst CONTROL_BAR_OUTER_HEIGHT_DIFF =\n    FIRST_ROW_PADDING_HEIGHT + SHOWMORE_BAR_HEIGHT - 2; // 2 pixel \"adjustment\"\n\nexport const getRowsHeight = rows => {\n    return rows * CONTROL_BAR_ROW_HEIGHT;\n};\n\nexport const getNumRowsFromHeight = height => {\n    return Math.floor(\n        (height - CONTROL_BAR_OUTER_HEIGHT_DIFF) / CONTROL_BAR_ROW_HEIGHT\n    );\n};\n\nexport const getTopOffset = rows => {\n    return HEADERBAR_HEIGHT + getControlBarHeight(rows, false);\n};\n\nexport const getControlBarHeight = (rows, expandable) => {\n    const flapHeight = !expandable ? END_FLAP_HEIGHT : 0;\n\n    return getRowsHeight(rows) + CONTROL_BAR_OUTER_HEIGHT_DIFF + flapHeight;\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport ControlBar from '@dhis2/d2-ui-core/control-bar/ControlBar';\nimport arraySort from 'd2-utilizr/lib/arraySort';\n\nimport Chip from './DashboardItemChip';\nimport AddCircleIcon from '../../icons/AddCircle';\nimport Filter from './Filter';\nimport ShowMoreButton from './ShowMoreButton';\nimport {\n    FIRST_ROW_PADDING_HEIGHT,\n    MIN_ROW_COUNT,\n    getRowsHeight,\n    getControlBarHeight,\n    getNumRowsFromHeight,\n} from './controlBarDimensions';\nimport { sGetControlBarUserRows } from '../../reducers/controlBar';\nimport { sGetAllDashboards } from '../../reducers/dashboards';\nimport { sGetFilterName } from '../../reducers/dashboardsFilter';\nimport { sGetSelectedId } from '../../reducers/selected';\nimport { acSetControlBarUserRows } from '../../actions/controlBar';\nimport { acSetFilterName } from '../../actions/dashboardsFilter';\nimport { orObject, orArray } from '../../modules/util';\nimport { apiPostControlBarRows } from '../../api/controlBar';\n\nimport './ControlBar.css';\n\nexport const MAX_ROW_COUNT = 10;\n\nexport class DashboardsBar extends Component {\n    state = {\n        rows: MIN_ROW_COUNT,\n    };\n\n    setInitialDashboardState = rows => {\n        this.setState({ rows, isMaxHeight: rows === MAX_ROW_COUNT });\n    };\n\n    componentDidMount() {\n        this.setInitialDashboardState(this.props.userRows);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setInitialDashboardState(nextProps.userRows);\n    }\n\n    onChangeHeight = newHeight => {\n        const newRows = Math.max(\n            MIN_ROW_COUNT,\n            getNumRowsFromHeight(newHeight)\n        );\n\n        if (newRows !== this.state.rows) {\n            const newRowCount = Math.min(newRows, MAX_ROW_COUNT);\n\n            this.props.onChangeHeight(newRowCount);\n        }\n    };\n\n    onEndDrag = () => {\n        return apiPostControlBarRows(this.state.rows);\n    };\n\n    onToggleMaxHeight = () => {\n        const rows =\n            this.state.rows === MAX_ROW_COUNT\n                ? this.props.userRows\n                : MAX_ROW_COUNT;\n\n        this.setState({ rows, isMaxHeight: !this.state.isMaxHeight });\n    };\n\n    onSelectDashboard = () => {\n        this.props.history.push(`/${this.props.dashboards[0].id}`);\n    };\n\n    render() {\n        const { dashboards, name, selectedId, onChangeFilterName } = this.props;\n\n        const rowCount = this.state.isMaxHeight\n            ? MAX_ROW_COUNT\n            : this.state.rows;\n        const controlBarHeight = getControlBarHeight(rowCount, true);\n        const contentWrapperStyle = {\n            padding: `${FIRST_ROW_PADDING_HEIGHT}px 6px 0 6px`,\n            overflowY: this.state.isMaxHeight ? 'auto' : 'hidden',\n            height: getRowsHeight(rowCount) + FIRST_ROW_PADDING_HEIGHT,\n        };\n\n        return (\n            <ControlBar\n                height={controlBarHeight}\n                onChangeHeight={this.onChangeHeight}\n                onEndDrag={this.onEndDrag}\n                editMode={false}\n                expandable={true}\n            >\n                <div style={contentWrapperStyle}>\n                    <div className=\"left-controls\">\n                        <Link\n                            style={{\n                                display: 'inline-block',\n                                textDecoration: 'none',\n                                marginRight: 10,\n                            }}\n                            to={'/new'}\n                        >\n                            <AddCircleIcon />\n                        </Link>\n                        <Filter\n                            name={name}\n                            onChangeName={onChangeFilterName}\n                            onKeypressEnter={this.onSelectDashboard}\n                        />\n                    </div>\n                    {orArray(dashboards).map(dashboard => (\n                        <Chip\n                            key={dashboard.id}\n                            label={dashboard.displayName}\n                            starred={dashboard.starred}\n                            dashboardId={dashboard.id}\n                            selected={dashboard.id === selectedId}\n                        />\n                    ))}\n                </div>\n                {this.props.userRows !== MAX_ROW_COUNT ? (\n                    <ShowMoreButton\n                        onClick={this.onToggleMaxHeight}\n                        isMaxHeight={this.state.isMaxHeight}\n                    />\n                ) : null}\n            </ControlBar>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    dashboards: sGetAllDashboards(state),\n    name: sGetFilterName(state),\n    userRows: sGetControlBarUserRows(state),\n    selectedId: sGetSelectedId(state),\n});\n\nconst mapDispatchToProps = {\n    onChangeHeight: acSetControlBarUserRows,\n    onChangeFilterName: acSetFilterName,\n};\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    const dashboards = Object.values(orObject(stateProps.dashboards));\n    const displayDashboards = arraySort(\n        dashboards.filter(d =>\n            d.displayName.toLowerCase().includes(stateProps.name.toLowerCase())\n        ),\n        'ASC',\n        'displayName'\n    );\n\n    return {\n        ...stateProps,\n        ...ownProps,\n        ...dispatchProps,\n        dashboards: [\n            ...displayDashboards.filter(d => d.starred),\n            ...displayDashboards.filter(d => !d.starred),\n        ],\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps,\n        mergeProps\n    )(DashboardsBar)\n);\n","import {\n    SET_DASHBOARDS_FILTER_NAME,\n    SET_DASHBOARDS_FILTER_OWNER,\n    SET_DASHBOARDS_FILTER_ORDER,\n} from '../reducers/dashboardsFilter';\n\n// actions\n\nexport const acSetFilterName = value => ({\n    type: SET_DASHBOARDS_FILTER_NAME,\n    value,\n});\n\nexport const acSetFilterOwner = value => ({\n    type: SET_DASHBOARDS_FILTER_OWNER,\n    value,\n});\n\nexport const acSetFilterOrder = value => ({\n    type: SET_DASHBOARDS_FILTER_ORDER,\n    value,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n    getTopOffset,\n    MIN_ROW_COUNT,\n} from '../ControlBar/controlBarDimensions';\nimport { sGetControlBarUserRows } from '../../reducers/controlBar';\n\nconst DashboardVerticalOffset = props => {\n    const rows = props.editMode ? MIN_ROW_COUNT : props.userRows;\n    const marginTop = getTopOffset(rows);\n\n    return <div className=\"page-container-top-margin\" style={{ marginTop }} />;\n};\n\nconst mapStateToProps = state => ({\n    userRows: sGetControlBarUserRows(state),\n});\n\nexport default connect(mapStateToProps)(DashboardVerticalOffset);\n","import i18n from '@dhis2/d2-i18n';\nimport {\n    itemTypeMap,\n    spacerContent,\n    REPORT_TABLE,\n    CHART,\n    MAP,\n    EVENT_CHART,\n    EVENT_REPORT,\n    USERS,\n    REPORTS,\n    RESOURCES,\n    APP,\n    MESSAGES,\n    TEXT,\n    SPACER,\n} from '../../modules/itemTypes';\n\nexport const singleItems = [\n    {\n        id: 'additional',\n        header: 'Additional items',\n        items: [\n            {\n                type: TEXT,\n                name: i18n.t('Text box'),\n                content: '',\n            },\n            {\n                type: MESSAGES,\n                name: i18n.t('Messages'),\n                content: 'true',\n            },\n            {\n                type: SPACER,\n                name: i18n.t('Spacer'),\n                content: spacerContent,\n            },\n        ],\n    },\n];\n\nexport const listItems = [\n    {\n        id: REPORT_TABLE,\n        title: itemTypeMap[REPORT_TABLE].pluralTitle,\n    },\n    {\n        id: CHART,\n        title: itemTypeMap[CHART].pluralTitle,\n    },\n    { id: MAP, title: itemTypeMap[MAP].pluralTitle },\n    {\n        id: EVENT_REPORT,\n        title: itemTypeMap[EVENT_REPORT].pluralTitle,\n    },\n    {\n        id: EVENT_CHART,\n        title: itemTypeMap[EVENT_CHART].pluralTitle,\n    },\n    {\n        id: USERS,\n        title: itemTypeMap[USERS].pluralTitle,\n    },\n    {\n        id: REPORTS,\n        title: itemTypeMap[REPORTS].pluralTitle,\n    },\n    {\n        id: RESOURCES,\n        title: itemTypeMap[RESOURCES].pluralTitle,\n    },\n    { id: APP, title: itemTypeMap[APP].pluralTitle },\n];\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\nimport Divider from '@material-ui/core/Divider';\nimport { List, ListItem } from 'material-ui/List';\nimport Button from '@dhis2/d2-ui-core/button/Button';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { tAddListItemContent } from './actions';\nimport { acAddDashboardItem } from '../../actions/editDashboard';\nimport { sGetEditDashboardRoot } from '../../reducers/editDashboard';\nimport {\n    getItemUrl,\n    getItemIcon,\n    APP,\n    CHART,\n    EVENT_CHART,\n    REPORT_TABLE,\n    EVENT_REPORT,\n    MAP,\n    REPORTS,\n    RESOURCES,\n    USERS,\n} from '../../modules/itemTypes';\nimport { colors } from '../../modules/colors';\n\nclass ItemSelectList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            seeMore: false,\n        };\n    }\n\n    addItem = item => () => {\n        const {\n            type,\n            dashboardId,\n            acAddDashboardItem,\n            tAddListItemContent,\n        } = this.props;\n\n        const newItem = {\n            id: item.id,\n            name: item.displayName || item.name,\n        };\n\n        // special handling for ListItem types\n        if (type.match(/(REPORTS|RESOURCES|USERS)/)) {\n            tAddListItemContent(dashboardId, type, newItem);\n        } else if (type === APP) {\n            acAddDashboardItem({ type, content: item.key });\n        } else {\n            acAddDashboardItem({ type, content: newItem });\n        }\n    };\n\n    toggleSeeMore = () => {\n        this.setState({ seeMore: !this.state.seeMore });\n\n        this.props.onChangeItemsLimit(this.props.type);\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <div\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        paddingLeft: '16px',\n                    }}\n                >\n                    <h3>{this.props.title}</h3>\n                    <Button\n                        color=\"primary\"\n                        style={{ textTransform: 'uppercase' }}\n                        onClick={this.toggleSeeMore}\n                    >\n                        {`${i18n.t('See')} ${\n                            this.state.seeMore\n                                ? i18n.t('fewer')\n                                : i18n.t('more')\n                        } ${this.props.title}`}\n                    </Button>\n                </div>\n                <Divider />\n                <List>\n                    {this.props.items.map(item => {\n                        const itemUrl = getItemUrl(\n                            this.props.type,\n                            item,\n                            this.context.d2\n                        );\n\n                        const ItemIcon = getItemIcon(this.props.type);\n\n                        return (\n                            <ListItem // apps don't have item.id\n                                key={item.id || item.key}\n                                leftIcon={\n                                    <ItemIcon\n                                        style={{\n                                            margin: '6px',\n                                            fill: colors.muiDefaultGrey,\n                                        }}\n                                    />\n                                }\n                                innerDivStyle={{ padding: '0px 0px 0px 42px' }}\n                                hoverColor=\"transparent\"\n                                primaryText={\n                                    <p\n                                        style={{\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            justifyContent: 'flex-start',\n                                            margin: 0,\n                                        }}\n                                    >\n                                        {item.displayName || item.name}\n                                        <Button\n                                            color=\"primary\"\n                                            onClick={this.addItem(item)}\n                                            style={{\n                                                marginLeft: '5px',\n                                                marginRight: '5px',\n                                            }}\n                                        >\n                                            + ADD\n                                        </Button>\n                                        {itemUrl && (\n                                            <a\n                                                target=\"_blank\"\n                                                rel=\"noopener noreferrer\"\n                                                href={itemUrl}\n                                                style={{ display: 'flex' }}\n                                            >\n                                                <LaunchIcon\n                                                    style={{\n                                                        width: '16px',\n                                                        height: '16px',\n                                                        fill:\n                                                            colors.muiDefaultGrey,\n                                                    }}\n                                                />\n                                            </a>\n                                        )}\n                                    </p>\n                                }\n                            />\n                        );\n                    })}\n                </List>\n            </Fragment>\n        );\n    }\n}\n\nItemSelectList.propTypes = {\n    type: PropTypes.oneOf([\n        APP,\n        CHART,\n        EVENT_CHART,\n        REPORT_TABLE,\n        EVENT_REPORT,\n        MAP,\n        REPORTS,\n        RESOURCES,\n        USERS,\n    ]).isRequired,\n    title: PropTypes.string.isRequired,\n    items: PropTypes.array.isRequired,\n    onChangeItemsLimit: PropTypes.func.isRequired,\n};\n\nItemSelectList.contextTypes = {\n    d2: PropTypes.object.isRequired,\n};\n\nexport default connect(\n    state => ({\n        dashboardId: sGetEditDashboardRoot(state).id,\n    }),\n    {\n        acAddDashboardItem,\n        tAddListItemContent,\n    }\n)(ItemSelectList);\n","import { sGetEditDashboardRoot } from '../../reducers/editDashboard';\nimport { itemTypeMap } from '../../modules/itemTypes';\nimport {\n    acAddDashboardItem,\n    acUpdateDashboardItem,\n} from '../../actions/editDashboard';\n\nexport const tAddListItemContent = (dashboardId, type, content) => (\n    dispatch,\n    getState\n) => {\n    const state = getState();\n    const listItemType = itemTypeMap[type].propName;\n    const dashboardItems = sGetEditDashboardRoot(state).dashboardItems;\n    const dashboardItemIndex = dashboardItems.findIndex(\n        item => item.type === type\n    );\n    let dashboardItem;\n\n    // Reports/Resources/Users dashboard item type already present in dashboard\n    if (dashboardItemIndex > -1) {\n        dashboardItem = dashboardItems[dashboardItemIndex];\n        dashboardItem[listItemType].push(content);\n\n        dispatch(acUpdateDashboardItem(dashboardItem));\n    } else {\n        dashboardItem = {\n            type: type,\n            content: [content],\n        };\n\n        dispatch(acAddDashboardItem(dashboardItem));\n    }\n};\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Divider from '@material-ui/core/Divider';\nimport { List, ListItem } from 'material-ui/List';\nimport Button from '@dhis2/d2-ui-core/button/Button';\nimport { getItemIcon } from '../../modules/itemTypes';\n\nimport { acAddDashboardItem } from '../../actions/editDashboard';\n\nconst SingleItem = ({ item, onAddToDashboard }) => {\n    const ItemIcon = getItemIcon(item.type);\n    return (\n        <ListItem\n            key={item.type}\n            leftIcon={<ItemIcon style={{ margin: '6px' }} />}\n            innerDivStyle={{ padding: '0px 0px 0px 42px' }}\n            hoverColor=\"transparent\"\n            primaryText={\n                <p\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'flex-start',\n                        margin: 0,\n                    }}\n                >\n                    {item.name}\n                    <Button\n                        color=\"primary\"\n                        onClick={onAddToDashboard}\n                        style={{\n                            marginLeft: '5px',\n                            marginRight: '5px',\n                        }}\n                    >\n                        + ADD\n                    </Button>\n                </p>\n            }\n        />\n    );\n};\n\nconst ItemSelectSingle = ({ acAddDashboardItem, category }) => {\n    const addToDashboard = ({ type, content }) => () => {\n        acAddDashboardItem({ type, content });\n    };\n\n    return (\n        <Fragment>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    paddingLeft: '16px',\n                }}\n            >\n                <h3>{category.header}</h3>\n            </div>\n            <Divider />\n            <List>\n                {category.items.map(item => (\n                    <SingleItem\n                        key={item.type}\n                        item={item}\n                        onAddToDashboard={addToDashboard(item)}\n                    />\n                ))}\n            </List>\n        </Fragment>\n    );\n};\n\nexport default connect(\n    null,\n    { acAddDashboardItem }\n)(ItemSelectSingle);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport Popover from '@material-ui/core/Popover';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from 'material-ui/TextField';\n\nimport { singleItems, listItems } from './selectableItems';\nimport { itemTypeMap } from '../../modules/itemTypes';\nimport ItemSelectList from './ItemSelectList';\nimport ItemSelectSingle from './ItemSelectSingle';\nimport { colors } from '../../modules/colors';\n\nimport './ItemSelect.css';\n\nconst styles = {\n    filterField: {\n        fontSize: '14px',\n        height: '30px',\n        marginLeft: '10px',\n    },\n    filterFieldInput: {\n        top: '-9px',\n        left: '1px',\n    },\n    filterFieldUnderline: {\n        bottom: '10px',\n    },\n    filterFieldUnderlineFocus: {\n        borderColor: '#aaa',\n        borderWidth: '1px',\n    },\n    searchIcon: {\n        fill: colors.muiDefaultGrey,\n    },\n};\n\nconst ItemSearchField = props => (\n    <div style={{ display: 'flex', alignItems: 'baseline' }}>\n        <SearchIcon style={styles.searchIcon} />\n        <TextField\n            hintText={i18n.t('Search for items to add to this dashboard')}\n            fullWidth={true}\n            value={props.value}\n            onClick={props.onClick}\n            onChange={props.onChange}\n            style={styles.filterField}\n            inputStyle={styles.filterFieldInput}\n            hintStyle={styles.filterFieldHint}\n            underlineStyle={styles.filterFieldUnderline}\n            underlineFocusStyle={styles.filterFieldUnderlineFocus}\n        />\n    </div>\n);\n\nclass ItemSelect extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            anchorEl: null,\n            open: false,\n            maxOptions: new Set(),\n            items: undefined,\n            filter: '',\n        };\n    }\n\n    closeList = () => {\n        this.setState({ open: false, filter: '' });\n    };\n\n    openList = event => {\n        this.fetchItems();\n\n        this.setState({\n            anchorEl: event.currentTarget,\n            open: true,\n        });\n    };\n\n    setFilter = event => {\n        this.setState({ filter: event.target.value }, this.fetchItems);\n    };\n\n    getListItems = items => {\n        return listItems.map(type => {\n            const itemType = itemTypeMap[type.id];\n\n            if (items && items[itemType.countName] > 0) {\n                return (\n                    <ItemSelectList\n                        key={type.id}\n                        type={type.id}\n                        title={type.title}\n                        items={items[itemType.endPointName]}\n                        onChangeItemsLimit={this.fetchItems}\n                    />\n                );\n            } else {\n                return null;\n            }\n        });\n    };\n\n    popoverChildren = items => {\n        const SingleItems = singleItems.map(category => (\n            <ItemSelectSingle key={category.id} category={category} />\n        ));\n        const ListItems = this.getListItems(items);\n\n        return ListItems.concat(SingleItems);\n    };\n\n    fetchItems = async maxOption => {\n        const api = this.context.d2.Api.getApi();\n\n        let queryString;\n\n        if (maxOption) {\n            const maxOptions = this.state.maxOptions;\n\n            if (maxOptions.has(maxOption)) {\n                maxOptions.delete(maxOption);\n            } else {\n                maxOptions.add(maxOption);\n            }\n\n            this.setState({\n                maxOptions,\n            });\n        } else {\n            this.setState({\n                maxOptions: new Set(),\n            });\n        }\n\n        if ([...this.state.maxOptions.values()].length) {\n            queryString =\n                'max=' + [...this.state.maxOptions.values()].join('&max=');\n        }\n\n        api.get(\n            `dashboards/q/${this.state.filter || ''}${\n                queryString ? `?${queryString}` : ''\n            }`\n        )\n            .then(response => {\n                this.setState({ items: response });\n            })\n            .catch(console.error);\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <ItemSearchField\n                    value={this.state.filter}\n                    onClick={this.openList}\n                    onChange={this.setFilter}\n                />\n                <Popover\n                    className=\"dashboard-item-select\"\n                    open={this.state.open}\n                    onClose={this.closeList}\n                    anchorEl={this.state.anchorEl}\n                    anchorOrigin={{ horizontal: 'left', vertical: 'bottom' }}\n                    transformOrigin={{ horizontal: 'left', vertical: 'top' }}\n                    style={{ height: '70vh' }}\n                    PaperProps={{ style: { width: '700px' } }}\n                    disableAutoFocus={true}\n                    disableRestoreFocus={true}\n                >\n                    {this.popoverChildren(this.state.items)}\n                </Popover>\n            </Fragment>\n        );\n    }\n}\n\nItemSelect.contextTypes = {\n    d2: PropTypes.object.isRequired,\n};\n\nexport default ItemSelect;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport i18n from '@dhis2/d2-i18n';\nimport TextField from '@dhis2/d2-ui-core/text-field/TextField';\n\nimport {\n    acSetDashboardTitle,\n    acSetDashboardDescription,\n} from '../../actions/editDashboard';\nimport { orObject } from '../../modules/util';\nimport { sGetEditDashboardRoot } from '../../reducers/editDashboard';\nimport { sGetDashboardById } from '../../reducers/dashboards';\nimport ItemSelect from '../ItemSelect/ItemSelect';\n\nconst styles = {\n    section: { display: 'flex', justifyContent: 'space-between' },\n    titleDescription: {\n        flex: '3',\n        marginRight: '20px',\n    },\n    title: { padding: '6px 0' },\n    itemSelect: {\n        flex: '2',\n        minWidth: '300px',\n        maxWidth: '730px',\n        position: 'relative',\n        top: '33px',\n    },\n};\n\nexport const EditTitleBar = ({\n    name,\n    displayName,\n    description,\n    style,\n    onChangeTitle,\n    onChangeDescription,\n    classes,\n}) => {\n    const titleStyle = Object.assign({}, style.title, {\n        top: '-2px',\n    });\n\n    const translatedName = () => {\n        return displayName ? (\n            <span style={style.description}>\n                {i18n.t('Current translation')}: {displayName}\n            </span>\n        ) : null;\n    };\n\n    return (\n        <section className={classes.section}>\n            <div className={classes.titleDescription}>\n                <span>{i18n.t('Currently editing')}</span>\n                <div className={classes.title}>\n                    <TextField\n                        multiline\n                        fullWidth\n                        rows={1}\n                        rowsMax={3}\n                        style={titleStyle}\n                        value={name}\n                        placeholder={i18n.t('Add title here')}\n                        onChange={onChangeTitle}\n                    />\n                    {translatedName()}\n                </div>\n                <TextField\n                    multiline\n                    fullWidth\n                    rows={1}\n                    rowsMax={3}\n                    style={style.description}\n                    value={description}\n                    placeholder={i18n.t('Add description here')}\n                    onChange={onChangeDescription}\n                />\n            </div>\n            <div className={classes.itemSelect}>\n                <ItemSelect />\n            </div>\n        </section>\n    );\n};\n\nconst mapStateToProps = state => {\n    const selectedDashboard = orObject(sGetEditDashboardRoot(state));\n    const displayName = orObject(sGetDashboardById(state, selectedDashboard.id))\n        .displayName;\n\n    return {\n        name: selectedDashboard.name,\n        displayName,\n        description: selectedDashboard.description,\n    };\n};\n\nconst mapDispatchToProps = {\n    onChangeTitle: acSetDashboardTitle,\n    onChangeDescription: acSetDashboardDescription,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles)(EditTitleBar));\n\nEditTitleBar.propTypes = {\n    name: PropTypes.string,\n    displayName: PropTypes.string,\n    description: PropTypes.string,\n    onChangeTitle: PropTypes.func.isRequired,\n    onChangeDescription: PropTypes.func.isRequired,\n    style: PropTypes.object,\n};\n\nEditTitleBar.defaultProps = {\n    name: '',\n    displayName: '',\n    description: '',\n    style: {},\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@dhis2/ui-core';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport i18n from '@dhis2/d2-i18n';\n\nimport {\n    PeriodDimension,\n    DynamicDimension,\n    OrgUnitDimension,\n    FIXED_DIMENSIONS,\n} from '@dhis2/d2-ui-analytics';\n\nconst peId = FIXED_DIMENSIONS.pe.id;\nconst ouId = FIXED_DIMENSIONS.ou.id;\n\nclass FilterDialog extends Component {\n    onConfirm = id => () => this.props.onConfirm(id);\n\n    dialogContent() {\n        const { displayNameProperty, dimension, selectedItems } = this.props;\n        const dialogId = dimension.id;\n\n        const commonProps = {\n            d2: this.context.d2,\n            onSelect: this.props.onSelect,\n            onDeselect: this.props.onDeselect,\n            onReorder: this.props.onReorder,\n        };\n\n        switch (dialogId) {\n            case peId: {\n                return (\n                    <PeriodDimension\n                        selectedPeriods={selectedItems}\n                        {...commonProps}\n                    />\n                );\n            }\n            case ouId:\n                return (\n                    <OrgUnitDimension\n                        displayNameProperty={displayNameProperty}\n                        ouItems={selectedItems}\n                        {...commonProps}\n                    />\n                );\n            default:\n                return (\n                    <DynamicDimension\n                        selectedItems={selectedItems}\n                        dialogId={dialogId}\n                        dialogTitle={dimension.name}\n                        {...commonProps}\n                    />\n                );\n        }\n    }\n\n    render() {\n        const { dimension, onClose } = this.props;\n        const dialogId = dimension.id;\n\n        return (\n            <Dialog\n                open={!!dialogId}\n                maxWidth=\"lg\"\n                disableEnforceFocus\n                onClose={onClose}\n            >\n                {dialogId && this.dialogContent()}\n                <DialogActions>\n                    <Button kind=\"secondary\" onClick={onClose}>\n                        {i18n.t('Cancel')}\n                    </Button>\n                    <Button kind=\"primary\" onClick={this.onConfirm(dialogId)}>\n                        {i18n.t('Confirm')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nFilterDialog.propTypes = {\n    displayNameProperty: PropTypes.string,\n    dimension: PropTypes.object,\n    selectedItems: PropTypes.array,\n    onSelect: PropTypes.func,\n    onDeselect: PropTypes.func,\n    onReorder: PropTypes.func,\n    onClose: PropTypes.func,\n    onConfirm: PropTypes.func,\n};\n\nFilterDialog.contextTypes = {\n    d2: PropTypes.object,\n};\n\nexport default FilterDialog;\n","export const SET_ACTIVE_MODAL_DIMENSION = 'SET_ACTIVE_MODAL_DIMENSION';\nexport const CLEAR_ACTIVE_MODAL_DIMENSION = 'CLEAR_ACTIVE_MODAL_DIMENSION';\n\nexport const DEFAULT_STATE_ACTIVE_MODAL_DIMENSION = {};\n\nexport default (state = DEFAULT_STATE_ACTIVE_MODAL_DIMENSION, action) => {\n    switch (action.type) {\n        case SET_ACTIVE_MODAL_DIMENSION: {\n            return action.value;\n        }\n        case CLEAR_ACTIVE_MODAL_DIMENSION: {\n            return DEFAULT_STATE_ACTIVE_MODAL_DIMENSION;\n        }\n        default:\n            return state;\n    }\n};\n\nexport const sGetActiveModalDimension = state => state.activeModalDimension;\n","import {\n    SET_ACTIVE_MODAL_DIMENSION,\n    CLEAR_ACTIVE_MODAL_DIMENSION,\n} from '../reducers/activeModalDimension';\n\nexport const acSetActiveModalDimension = value => ({\n    type: SET_ACTIVE_MODAL_DIMENSION,\n    value,\n});\n\nexport const acClearActiveModalDimension = () => ({\n    type: CLEAR_ACTIVE_MODAL_DIMENSION,\n});\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Popover from '@material-ui/core/Popover';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport { withTheme } from '@material-ui/core/styles';\n\nimport i18n from '@dhis2/d2-i18n';\nimport { DimensionsPanel } from '@dhis2/d2-ui-analytics';\n\nimport { Button } from '@dhis2/ui-core';\nimport FilterDialog from './FilterDialog';\n\nimport { sGetSettingsDisplayNameProperty } from '../../reducers/settings';\nimport { sGetActiveModalDimension } from '../../reducers/activeModalDimension';\nimport { sGetDimensions } from '../../reducers/dimensions';\nimport { sGetFiltersKeys } from '../../reducers/itemFilters';\nimport { sGetEditItemFiltersRoot } from '../../reducers/editItemFilters';\nimport { acAddItemFilter, acRemoveItemFilter } from '../../actions/itemFilters';\nimport {\n    acRemoveEditItemFilter,\n    acSetEditItemFilters,\n} from '../../actions/editItemFilters';\nimport {\n    acClearActiveModalDimension,\n    acSetActiveModalDimension,\n} from '../../actions/activeModalDimension';\n\nclass FilterSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            anchorEl: null,\n        };\n    }\n\n    openPanel = event => {\n        this.setState({ anchorEl: event.currentTarget });\n    };\n\n    closePanel = () => {\n        this.setState({ anchorEl: null });\n    };\n\n    closeDialog = () => {\n        this.setState({ anchorEl: null });\n\n        this.props.clearActiveModalDimension();\n    };\n\n    selectDimension = id => {\n        this.props.setActiveModalDimension({\n            id,\n            name: this.props.dimensions[id].name,\n        });\n    };\n\n    onSelectItems = ({ dimensionId, items }) => {\n        this.props.setEditItemFilters({\n            ...this.props.selectedItems,\n            [dimensionId]: items,\n        });\n    };\n\n    onDeselectItems = ({ dimensionId, itemIdsToRemove }) => {\n        const oldList = this.props.selectedItems[dimensionId] || [];\n        const newList = oldList.filter(\n            item => !itemIdsToRemove.includes(item.id)\n        );\n\n        if (newList.length) {\n            this.props.setEditItemFilters({\n                ...this.props.selectedItems,\n                [dimensionId]: newList,\n            });\n        } else {\n            this.props.removeEditItemFilter(dimensionId);\n        }\n    };\n\n    onReorderItems = ({ dimensionId, itemIds }) => {\n        const oldList = this.props.selectedItems[dimensionId] || [];\n        const reorderedList = itemIds.map(id =>\n            oldList.find(item => item.id === id)\n        );\n\n        this.props.setEditItemFilters({\n            ...this.props.selectedItems,\n            [dimensionId]: reorderedList,\n        });\n    };\n\n    saveFilter = id => {\n        const filterItems = this.props.selectedItems[id];\n\n        if (filterItems && filterItems.length) {\n            this.props.addItemFilter({\n                id,\n                value: [...filterItems],\n            });\n        } else {\n            this.props.removeItemFilter(id);\n        }\n\n        this.closeDialog();\n    };\n\n    render() {\n        const {\n            theme,\n            displayNameProperty,\n            dimension,\n            dimensions,\n            selectedDimensions,\n            selectedItems,\n        } = this.props;\n\n        return (\n            <Fragment>\n                <Button onClick={this.openPanel}>\n                    {i18n.t('Add filter')}\n                    <ArrowDropDownIcon />\n                </Button>\n                <Popover\n                    open={Boolean(this.state.anchorEl)}\n                    anchorEl={this.state.anchorEl}\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n                    onClose={this.closePanel}\n                    style={{\n                        height: '100%',\n                        fontFamily: theme.typography.fontFamily,\n                    }}\n                >\n                    <DimensionsPanel\n                        dimensions={dimensions}\n                        onDimensionClick={this.selectDimension}\n                        selectedIds={selectedDimensions}\n                    />\n                </Popover>\n                {dimension ? (\n                    <FilterDialog\n                        displayNameProperty={displayNameProperty}\n                        dimension={dimension}\n                        selectedItems={selectedItems[dimension.id] || []}\n                        onSelect={this.onSelectItems}\n                        onDeselect={this.onDeselectItems}\n                        onReorder={this.onReorderItems}\n                        onClose={this.closeDialog}\n                        onConfirm={this.saveFilter}\n                    />\n                ) : null}\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    displayNameProperty: sGetSettingsDisplayNameProperty(state),\n    dimension: sGetActiveModalDimension(state),\n    dimensions: sGetDimensions(state),\n    selectedDimensions: sGetFiltersKeys(state),\n    selectedItems: sGetEditItemFiltersRoot(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    {\n        clearActiveModalDimension: acClearActiveModalDimension,\n        setActiveModalDimension: acSetActiveModalDimension,\n        addItemFilter: acAddItemFilter,\n        removeItemFilter: acRemoveItemFilter,\n        removeEditItemFilter: acRemoveEditItemFilter,\n        setEditItemFilters: acSetEditItemFilters,\n    }\n)(withTheme()(FilterSelector));\n","import React, { Component } from 'react';\nimport InfoOutlineIcon from '@material-ui/icons/InfoOutlined';\nimport { colors } from '../../modules/colors';\n\nclass Info extends Component {\n    show = false;\n\n    toggle() {\n        this.show = !this.show;\n        return this.show;\n    }\n\n    render() {\n        return (\n            <div onClick={() => this.props.onClick(this.toggle())}>\n                <InfoOutlineIcon style={{ fill: colors.muiDefaultGrey }} />\n            </div>\n        );\n    }\n}\n\nexport default Info;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport i18n from '@dhis2/d2-i18n';\nimport SharingDialog from '@dhis2/d2-ui-sharing-dialog';\nimport Star from '@material-ui/icons/Star';\nimport StarBorder from '@material-ui/icons/StarBorder';\n\nimport { orObject } from '../../modules/util';\nimport { tStarDashboard } from '../../actions/dashboards';\nimport { acSetSelectedShowDescription } from '../../actions/selected';\nimport FilterSelector from '../ItemFilter/FilterSelector';\nimport { Button } from '@dhis2/ui-core';\nimport Info from './Info';\nimport {\n    sGetSelectedId,\n    sGetSelectedShowDescription,\n} from '../../reducers/selected';\nimport {\n    sGetDashboardById,\n    sGetDashboardItems,\n} from '../../reducers/dashboards';\nimport { colors } from '../../modules/colors';\n\nconst NO_DESCRIPTION = i18n.t('No description');\n\nconst styles = {\n    actions: {\n        display: 'flex',\n        alignItems: 'center',\n        marginLeft: '20px',\n    },\n    starIcon: {\n        fill: colors.muiDefaultGrey,\n    },\n    textButton: {\n        minWidth: '30px',\n        top: '1px',\n    },\n    editLink: {\n        display: 'inline-block',\n        verticalAlign: 'top',\n        textDecoration: 'none',\n        marginRight: '4px',\n    },\n    titleBar: {\n        display: 'flex',\n        alignItems: 'flex-start',\n    },\n    titleBarIcon: {\n        marginLeft: 5,\n        position: 'relative',\n        top: 1,\n        cursor: 'pointer',\n    },\n};\n\nclass ViewTitleBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            sharingDialogIsOpen: false,\n        };\n    }\n\n    toggleSharingDialog = () =>\n        this.setState({ sharingDialogIsOpen: !this.state.sharingDialogIsOpen });\n\n    render() {\n        const {\n            id,\n            name,\n            description,\n            access,\n            style,\n            showDescription,\n            starred,\n            onStarClick,\n            onInfoClick,\n            classes,\n        } = this.props;\n\n        const titleStyle = Object.assign({}, style.title, {\n            cursor: 'default',\n            userSelect: 'text',\n            top: '7px',\n        });\n\n        const StarIcon = starred ? Star : StarBorder;\n\n        return (\n            <Fragment>\n                <div className={classes.titleBar}>\n                    <span style={titleStyle}>{name}</span>\n                    <div className={classes.actions}>\n                        <div\n                            className={classes.titleBarIcon}\n                            onClick={onStarClick}\n                        >\n                            <StarIcon className={classes.starIcon} />\n                        </div>\n                        <div className={classes.titleBarIcon}>\n                            <Info onClick={onInfoClick} />\n                        </div>\n                        <div style={{ marginLeft: '10px' }}>\n                            {access.update ? (\n                                <Link\n                                    className={classes.editLink}\n                                    to={`/${id}/edit`}\n                                >\n                                    <Button>{i18n.t('Edit')}</Button>\n                                </Link>\n                            ) : null}\n                            {access.manage ? (\n                                <span style={{ marginRight: '4px' }}>\n                                    <Button onClick={this.toggleSharingDialog}>\n                                        {i18n.t('Share')}\n                                    </Button>\n                                </span>\n                            ) : null}\n                            <span style={{ marginRight: '4px' }}>\n                                <FilterSelector />\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                {showDescription ? (\n                    <div\n                        className=\"dashboard-description\"\n                        style={Object.assign(\n                            { paddingTop: '5px', paddingBottom: '5px' },\n                            style.description,\n                            !description ? { color: '#888' } : {}\n                        )}\n                    >\n                        {description || NO_DESCRIPTION}\n                    </div>\n                ) : null}\n                {id ? (\n                    <SharingDialog\n                        d2={this.context.d2}\n                        id={id}\n                        type=\"dashboard\"\n                        open={this.state.sharingDialogIsOpen}\n                        onRequestClose={this.toggleSharingDialog}\n                    />\n                ) : null}\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const id = sGetSelectedId(state);\n    const dashboard = orObject(sGetDashboardById(state, id));\n\n    return {\n        id,\n        name: dashboard.displayName,\n        description: dashboard.displayDescription,\n        dashboardItems: sGetDashboardItems(state),\n        showDescription: sGetSelectedShowDescription(state),\n        starred: dashboard.starred,\n        access: orObject(dashboard.access),\n    };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    const { id, starred, showDescription } = stateProps;\n    const { dispatch } = dispatchProps;\n\n    return {\n        ...stateProps,\n        ...ownProps,\n        onStarClick: () => dispatch(tStarDashboard(id, !starred)),\n        onInfoClick: () =>\n            dispatch(acSetSelectedShowDescription(!showDescription)),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    null,\n    mergeProps\n)(withStyles(styles)(ViewTitleBar));\n\nViewTitleBar.propTypes = {\n    id: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    starred: PropTypes.bool,\n    showDescription: PropTypes.bool,\n    onInfoClick: PropTypes.func,\n};\n\nViewTitleBar.defaultProps = {\n    name: '',\n    description: '',\n    starred: false,\n    showDescription: false,\n    onInfoClick: null,\n};\n\nViewTitleBar.contextTypes = {\n    d2: PropTypes.object,\n};\n","import React from 'react';\n\nimport { colors } from '../../modules/colors';\nimport EditTitleBar from './EditTitleBar';\nimport ViewTitleBar from './ViewTitleBar';\n\nimport './TitleBar.css';\n\nconst style = {\n    title: {\n        position: 'relative',\n        fontSize: 21,\n        fontWeight: 500,\n        color: colors.black,\n        minWidth: 50,\n    },\n    description: {\n        fontSize: 14,\n        color: colors.darkGrey,\n    },\n};\n\nconst TitleBar = ({ edit }) => {\n    return (\n        <div\n            className=\"titlebar-wrapper\"\n            style={{\n                padding: '20px 15px 5px 10px',\n            }}\n        >\n            {edit ? (\n                <EditTitleBar style={style} />\n            ) : (\n                <ViewTitleBar style={style} />\n            )}\n        </div>\n    );\n};\n\nexport default TitleBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport i18n from '@dhis2/d2-i18n';\n\nimport * as pluginManager from './plugin';\nimport { getBaseUrl, orObject } from '../../../modules/util';\nimport { getGridItemDomId } from '../../ItemGrid/gridUtil';\n\nconst pluginCredentials = d2 => {\n    return {\n        baseUrl: getBaseUrl(d2),\n        auth: d2.Api.getApi().defaultHeaders.Authorization,\n    };\n};\n\nclass DefaultPlugin extends Component {\n    pluginCredentials = null;\n\n    constructor(props, context) {\n        super(props);\n\n        this.d2 = context.d2;\n    }\n\n    shouldPluginReload = prevProps => {\n        // TODO - fix this hack, to handle bug with multiple\n        // rerendering while switching between dashboards.\n        //\n        // To determine if the rendering is happening because of a\n        // dashboard switch, check if the item reference has changed.\n        const reloadAllowed = this.props.item === prevProps.item;\n\n        const filtersChanged = prevProps.itemFilters !== this.props.itemFilters;\n        const vis = orObject(this.props.visualization);\n        const prevVis = orObject(prevProps.visualization);\n        const visChanged =\n            vis.id !== prevVis.id || vis.activeType !== prevVis.activeType;\n\n        return reloadAllowed && (visChanged || filtersChanged);\n    };\n\n    reloadPlugin = prevProps => {\n        if (\n            pluginManager.pluginIsAvailable(\n                this.props.item,\n                this.props.visualization\n            ) &&\n            this.shouldPluginReload(prevProps)\n        ) {\n            const prevVis = orObject(prevProps.visualization);\n            const currentVis = this.props.visualization;\n\n            const useActiveType =\n                currentVis.activeType !== prevVis.activeType ||\n                currentVis.activeType !== this.props.item.type;\n\n            if (\n                useActiveType ||\n                this.props.itemFilters !== prevProps.itemFilters\n            ) {\n                pluginManager.unmount(\n                    this.props.item,\n                    prevVis.activeType || this.props.item.type\n                );\n\n                pluginManager.load(\n                    this.props.item,\n                    this.props.visualization,\n                    this.pluginCredentials,\n                    useActiveType ? currentVis.activeType : null\n                );\n            }\n        }\n    };\n\n    componentDidMount() {\n        this.pluginCredentials = pluginCredentials(this.d2);\n\n        if (\n            pluginManager.pluginIsAvailable(\n                this.props.item,\n                this.props.visualization\n            )\n        ) {\n            pluginManager.load(\n                this.props.item,\n                this.props.visualization,\n                this.pluginCredentials,\n                !this.props.editMode ? this.getActiveType() : null\n            );\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        this.reloadPlugin(prevProps);\n    }\n\n    getActiveType = () =>\n        this.props.visualization.activeType || this.props.item.type;\n\n    render() {\n        const { classes, item, visualization, style } = this.props;\n        const pluginIsAvailable = pluginManager.pluginIsAvailable(\n            item,\n            visualization\n        );\n\n        return pluginIsAvailable ? (\n            <div id={getGridItemDomId(item.id)} style={style} />\n        ) : (\n            <div className={classes.textDiv}>\n                {i18n.t('Unable to load the plugin for this item')}\n            </div>\n        );\n    }\n}\n\nDefaultPlugin.contextTypes = {\n    d2: PropTypes.object,\n};\n\nDefaultPlugin.propTypes = {\n    style: PropTypes.object,\n    item: PropTypes.object,\n    itemFilters: PropTypes.object,\n    visualization: PropTypes.object,\n};\n\nDefaultPlugin.defaultProps = {\n    style: {},\n    item: {},\n    itemFilters: {},\n    visualization: {},\n};\n\nexport default DefaultPlugin;\n","import React from 'react';\n\nexport const HEADER_HEIGHT = 45;\n\nconst ItemHeader = props => {\n    const { title, actionButtons, editMode } = props;\n\n    return (\n        <div className=\"dashboard-item-header\">\n            <div\n                className=\"dashboard-item-header-title\"\n                style={{ userSelect: editMode ? 'none' : 'text' }}\n            >\n                {title}\n            </div>\n            {actionButtons}\n        </div>\n    );\n};\n\nexport default ItemHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { colors } from '../../../modules/colors';\nimport { getId } from './plugin';\nimport InterpretationsComponent from '@dhis2/d2-ui-interpretations';\n\nconst style = {\n    scrollContainer: {\n        overflowY: 'auto',\n        height: '340px',\n    },\n    line: {\n        margin: '-1px 0px 0px',\n        height: '1px',\n        border: 'none',\n        backgroundColor: colors.lightGrey,\n    },\n};\n\nclass ItemFooter extends Component {\n    render() {\n        const objectId = getId(this.props.item);\n\n        return (\n            <div className=\"dashboard-item-footer\">\n                <hr style={style.line} />\n                <div style={style.scrollContainer}>\n                    <InterpretationsComponent\n                        d2={this.context.d2}\n                        item={this.props.item}\n                        type={this.props.item.type.toLowerCase()}\n                        id={objectId}\n                        appName=\"dashboard\"\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nItemFooter.contextTypes = {\n    d2: PropTypes.object.isRequired,\n};\n\nItemFooter.propTypes = {\n    item: PropTypes.object.isRequired,\n};\n\nexport default ItemFooter;\n","import React from 'react';\n\nimport './ItemHeaderButton.css';\n\nconst ItemHeaderButton = ({ disabled, onClick, children, style }) => {\n    return (\n        <button\n            disabled={disabled}\n            type=\"button\"\n            className=\"item-action-button\"\n            style={style}\n            onClick={onClick}\n        >\n            {children}\n        </button>\n    );\n};\n\nexport default ItemHeaderButton;\n","import React, { Component, Fragment } from 'react';\nimport MessageIcon from '@material-ui/icons/Message';\nimport TableIcon from '@material-ui/icons/ViewList';\nimport ChartIcon from '@material-ui/icons/InsertChart';\nimport MapIcon from '@material-ui/icons/Public';\n\nimport { extractFavorite } from './plugin';\nimport ItemHeaderButton from '../ItemHeaderButton';\nimport {\n    VISUALIZATION_TYPE_TABLE,\n    VISUALIZATION_TYPE_CHART,\n    VISUALIZATION_TYPE_MAP,\n    itemTypeMap,\n    CHART,\n    MAP,\n    REPORT_TABLE,\n    EVENT_CHART,\n    EVENT_REPORT,\n    DOMAIN_TYPE_AGGREGATE,\n} from '../../../modules/itemTypes';\nimport { colors } from '../../../modules/colors';\n\nconst style = {\n    iconBase: {\n        width: '24px',\n        height: '24px',\n        fill: colors.lightMediumGrey,\n    },\n    buttonBase: {\n        padding: '5px 6px 3px 6px',\n    },\n    buttonDisabled: {\n        padding: '5px 6px 3px 6px',\n        opacity: 0.5,\n        cursor: 'unset',\n    },\n    toggleFooterPadding: {\n        padding: '7px 6px 1px 6px',\n    },\n    border: {\n        borderRadius: '2px',\n        border: `1px solid ${colors.lightGrey}`,\n    },\n};\n\nconst baseStyle = {\n    icon: style.iconBase,\n    container: style.buttonBase,\n};\n\nconst disabledStyle = {\n    icon: style.iconBase,\n    container: style.buttonDisabled,\n};\n\nconst activeStyle = {\n    icon: { ...style.iconBase, fill: colors.royalBlue },\n    container: {\n        ...style.buttonBase,\n        backgroundColor: colors.lightBlue,\n    },\n};\n\nconst inactiveStyle = disabled => (disabled ? disabledStyle : baseStyle);\n\nconst tableBtnStyle = (activeType, disabled) =>\n    [REPORT_TABLE, EVENT_REPORT].includes(activeType)\n        ? activeStyle\n        : inactiveStyle(disabled);\n\nconst chartBtnStyle = (activeType, disabled) =>\n    [CHART, EVENT_CHART].includes(activeType)\n        ? activeStyle\n        : inactiveStyle(disabled);\n\nconst mapBtnStyle = (activeType, disabled) =>\n    [MAP].includes(activeType) ? activeStyle : inactiveStyle(disabled);\n\nexport const getItemTypeId = (itemTypeMap, visualizationType, domainType) => {\n    const item = Object.values(itemTypeMap).find(\n        item =>\n            item.visualizationType === visualizationType &&\n            item.domainType === domainType\n    );\n    return item.id;\n};\n\nclass VisualizationItemHeaderButtons extends Component {\n    render() {\n        const {\n            item,\n            onSelectVisualization,\n            activeFooter,\n            activeType,\n            onToggleFooter,\n        } = this.props;\n\n        const domainType = itemTypeMap[item.type].domainType;\n\n        const onViewTable = () =>\n            onSelectVisualization(\n                getItemTypeId(itemTypeMap, VISUALIZATION_TYPE_TABLE, domainType)\n            );\n\n        const onViewChart = () =>\n            onSelectVisualization(\n                getItemTypeId(itemTypeMap, VISUALIZATION_TYPE_CHART, domainType)\n            );\n\n        const onViewMap = () =>\n            onSelectVisualization(\n                getItemTypeId(itemTypeMap, VISUALIZATION_TYPE_MAP, domainType)\n            );\n\n        const toggleFooterBase = activeFooter ? activeStyle : baseStyle;\n\n        const toggleFooter = {\n            ...toggleFooterBase,\n            container: {\n                ...toggleFooterBase.container,\n                ...style.toggleFooterPadding,\n                ...style.border,\n            },\n        };\n\n        // disable toggle buttons\n        let disabled = false;\n\n        if (item.type === VISUALIZATION_TYPE_CHART) {\n            if (extractFavorite(item).type.match(/^YEAR_OVER_YEAR/)) {\n                disabled = true;\n            }\n        }\n\n        const tableButtonStyle = tableBtnStyle(activeType, disabled);\n        const chartButtonStyle = chartBtnStyle(activeType, disabled);\n        const mapButtonStyle = mapBtnStyle(activeType, disabled);\n\n        return (\n            <Fragment>\n                <div style={{ marginRight: 10 }}>\n                    <ItemHeaderButton\n                        style={toggleFooter.container}\n                        onClick={onToggleFooter}\n                    >\n                        <MessageIcon style={toggleFooter.icon} />\n                    </ItemHeaderButton>\n                </div>\n                <div style={style.border}>\n                    <ItemHeaderButton\n                        disabled={disabled}\n                        style={tableButtonStyle.container}\n                        onClick={onViewTable}\n                    >\n                        <TableIcon style={tableButtonStyle.icon} />\n                    </ItemHeaderButton>\n                    <ItemHeaderButton\n                        disabled={disabled}\n                        style={chartButtonStyle.container}\n                        onClick={onViewChart}\n                    >\n                        <ChartIcon style={chartButtonStyle.icon} />\n                    </ItemHeaderButton>\n                    {domainType === DOMAIN_TYPE_AGGREGATE ? (\n                        <ItemHeaderButton\n                            disabled={disabled}\n                            style={mapButtonStyle.container}\n                            onClick={onViewMap}\n                        >\n                            <MapIcon style={mapButtonStyle.icon} />\n                        </ItemHeaderButton>\n                    ) : null}\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default VisualizationItemHeaderButtons;\n","// Note that this ignores discrepancies in 'this', so shouldn't be used with bound functions\n// This is useful instead of lodash/memoize when we only need to memoize a single value\n// Inspiration: https://github.com/alexreardon/memoize-one\n\nconst memoizeOne = fn => {\n    let lastArgs = undefined;\n    let lastValue = undefined;\n\n    return (...args) => {\n        if (\n            lastArgs &&\n            args.length === lastArgs.length &&\n            args.every((arg, i) => arg === lastArgs[i])\n        ) {\n            return lastValue;\n        }\n        lastArgs = args;\n        lastValue = fn(...args);\n        return lastValue;\n    };\n};\n\nexport default memoizeOne;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport ChartPlugin from '@dhis2/data-visualizer-plugin';\n\nimport i18n from '@dhis2/d2-i18n';\nimport uniqueId from 'lodash/uniqueId';\n\nimport DefaultPlugin from './DefaultPlugin';\nimport ItemHeader, { HEADER_HEIGHT } from '../ItemHeader';\nimport ItemFooter from './ItemFooter';\nimport VisualizationItemHeaderButtons from './ItemHeaderButtons';\nimport * as pluginManager from './plugin';\nimport { sGetVisualization } from '../../../reducers/visualizations';\nimport { sGetItemFiltersRoot } from '../../../reducers/itemFilters';\nimport {\n    acReceivedVisualization,\n    acReceivedActiveVisualization,\n} from '../../../actions/selected';\nimport { CHART, MAP, itemTypeMap } from '../../../modules/itemTypes';\nimport { colors } from '../../../modules/colors';\nimport memoizeOne from '../../../modules/memoizeOne';\nimport { getVisualizationConfig } from './plugin';\n\nconst styles = {\n    icon: {\n        width: 16,\n        height: 16,\n        marginLeft: 3,\n        cursor: 'pointer',\n        fill: colors.muiDefaultGrey,\n    },\n    title: {\n        overflow: 'hidden',\n        maxWidth: '85%',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n    },\n    textDiv: {\n        fontSize: '14px',\n        fontStretch: 'normal',\n        padding: '10px',\n        lineHeight: '20px',\n    },\n};\n\nconst applyFilters = (visualization, filters) => {\n    if (!Object.keys(filters).length) {\n        return visualization;\n    }\n\n    // deep clone objects in filters to avoid changing the visualization in the Redux store\n    const visRows = visualization.rows.map(obj => ({ ...obj }));\n    const visColumns = visualization.columns.map(obj => ({ ...obj }));\n    const visFilters = visualization.filters.map(obj => ({ ...obj }));\n\n    Object.keys(filters).forEach(dimensionId => {\n        if (filters[dimensionId]) {\n            let dimensionFound = false;\n\n            [visRows, visColumns, visFilters].forEach(dimensionObjects =>\n                dimensionObjects\n                    .filter(obj => obj.dimension === dimensionId)\n                    .forEach(obj => {\n                        dimensionFound = true;\n                        obj.items = filters[dimensionId];\n                    })\n            );\n\n            // add dimension to filters if not already present elsewhere\n            if (!dimensionFound) {\n                visFilters.push({\n                    dimension: dimensionId,\n                    items: filters[dimensionId],\n                });\n            }\n        }\n    });\n\n    return {\n        ...visualization,\n        rows: visRows,\n        columns: visColumns,\n        filters: visFilters,\n    };\n};\n\nexport class Item extends Component {\n    state = {\n        showFooter: false,\n        configLoaded: false,\n    };\n\n    constructor(props, context) {\n        super(props);\n\n        this.d2 = context.d2;\n\n        this.contentRef = React.createRef();\n    }\n\n    async componentDidMount() {\n        this.props.onVisualizationLoaded(\n            // TODO do not call fetch on the pluginManager, do it here as the manager will eventually be removed...\n            await pluginManager.fetch(this.props.item)\n        );\n\n        this.setState({\n            configLoaded: true,\n        });\n    }\n\n    getUniqueKey = memoizeOne(() => uniqueId());\n\n    pluginCredentials = null;\n\n    getPluginComponent = () => {\n        const visualization = getVisualizationConfig(\n            this.props.visualization,\n            this.props.item.type,\n            this.getActiveType()\n        );\n\n        if (!visualization) {\n            return (\n                <div className={this.props.classes.textDiv}>\n                    {i18n.t('No data to display')}\n                </div>\n            );\n        }\n\n        const props = {\n            ...this.props,\n            visualization,\n            style: this.getContentStyle(),\n        };\n\n        switch (this.getActiveType()) {\n            case CHART: {\n                return (\n                    <ChartPlugin\n                        d2={this.d2}\n                        config={applyFilters(\n                            props.visualization,\n                            props.itemFilters\n                        )}\n                        forDashboard={true}\n                        style={props.style}\n                    />\n                );\n            }\n            case MAP: {\n                if (props.item.type === MAP) {\n                    // apply filters only to thematic and event layers\n                    // for maps AO\n                    const mapViews = props.visualization.mapViews.map(obj => {\n                        if (\n                            obj.layer.includes('thematic') ||\n                            obj.layer.includes('event')\n                        ) {\n                            return applyFilters(obj, props.itemFilters);\n                        }\n\n                        return obj;\n                    });\n\n                    props.visualization = {\n                        ...props.visualization,\n                        mapViews,\n                    };\n                } else {\n                    // this is the case of a non map AO passed to the maps plugin\n                    // due to a visualization type switch in dashboard item\n                    // maps plugin takes care of converting the AO to a suitable format\n                    props.visualization = applyFilters(\n                        props.visualization,\n                        props.itemFilters\n                    );\n                }\n\n                return <DefaultPlugin {...props} />;\n            }\n            default: {\n                props.visualization = applyFilters(\n                    props.visualization,\n                    props.itemFilters\n                );\n\n                return <DefaultPlugin {...props} />;\n            }\n        }\n    };\n\n    onToggleFooter = () => {\n        this.setState(\n            { showFooter: !this.state.showFooter },\n            this.props.onToggleItemExpanded(this.props.item.id)\n        );\n    };\n\n    onSelectVisualization = activeType => {\n        // Cancel request if type is already active\n        if (activeType === this.getActiveType()) {\n            return;\n        }\n\n        pluginManager.unmount(this.props.item, this.getActiveType());\n\n        this.props.onSelectVisualization(\n            this.props.visualization.id,\n            this.props.item.type,\n            activeType\n        );\n    };\n\n    getActiveType = () =>\n        this.props.visualization.activeType || this.props.item.type;\n\n    pluginIsAvailable = () =>\n        pluginManager.pluginIsAvailable(\n            this.props.item,\n            this.props.visualization\n        );\n\n    getTitle = () => {\n        const { item, editMode, classes } = this.props;\n        const itemName = pluginManager.getName(item);\n\n        return (\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n                <span className={classes.title} title={itemName}>\n                    {itemName}\n                </span>\n                {!editMode && this.pluginIsAvailable() ? (\n                    <a\n                        href={pluginManager.getLink(this.props.item, this.d2)}\n                        style={{ height: 16 }}\n                        title={`View in ${\n                            itemTypeMap[this.props.item.type].appName\n                        } app`}\n                    >\n                        <LaunchIcon className={classes.icon} />\n                    </a>\n                ) : null}\n            </div>\n        );\n    };\n\n    getActionButtons = () =>\n        pluginManager.pluginIsAvailable(\n            this.props.item,\n            this.props.visualization\n        ) && !this.props.editMode ? (\n            <VisualizationItemHeaderButtons\n                item={this.props.item}\n                activeFooter={this.state.showFooter}\n                activeType={this.getActiveType()}\n                onSelectVisualization={this.onSelectVisualization}\n                onToggleFooter={this.onToggleFooter}\n            />\n        ) : null;\n\n    getContentStyle = () => {\n        const { item, editMode } = this.props;\n        const PADDING_BOTTOM = 4;\n\n        return !editMode\n            ? {\n                  height: item.originalHeight - HEADER_HEIGHT - PADDING_BOTTOM,\n              }\n            : { height: this.contentRef.offsetHeight };\n    };\n\n    render() {\n        const { item, editMode, itemFilters } = this.props;\n        const { showFooter } = this.state;\n\n        return (\n            <Fragment>\n                <ItemHeader\n                    title={this.getTitle()}\n                    actionButtons={this.getActionButtons()}\n                    editMode={editMode}\n                />\n                <div\n                    key={this.getUniqueKey(itemFilters)}\n                    className=\"dashboard-item-content\"\n                    ref={ref => (this.contentRef = ref)}\n                >\n                    {this.state.configLoaded && this.getPluginComponent()}\n                </div>\n                {!editMode && showFooter ? <ItemFooter item={item} /> : null}\n            </Fragment>\n        );\n    }\n}\n\nItem.contextTypes = {\n    d2: PropTypes.object,\n};\n\nItem.propTypes = {\n    item: PropTypes.object,\n    editMode: PropTypes.bool,\n    onToggleItemExpanded: PropTypes.func,\n    itemFilters: PropTypes.object,\n    visualization: PropTypes.object,\n};\n\nItem.defaultProps = {\n    item: {},\n    editMode: false,\n    onToggleItemExpanded: Function.prototype,\n    itemFilters: {},\n    visualization: {},\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    itemFilters: sGetItemFiltersRoot(state),\n    visualization: sGetVisualization(\n        state,\n        pluginManager.extractFavorite(ownProps.item).id\n    ),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onVisualizationLoaded: visualization =>\n        dispatch(acReceivedVisualization(visualization)),\n    onSelectVisualization: (id, type, activeType) =>\n        dispatch(acReceivedActiveVisualization(id, type, activeType)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withStyles(styles)(Item));\n","import React from 'react';\nimport { colors } from '../modules/colors';\n\nconst style = {\n    backgroundColor: colors.lightGrey,\n    border: 'none',\n    height: '1px',\n    margin: '0px 0px 5px 0px',\n};\n\nconst Line = props => <hr style={style} />;\n\nexport default Line;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\n\nimport { sGetMessagesRoot } from '../../../reducers/messages';\nimport { formatDate } from '../../../modules/util';\nimport { colors } from '../../../modules/colors';\nimport ItemHeader from '../ItemHeader';\nimport Line from '../../../widgets/Line';\n\nimport './MessagesItem.css';\n\nconst PRIVATE = 'PRIVATE';\n\nconst messageTypes = {\n    [PRIVATE]: 'Private',\n    VALIDATION_RESULT: 'Validation',\n    TICKET: 'Ticket',\n    SYSTEM: 'System',\n};\n\nconst style = {\n    list: {\n        listStyleType: 'none',\n        paddingLeft: '0px',\n    },\n    seeAll: {\n        textAlign: 'center',\n        fontSize: '13px',\n        marginBottom: '5px',\n    },\n    sender: {\n        fontSize: '13px',\n        lineHeight: '15px',\n        margin: 0,\n        color: colors.darkGrey,\n    },\n    snippet: {\n        color: colors.darkGrey,\n        fontSize: '13px',\n        lineHeight: '15px',\n        maxHeight: '30px',\n        overflow: 'hidden',\n    },\n};\n\nclass MessagesItem extends Component {\n    state = {\n        uiLocale: '',\n    };\n\n    async componentDidMount() {\n        const uiLocale = await this.context.d2.currentUser.userSettings.get(\n            'keyUiLocale'\n        );\n\n        this.setState({ uiLocale });\n    }\n\n    getMessageHref = msg => {\n        const msgIdentifier = msg ? `#/${msg.messageType}/${msg.id}` : '';\n        return `${this.context.baseUrl}/dhis-web-messaging/${msgIdentifier}`;\n    };\n\n    getMessageSender = msg => {\n        const latestMsg = msg.messages.slice(-1)[0];\n        return latestMsg.sender ? latestMsg.sender.displayName : '';\n    };\n\n    getMessageItems = () => {\n        const editClass = !this.props.editMode ? 'view' : null;\n\n        return this.props.messages.map(msg => {\n            const redirectToMsg = () => {\n                if (!this.props.editMode) {\n                    document.location.href = this.getMessageHref(msg);\n                }\n            };\n\n            const sender =\n                msg.messageType === PRIVATE\n                    ? this.getMessageSender(msg)\n                    : messageTypes[msg.messageType];\n\n            const readClass = !msg.read ? 'unread' : null;\n            const latestMsg = msg.messages.slice(-1)[0];\n            const msgDate = latestMsg.lastUpdated;\n\n            return (\n                <li\n                    className={`message-item ${editClass}`}\n                    key={msg.id}\n                    onClick={redirectToMsg}\n                >\n                    <p className={`message-title ${readClass}`}>\n                        {msg.displayName} ({msg.messageCount})\n                    </p>\n                    <p style={style.sender}>\n                        {sender} - {formatDate(msgDate, this.state.uiLocale)}\n                    </p>\n                    <p style={style.snippet}>{latestMsg.text}</p>\n                </li>\n            );\n        });\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <ItemHeader title={i18n.t('Messages')} />\n                <Line />\n                {this.props.messages.length > 0 && (\n                    <div className=\"dashboard-item-content\">\n                        <ul style={style.list}>{this.getMessageItems()}</ul>\n                        <div style={style.seeAll}>\n                            <a href={this.getMessageHref()}>\n                                {i18n.t('See all messages')}\n                            </a>\n                        </div>\n                    </div>\n                )}\n            </Fragment>\n        );\n    }\n}\n\nMessagesItem.contextTypes = {\n    d2: PropTypes.object,\n    baseUrl: PropTypes.string,\n};\n\nconst mapStateToProps = state => {\n    return {\n        messages: Object.values(sGetMessagesRoot(state)),\n    };\n};\n\nconst MessagesContainer = connect(\n    mapStateToProps,\n    null\n)(MessagesItem);\n\nexport default MessagesContainer;\n","import React, { Fragment } from 'react';\nimport ItemHeader from '../ItemHeader';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\n\nconst NotSupportedItem = props => (\n    <Fragment>\n        <ItemHeader title={`Item type not supported: ${props.item.type}`} />\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '90%',\n            }}\n        >\n            <NotInterestedIcon\n                style={{ width: 100, height: 100, align: 'center' }}\n                color=\"disabled\"\n            />\n        </div>\n    </Fragment>\n);\n\nexport default NotSupportedItem;\n","import React from 'react';\nimport { colors } from '@dhis2/ui-core';\n\nconst DescriptionIcon = ({ className }) => (\n    <svg\n        className={className}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill={colors.grey500}\n    >\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\" />\n    </svg>\n);\n\nexport default DescriptionIcon;\n","import React from 'react';\nimport { colors } from '@dhis2/ui-core';\n\nconst DeleteIcon = ({ className }) => (\n    <svg\n        className={className}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"18\"\n        height=\"18\"\n        viewBox=\"0 0 24 24\"\n        fill={colors.red500}\n    >\n        <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>\n);\n\nexport default DeleteIcon;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { colors } from '@dhis2/ui-core';\nimport DescriptionIcon from '../../../icons/Description';\n\nimport DeleteIcon from '../../../icons/Delete';\nimport Line from '../../../widgets/Line';\nimport { itemTypeMap, getItemUrl } from '../../../modules/itemTypes';\nimport { orArray } from '../../../modules/util';\nimport { tRemoveListItemContent } from './actions';\nimport ItemHeader from '../ItemHeader';\nimport classes from './Item.module.css';\n\nconst getItemTitle = item => itemTypeMap[item.type].pluralTitle;\n\nconst getContentItems = item =>\n    orArray(item[itemTypeMap[item.type].propName]).filter(\n        (item, index, array) =>\n            array.findIndex(el => el.id === item.id) === index\n    );\n\nconst removeContent = (handler, item, contentToRemove) => () => {\n    handler(item, contentToRemove);\n};\n\nconst ListItem = (props, context) => {\n    const { item, editMode, tRemoveListItemContent } = props;\n    const contentItems = getContentItems(item);\n\n    const getLink = contentItem => {\n        const deleteButton = (\n            <button\n                className={classes.deletebutton}\n                onClick={removeContent(\n                    tRemoveListItemContent,\n                    item,\n                    contentItem\n                )}\n            >\n                <DeleteIcon className={classes.deleteicon} />\n            </button>\n        );\n\n        return (\n            <Fragment>\n                <a\n                    className={classes.link}\n                    style={{ color: colors.grey900 }}\n                    href={getItemUrl(item.type, contentItem, context.d2)}\n                >\n                    {contentItem.name}\n                </a>\n                {editMode ? deleteButton : null}\n            </Fragment>\n        );\n    };\n\n    return (\n        <Fragment>\n            <ItemHeader title={getItemTitle(item)} />\n            <Line />\n            <div className=\"dashboard-item-content\">\n                <ul className={classes.list}>\n                    {contentItems.map(contentItem => (\n                        <li className={classes.item} key={contentItem.id}>\n                            <DescriptionIcon className={classes.itemicon} />\n                            {getLink(contentItem)}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </Fragment>\n    );\n};\n\nListItem.contextTypes = {\n    d2: PropTypes.object,\n};\n\nexport default connect(\n    null,\n    {\n        tRemoveListItemContent,\n    }\n)(ListItem);\n","import {\n    acUpdateDashboardItem,\n    acRemoveDashboardItem,\n} from '../../../actions/editDashboard';\nimport { itemTypeMap } from '../../../modules/itemTypes';\n\nexport const tRemoveListItemContent = (dashboardItem, content) => dispatch => {\n    const listItemType = itemTypeMap[dashboardItem.type].propName;\n\n    const newContent = dashboardItem[listItemType].filter(\n        item => item.id !== content.id\n    );\n\n    if (newContent.length) {\n        dashboardItem[listItemType] = newContent;\n        dispatch(acUpdateDashboardItem(dashboardItem));\n    } else {\n        dispatch(acRemoveDashboardItem(dashboardItem));\n    }\n};\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\nimport TextField from '@dhis2/d2-ui-core/text-field/TextField';\nimport {\n    Parser as RichTextParser,\n    Editor as RichTextEditor,\n} from '@dhis2/d2-ui-rich-text';\n\nimport { acUpdateDashboardItem } from '../../../actions/editDashboard';\nimport { sGetEditDashboardItems } from '../../../reducers/editDashboard';\nimport { sGetDashboardItems } from '../../../reducers/dashboards';\nimport ItemHeader from '../ItemHeader';\nimport Line from '../../../widgets/Line';\n\nconst style = {\n    textDiv: {\n        padding: '10px',\n        whiteSpace: 'pre-line',\n        lineHeight: '20px',\n    },\n    textField: {\n        fontSize: '14px',\n        fontStretch: 'normal',\n        width: '90%',\n        margin: '0 auto',\n        display: 'block',\n    },\n    container: {\n        marginBottom: '20px',\n        marginTop: '20px',\n    },\n};\n\nconst TextItem = props => {\n    const { item, editMode, text, acUpdateDashboardItem } = props;\n\n    const onChangeText = text => {\n        const updatedItem = {\n            ...item,\n            text,\n        };\n\n        acUpdateDashboardItem(updatedItem);\n    };\n\n    const viewItem = () => {\n        const textDivStyle = Object.assign({}, style.textField, style.textDiv);\n        return (\n            <div className=\"dashboard-item-content\" style={style.container}>\n                <RichTextParser style={textDivStyle}>{text}</RichTextParser>\n            </div>\n        );\n    };\n\n    const editItem = () => {\n        return (\n            <Fragment>\n                <ItemHeader title={i18n.t('Text item')} />\n                <Line />\n                <div className=\"dashboard-item-content\">\n                    <RichTextEditor onEdit={onChangeText}>\n                        <TextField\n                            value={text}\n                            multiline\n                            rows={1}\n                            fullWidth\n                            style={style.textField}\n                            placeholder={i18n.t('Add text here')}\n                            onChange={onChangeText}\n                        />\n                    </RichTextEditor>\n                </div>\n            </Fragment>\n        );\n    };\n\n    return <Fragment>{editMode ? editItem() : viewItem()}</Fragment>;\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const items = ownProps.editMode\n        ? sGetEditDashboardItems(state)\n        : sGetDashboardItems(state);\n\n    const item = items.find(item => item.id === ownProps.item.id);\n\n    return {\n        text: item ? item.text : '',\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        acUpdateDashboardItem,\n    }\n)(TextItem);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\n\nimport { FILTER_ORG_UNIT } from '../../../actions/itemFilters';\nimport { sGetItemFiltersRoot } from '../../../reducers/itemFilters';\nimport ItemHeader from '../ItemHeader';\nimport Line from '../../../widgets/Line';\n\nconst getIframeSrc = (appDetails, item, itemFilters) => {\n    let iframeSrc = `${appDetails.launchUrl}?dashboardItemId=${item.id}`;\n\n    if (\n        itemFilters &&\n        itemFilters[FILTER_ORG_UNIT] &&\n        itemFilters[FILTER_ORG_UNIT].length\n    ) {\n        const ouIds = itemFilters[FILTER_ORG_UNIT].map(\n            ouPath => ouPath.split('/').slice(-1)[0]\n        );\n\n        iframeSrc += `&userOrgUnit=${ouIds.join(',')}`;\n    }\n\n    return iframeSrc;\n};\n\nconst AppItem = ({ item, itemFilters }, context) => {\n    let appDetails;\n\n    const appKey = item.appKey;\n\n    if (appKey) {\n        appDetails = context.d2.system.installedApps.find(\n            app => app.key === appKey\n        );\n    }\n\n    return appDetails && appDetails.name && appDetails.launchUrl ? (\n        <Fragment>\n            <ItemHeader title={appDetails.name} />\n            <Line />\n            <iframe\n                title={appDetails.name}\n                src={getIframeSrc(appDetails, item, itemFilters)}\n                className=\"dashboard-item-content\"\n                style={{ border: 'none' }}\n            />\n        </Fragment>\n    ) : (\n        <Fragment>\n            <ItemHeader title={`${appKey} app not found`} />\n            <Line />\n            <div\n                className=\"dashboard-item-content\"\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    height: '90%',\n                }}\n            >\n                <NotInterestedIcon\n                    color=\"disabled\"\n                    disabled\n                    style={{ width: 100, height: 100, align: 'center' }}\n                />\n            </div>\n        </Fragment>\n    );\n};\n\nAppItem.contextTypes = {\n    d2: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n    itemFilters: sGetItemFiltersRoot(state),\n});\n\nexport default connect(mapStateToProps)(AppItem);\n","import React, { Fragment } from 'react';\nimport i18n from '@dhis2/d2-i18n';\n\nimport { colors } from '../../../modules/colors';\nimport ItemHeader from '../ItemHeader';\n\nconst style = {\n    margin: '21px 28px',\n    fontSize: '14px',\n    lineHeight: '18px',\n    color: colors.charcoalGrey,\n};\n\nconst SpacerItem = () => {\n    return (\n        <Fragment>\n            <ItemHeader title={i18n.t('Spacer')} />\n            <p style={style}>\n                {i18n.t(\n                    'Use a spacer to create empty vertical space between other dashboard items.'\n                )}\n            </p>\n        </Fragment>\n    );\n};\n\nexport default SpacerItem;\n","import React from 'react';\n\nimport VisualizationItem from './VisualizationItem/Item';\nimport MessagesItem from './MessagesItem/Item';\nimport NotSupportedItem from './NotSupportedItem/Item';\nimport ListItem from './ListItem/Item';\nimport TextItem from './TextItem/Item';\nimport AppItem from './AppItem/Item';\nimport SpacerItem from './SpacerItem/Item';\nimport {\n    APP,\n    REPORT_TABLE,\n    CHART,\n    MAP,\n    EVENT_CHART,\n    EVENT_REPORT,\n    MESSAGES,\n    REPORTS,\n    RESOURCES,\n    USERS,\n    TEXT,\n    SPACER,\n} from '../../modules/itemTypes';\nimport { DEFAULT_STATE_ITEM_FILTERS } from '../../reducers/itemFilters';\n\nconst getGridItem = type => {\n    switch (type) {\n        case REPORT_TABLE:\n        case CHART:\n        case MAP:\n        case EVENT_CHART:\n        case EVENT_REPORT:\n            return VisualizationItem;\n        case MESSAGES:\n            return MessagesItem;\n        case REPORTS:\n        case RESOURCES:\n        case USERS:\n            return ListItem;\n        case TEXT:\n            return TextItem;\n        case SPACER:\n            return SpacerItem;\n        case APP:\n            return AppItem;\n        default:\n            return NotSupportedItem;\n    }\n};\n\nexport const Item = props => {\n    const GridItem = getGridItem(props.item.type);\n\n    return (\n        <GridItem\n            item={props.item}\n            editMode={props.editMode}\n            itemFilters={\n                props.editMode ? DEFAULT_STATE_ITEM_FILTERS : props.itemFilters\n            }\n            onToggleItemExpanded={props.onToggleItemExpanded}\n        />\n    );\n};\n","import React from 'react';\nimport ItemHeaderButton from '../Item/ItemHeaderButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { colors } from '../../modules/colors';\n\nconst style = {\n    button: {\n        position: 'absolute',\n        top: '7px',\n        right: '7px',\n        zIndex: '1000',\n    },\n    icon: {\n        fill: colors.red,\n    },\n};\n\nconst DeleteItemHeaderButton = ({ onClick }) => (\n    <ItemHeaderButton onClick={onClick} style={style.button}>\n        <DeleteIcon style={style.icon} />\n    </ItemHeaderButton>\n);\n\nexport default DeleteItemHeaderButton;\n","import React from 'react';\nimport LoadingMask from '@dhis2/d2-ui-core/loading-mask/LoadingMask.component';\n\nconst styles = {\n    modal: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: 999999998,\n        pointerEvents: 'none',\n    },\n    dark: {\n        backgroundColor: '#000000',\n        opacity: 0.2,\n        zIndex: 999999999,\n    },\n};\n\nconst ModalLoadingMask = ({ isLoading }) => {\n    if (!isLoading) {\n        return null;\n    }\n\n    return (\n        <div className=\"loading-mask-wrapper\">\n            <div style={styles.modal}>\n                <LoadingMask />\n            </div>\n            <div\n                style={{\n                    ...styles.modal,\n                    ...styles.dark,\n                }}\n            />\n        </div>\n    );\n};\n\nexport default ModalLoadingMask;\n","import React from 'react';\nimport { colors } from '../modules/colors';\n\nexport const NoContentMessage = ({ text }) => (\n    <div\n        style={{\n            padding: '50px 10px',\n            textAlign: 'center',\n            fontSize: '15px',\n            fontWeight: 500,\n            color: colors.charcoalGrey,\n        }}\n    >\n        {text}\n    </div>\n);\n\nexport default NoContentMessage;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\n\nconst defaultDebounceMs = 100;\nconst defaultBufferFactor = 0.25;\n\nclass ProgressiveLoadingContainer extends Component {\n    static propTypes = {\n        children: PropTypes.node.isRequired,\n        debounceMs: PropTypes.number,\n        bufferFactor: PropTypes.number,\n    };\n    static defaultProps = {\n        debounceMs: defaultDebounceMs,\n        bufferFactor: defaultBufferFactor,\n    };\n\n    state = {\n        shouldLoad: false,\n    };\n    containerRef = null;\n    shouldLoadHandler = null;\n\n    checkShouldLoad() {\n        const bufferPx = this.props.bufferFactor * window.innerHeight;\n\n        if (!this.containerRef) {\n            return;\n        }\n\n        const rect = this.containerRef.getBoundingClientRect();\n        if (\n            rect.bottom > -bufferPx &&\n            rect.top < window.innerHeight + bufferPx\n        ) {\n            this.setState({\n                shouldLoad: true,\n            });\n\n            this.removeHandler();\n        }\n    }\n\n    registerHandler() {\n        this.shouldLoadHandler = debounce(\n            () => this.checkShouldLoad(),\n            this.props.debounceMs\n        );\n\n        window.addEventListener('scroll', this.shouldLoadHandler);\n    }\n    removeHandler() {\n        window.removeEventListener('scroll', this.shouldLoadHandler);\n    }\n\n    componentDidMount() {\n        this.registerHandler();\n        this.checkShouldLoad();\n    }\n\n    componentWillUnmount() {\n        this.removeHandler();\n    }\n\n    render() {\n        const { children, debounceMs, bufferFactor, ...props } = this.props;\n        const { shouldLoad } = this.state;\n\n        return (\n            <div ref={ref => (this.containerRef = ref)} {...props}>\n                {shouldLoad && children}\n            </div>\n        );\n    }\n}\n\nexport default ProgressiveLoadingContainer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport ReactGridLayout from 'react-grid-layout';\n\nimport {\n    acUpdateDashboardLayout,\n    acRemoveDashboardItem,\n} from '../../actions/editDashboard';\nimport { Item } from '../Item/Item';\nimport { resize as pluginResize } from '../Item/VisualizationItem/plugin';\nimport { isPluginType } from '../../modules/itemTypes';\nimport {\n    GRID_ROW_HEIGHT,\n    GRID_COMPACT_TYPE,\n    ITEM_MIN_HEIGHT,\n    MARGIN,\n    getGridColumns,\n    hasShape,\n    onItemResize,\n} from './gridUtil';\nimport { orArray } from '../../modules/util';\nimport DeleteItemButton from './DeleteItemButton';\nimport ModalLoadingMask from '../../widgets/ModalLoadingMask';\nimport NoContentMessage from '../../widgets/NoContentMessage';\n\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\n\nimport './ItemGrid.css';\nimport { sGetSelectedId, sGetSelectedIsLoading } from '../../reducers/selected';\nimport {\n    sGetEditDashboardRoot,\n    sGetEditDashboardItems,\n} from '../../reducers/editDashboard';\nimport {\n    sGetDashboardById,\n    sGetDashboardItems,\n} from '../../reducers/dashboards';\nimport ProgressiveLoadingContainer from '../Item/ProgressiveLoadingContainer';\n\n// Component\n\nconst EXPANDED_HEIGHT = 17;\n\nexport class ItemGrid extends Component {\n    state = {\n        expandedItems: {},\n    };\n\n    NO_ITEMS_MESSAGE = i18n.t('There are no items on this dashboard');\n\n    onToggleItemExpanded = clickedId => {\n        const isExpanded =\n            typeof this.state.expandedItems[clickedId] === 'boolean'\n                ? this.state.expandedItems[clickedId]\n                : false;\n\n        const expandedItems = { ...this.state.expandedItems };\n        expandedItems[clickedId] = !isExpanded;\n        this.setState({ expandedItems });\n    };\n\n    onRemoveItem = clickedId => {\n        this.props.acRemoveDashboardItem(clickedId);\n    };\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.edit) {\n            this.setState({ expandedItems: {} });\n        }\n    }\n\n    onLayoutChange = newLayout => {\n        if (this.props.edit) {\n            this.props.acUpdateDashboardLayout(newLayout);\n        }\n    };\n\n    onResizeStop = (layout, oldItem, newItem) => {\n        onItemResize(newItem.i);\n\n        const dashboardItem = this.props.dashboardItems.find(\n            item => item.id === newItem.i\n        );\n\n        // call resize on the item component if it's a plugin type\n        if (dashboardItem && isPluginType(dashboardItem)) {\n            pluginResize(dashboardItem);\n        }\n    };\n\n    onRemoveItemWrapper = id => () => this.onRemoveItem(id);\n\n    render() {\n        const { edit, isLoading, dashboardItems } = this.props;\n\n        if (!isLoading && !dashboardItems.length) {\n            return <NoContentMessage text={this.NO_ITEMS_MESSAGE} />;\n        }\n\n        const items = dashboardItems.map((item, index) => {\n            const expandedItem = this.state.expandedItems[item.id];\n            let hProp = { h: item.h };\n\n            if (expandedItem && expandedItem === true) {\n                hProp.h = item.h + EXPANDED_HEIGHT;\n            }\n\n            return Object.assign({}, item, hProp, {\n                i: item.id,\n                minH: ITEM_MIN_HEIGHT,\n            });\n        });\n\n        return (\n            <div className=\"grid-wrapper\">\n                <ModalLoadingMask isLoading={isLoading} />\n                <ReactGridLayout\n                    onLayoutChange={this.onLayoutChange}\n                    onResizeStop={this.onResizeStop}\n                    className=\"layout\"\n                    layout={items}\n                    margin={MARGIN}\n                    cols={getGridColumns()}\n                    rowHeight={GRID_ROW_HEIGHT}\n                    width={window.innerWidth}\n                    compactType={GRID_COMPACT_TYPE}\n                    isDraggable={edit}\n                    isResizable={edit}\n                    draggableCancel=\"input,textarea\"\n                >\n                    {items.map(item => {\n                        const itemClassNames = [\n                            item.type,\n                            edit ? 'edit' : 'view',\n                        ].join(' ');\n\n                        return (\n                            <ProgressiveLoadingContainer\n                                key={item.i}\n                                className={itemClassNames}\n                            >\n                                {edit ? (\n                                    <DeleteItemButton\n                                        onClick={this.onRemoveItemWrapper(\n                                            item.id\n                                        )}\n                                    />\n                                ) : null}\n                                <Item\n                                    item={item}\n                                    editMode={edit}\n                                    onToggleItemExpanded={\n                                        this.onToggleItemExpanded\n                                    }\n                                />\n                            </ProgressiveLoadingContainer>\n                        );\n                    })}\n                </ReactGridLayout>\n            </div>\n        );\n    }\n}\n\nItemGrid.propTypes = {\n    dashboardItems: PropTypes.array,\n};\n\nItemGrid.defaultProps = {\n    dashboardItems: [],\n};\n\n// Container\n\nconst mapStateToProps = (state, ownProps) => {\n    const selectedDashboard = ownProps.edit\n        ? sGetEditDashboardRoot(state)\n        : sGetDashboardById(state, sGetSelectedId(state));\n\n    const dashboardItems = ownProps.edit\n        ? sGetEditDashboardItems(state)\n        : sGetDashboardItems(state);\n\n    return {\n        isLoading: sGetSelectedIsLoading(state) || !selectedDashboard,\n        dashboardItems,\n    };\n};\n\nconst mapDispatchToProps = {\n    acUpdateDashboardLayout,\n    acRemoveDashboardItem,\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    const validItems = orArray(stateProps.dashboardItems).filter(hasShape);\n\n    return {\n        ...dispatchProps,\n        edit: ownProps.edit,\n        isLoading: stateProps.isLoading,\n        dashboardItems: validItems,\n        onItemResize,\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n)(ItemGrid);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport i18n from '@dhis2/d2-i18n';\n\nimport { colors } from '../../modules/colors';\n\nconst styles = {\n    badgeContainer: {\n        margin: '2px',\n        padding: '0 16px',\n        borderRadius: '4px',\n        color: colors.white,\n        backgroundColor: '#212934',\n        height: 36,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    badge: {\n        fontSize: '13px',\n        cursor: 'pointer',\n        whiteSpace: 'nowrap',\n    },\n    badgeRemove: {\n        fontSize: '12px',\n        textDecoration: 'underline',\n        marginLeft: '24px',\n        cursor: 'pointer',\n    },\n};\n\nclass FilterBadge extends Component {\n    onClick = id => () => this.props.onClick(id);\n    onRemove = id => () => this.props.onRemove(id);\n\n    render() {\n        const { data } = this.props;\n\n        return (\n            <div style={styles.badgeContainer}>\n                <span style={styles.badge} onClick={this.onClick(data.id)}>\n                    {`${data.name}: ${\n                        data.values.length > 1\n                            ? i18n.t('{{count}} selected', {\n                                  count: data.values.length,\n                              })\n                            : data.values[0].name\n                    }`}\n                </span>\n                <span\n                    style={styles.badgeRemove}\n                    onClick={this.onRemove(data.id)}\n                >\n                    {i18n.t('Remove')}\n                </span>\n            </div>\n        );\n    }\n}\n\nFilterBadge.propTypes = {\n    data: PropTypes.object.isRequired,\n    onClick: PropTypes.func.isRequired,\n    onRemove: PropTypes.func.isRequired,\n};\n\nFilterBadge.defaultProps = {\n    onClick: Function.prototype,\n    onRemove: Function.prototype,\n};\n\nexport default FilterBadge;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createSelector } from 'reselect';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { sGetDimensions } from '../../reducers/dimensions';\nimport { sGetItemFiltersRoot } from '../../reducers/itemFilters';\nimport { sGetControlBarUserRows } from '../../reducers/controlBar';\nimport { getTopOffset } from '../ControlBar/controlBarDimensions';\nimport { acRemoveItemFilter } from '../../actions/itemFilters';\nimport { acRemoveEditItemFilter } from '../../actions/editItemFilters';\nimport { acSetActiveModalDimension } from '../../actions/activeModalDimension';\n\nimport FilterBadge from './FilterBadge';\n\nconst styles = {\n    bar: {\n        position: 'sticky',\n        zIndex: 7,\n        padding: '8px 0',\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n    },\n};\n\nexport class FilterBar extends Component {\n    onBadgeRemove = id => {\n        this.props.removeItemFilter(id);\n        this.props.removeEditItemFilter(id);\n    };\n\n    onBadgeClick = id => {\n        this.props.setActiveModalDimension({\n            id,\n            name: this.props.filters.find(item => item.id === id).name,\n        });\n    };\n\n    render() {\n        const { filters, userRows, classes } = this.props;\n        const top = getTopOffset(userRows) + 10;\n\n        return filters.length ? (\n            <div className={classes.bar} style={{ top }}>\n                {filters.map(filter => (\n                    <FilterBadge\n                        key={filter.id}\n                        data={filter}\n                        onClick={this.onBadgeClick}\n                        onRemove={this.onBadgeRemove}\n                    />\n                ))}\n            </div>\n        ) : null;\n    }\n}\n\nFilterBar.propTypes = {\n    filters: PropTypes.array.isRequired,\n    removeItemFilter: PropTypes.func.isRequired,\n    removeEditItemFilter: PropTypes.func.isRequired,\n};\n\nFilterBar.defaultProps = {\n    filters: [],\n    removeItemFIlter: Function.prototype,\n    removeEditItemFilter: Function.prototype,\n};\n\n// simplify the filters structure to:\n// [{ id: 'pe', name: 'Period', values: [{ id: 2019: name: '2019' }, {id: 'LAST_MONTH', name: 'Last month' }]}, ...]\nconst filtersSelector = createSelector(\n    [sGetItemFiltersRoot, sGetDimensions],\n    (filters, dimensions) =>\n        Object.keys(filters).reduce((arr, id) => {\n            arr.push({\n                id: id,\n                name: dimensions[id].name,\n                values: filters[id].map(value => ({\n                    id: value.id,\n                    name: value.displayName || value.name,\n                })),\n            });\n\n            return arr;\n        }, [])\n);\n\nconst mapStateToProps = state => ({\n    filters: filtersSelector(state),\n    userRows: sGetControlBarUserRows(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    {\n        setActiveModalDimension: acSetActiveModalDimension,\n        removeItemFilter: acRemoveItemFilter,\n        removeEditItemFilter: acRemoveEditItemFilter,\n    }\n)(withStyles(styles)(FilterBar));\n","import React, { Fragment } from 'react';\nimport TitleBar from '../TitleBar/TitleBar';\nimport ItemGrid from '../ItemGrid/ItemGrid';\nimport FilterBar from '../FilterBar/FilterBar';\n\nexport const DashboardContent = props => (\n    <Fragment>\n        <TitleBar edit={props.editMode} />\n        <FilterBar />\n        <ItemGrid edit={props.editMode} />\n    </Fragment>\n);\n\nexport default DashboardContent;\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport isEmpty from 'lodash/isEmpty';\nimport i18n from '@dhis2/d2-i18n';\n\nimport {\n    sGetAllDashboards,\n    sDashboardsIsFetching,\n} from '../../reducers/dashboards';\nimport { sGetSelectedId } from '../../reducers/selected';\nimport DashboardsBar from '../ControlBar/DashboardsBar';\nimport DashboardVerticalOffset from './DashboardVerticalOffset';\nimport DashboardContent from './DashboardContent';\nimport NoContentMessage from '../../widgets/NoContentMessage';\n\nexport const Content = ({ hasDashboardContent, dashboardsIsEmpty }) => {\n    const msg = dashboardsIsEmpty\n        ? i18n.t(\n              'No dashboards found. Use the + button to create a new dashboard.'\n          )\n        : i18n.t('Requested dashboard not found');\n\n    return hasDashboardContent ? (\n        <DashboardContent editMode={false} />\n    ) : (\n        <NoContentMessage text={msg} />\n    );\n};\n\nexport const ViewDashboard = ({ id, dashboardsIsEmpty, dashboardsLoaded }) => {\n    const hasDashboardContent = id && !dashboardsIsEmpty;\n    const contentNotReady = !dashboardsLoaded || id === null;\n\n    return (\n        <Fragment>\n            <DashboardsBar />\n            <DashboardVerticalOffset />\n            <div className=\"dashboard-wrapper\">\n                {contentNotReady ? null : (\n                    <Content\n                        hasDashboardContent={hasDashboardContent}\n                        dashboardsIsEmpty={dashboardsIsEmpty}\n                    />\n                )}\n            </div>\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = state => {\n    const dashboards = sGetAllDashboards(state);\n\n    return {\n        id: sGetSelectedId(state),\n        dashboardsIsEmpty: isEmpty(dashboards),\n        dashboardsLoaded: !sDashboardsIsFetching(state),\n    };\n};\n\nexport default connect(mapStateToProps)(ViewDashboard);\n","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { Button } from '@dhis2/ui-core';\n\nexport const ConfirmDeleteDialog = ({\n    dashboardName,\n    onDeleteConfirmed,\n    onContinueEditing,\n    open,\n}) => {\n    const actions = [\n        <Button key=\"cancel\" secondary onClick={onContinueEditing}>\n            {i18n.t('Cancel')}\n        </Button>,\n        <Button key=\"delete\" destructive onClick={onDeleteConfirmed}>\n            {i18n.t('Delete')}\n        </Button>,\n    ];\n\n    return (\n        <Dialog open={open} onClose={onContinueEditing}>\n            <DialogTitle style={{ fontSize: '1.25rem', fontWeight: '450' }}>\n                {i18n.t('Delete dashboard')}\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText style={{ fontSize: '0.875rem' }}>\n                    {i18n.t(\n                        'Deleting dashboard \"{{ dashboardName }}\" will remove it for all users. This action cannot be undone. Are you sure you want to permanently delete this dashboard?',\n                        { dashboardName }\n                    )}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>{actions}</DialogActions>\n        </Dialog>\n    );\n};\n\nexport default ConfirmDeleteDialog;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport i18n from '@dhis2/d2-i18n';\nimport ControlBar from '@dhis2/d2-ui-core/control-bar/ControlBar';\nimport TranslationDialog from '@dhis2/d2-ui-translation-dialog';\nimport { Button } from '@dhis2/ui-core';\n\nimport ConfirmDeleteDialog from './ConfirmDeleteDialog';\nimport {\n    tSaveDashboard,\n    acClearEditDashboard,\n} from '../../actions/editDashboard';\nimport {\n    tDeleteDashboard,\n    acSetDashboardDisplayName,\n} from '../../actions/dashboards';\nimport {\n    sGetEditDashboardRoot,\n    sGetIsNewDashboard,\n} from '../../reducers/editDashboard';\nimport {\n    CONTROL_BAR_ROW_HEIGHT,\n    MIN_ROW_COUNT,\n    getControlBarHeight,\n} from './controlBarDimensions';\nimport { apiFetchDashboard } from '../../api/dashboards';\n\nimport './ControlBar.css';\n\nconst buttonBarStyle = {\n    height: CONTROL_BAR_ROW_HEIGHT,\n    paddingTop: '15px',\n    marginLeft: '15px',\n    marginRight: '15px',\n};\n\nexport class EditBar extends Component {\n    state = {\n        translationDialogIsOpen: false,\n        dashboardModel: undefined,\n        confirmDeleteDialogOpen: false,\n        redirectUrl: undefined,\n    };\n\n    onConfirmDelete = () => {\n        this.setState({ confirmDeleteDialogOpen: true });\n    };\n\n    onSave = () => {\n        this.props.onSave().then(newId => {\n            this.setState({ redirectUrl: `/${newId}` });\n        });\n    };\n\n    onDiscard = () => {\n        this.props.onDiscardChanges();\n        const redirectUrl = this.props.dashboardId\n            ? `/${this.props.dashboardId}`\n            : '/';\n        this.setState({ redirectUrl });\n    };\n\n    onContinueEditing = () => {\n        this.setState({ confirmDeleteDialogOpen: false });\n    };\n\n    onDeleteConfirmed = () => {\n        this.setState({ confirmDeleteDialogOpen: false });\n        this.props.onDelete(this.props.dashboardId).then(() => {\n            this.setState({ redirectUrl: '/' });\n        });\n    };\n\n    onTranslationsSaved = async translations => {\n        if (translations && translations.length) {\n            const dbLocale = await this.context.d2.currentUser.userSettings.get(\n                'keyDbLocale'\n            );\n\n            const translation = translations.find(\n                t => t.locale === dbLocale && t.property === 'NAME'\n            );\n\n            if (translation && translation.value) {\n                this.props.onTranslate(\n                    this.props.dashboardId,\n                    translation.value\n                );\n            }\n        }\n    };\n\n    fetchDashboardModel = () => {\n        if (this.props.dashboardId && !this.state.dashboardModel) {\n            apiFetchDashboard(this.props.dashboardId).then(dashboardModel =>\n                this.setState({ dashboardModel })\n            );\n        }\n    };\n\n    componentDidMount() {\n        this.fetchDashboardModel();\n    }\n\n    componentDidUpdate() {\n        this.fetchDashboardModel();\n    }\n\n    toggleTranslationDialog = () => {\n        this.setState({\n            translationDialogIsOpen: !this.state.translationDialogIsOpen,\n        });\n    };\n\n    confirmDeleteDialog = () =>\n        this.props.deleteAccess && this.props.dashboardId ? (\n            <ConfirmDeleteDialog\n                dashboardName={this.props.dashboardName}\n                onDeleteConfirmed={this.onDeleteConfirmed}\n                onContinueEditing={this.onContinueEditing}\n                open={this.state.confirmDeleteDialogOpen}\n            />\n        ) : null;\n\n    translationDialog = () =>\n        this.state.dashboardModel && this.state.dashboardModel.id ? (\n            <TranslationDialog\n                className=\"translation-dialog\"\n                d2={this.context.d2}\n                open={this.state.translationDialogIsOpen}\n                onRequestClose={this.toggleTranslationDialog}\n                objectToTranslate={this.state.dashboardModel}\n                fieldsToTranslate={['name', 'description']}\n                // TODO handle messages in snackbar\n                onTranslationSaved={this.onTranslationsSaved}\n                onTranslationError={err =>\n                    console.log('translation update error', err)\n                }\n            />\n        ) : null;\n\n    render() {\n        if (this.state.redirectUrl) {\n            return <Redirect to={this.state.redirectUrl} />;\n        }\n\n        const { dashboardId, deleteAccess, updateAccess } = this.props;\n        const controlBarHeight = getControlBarHeight(MIN_ROW_COUNT, false);\n\n        const discardBtnText = updateAccess\n            ? i18n.t('Exit without saving')\n            : i18n.t('Go to dashboards');\n\n        return (\n            <Fragment>\n                <ControlBar\n                    height={controlBarHeight}\n                    editMode={true}\n                    expandable={false}\n                >\n                    <div style={buttonBarStyle}>\n                        {updateAccess ? (\n                            <div className=\"left-controls\">\n                                <span style={{ marginRight: '15px' }}>\n                                    <Button primary onClick={this.onSave}>\n                                        {i18n.t('Save changes')}\n                                    </Button>\n                                </span>\n\n                                {dashboardId ? (\n                                    <span style={{ marginRight: '15px' }}>\n                                        <Button\n                                            onClick={\n                                                this.toggleTranslationDialog\n                                            }\n                                        >\n                                            {i18n.t('Translate')}\n                                        </Button>\n                                    </span>\n                                ) : null}\n                                {dashboardId && deleteAccess ? (\n                                    <Button onClick={this.onConfirmDelete}>\n                                        {i18n.t('Delete')}\n                                    </Button>\n                                ) : null}\n                            </div>\n                        ) : null}\n\n                        <div className=\"right-controls\">\n                            <Button secondary onClick={this.onDiscard}>\n                                {discardBtnText}\n                            </Button>\n                        </div>\n                    </div>\n                </ControlBar>\n                {this.translationDialog()}\n                {this.confirmDeleteDialog()}\n            </Fragment>\n        );\n    }\n}\n\nEditBar.contextTypes = {\n    d2: PropTypes.object,\n};\n\nconst mapStateToProps = state => {\n    const dashboard = sGetEditDashboardRoot(state);\n\n    let deleteAccess;\n    let updateAccess;\n    if (sGetIsNewDashboard(state)) {\n        deleteAccess = true;\n        updateAccess = true;\n    } else {\n        updateAccess = dashboard.access ? dashboard.access.update : false;\n        deleteAccess = dashboard.access ? dashboard.access.delete : false;\n    }\n\n    return {\n        dashboardId: dashboard.id,\n        dashboardName: dashboard.name,\n        deleteAccess,\n        updateAccess,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onSave: () => dispatch(tSaveDashboard()).then(id => id),\n    onDelete: id => dispatch(tDeleteDashboard(id)),\n    onDiscardChanges: () => dispatch(acClearEditDashboard()),\n    onTranslate: (id, value) => dispatch(acSetDashboardDisplayName(id, value)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EditBar);\n","import React, { Fragment, Component } from 'react';\nimport { connect } from 'react-redux';\nimport i18n from '@dhis2/d2-i18n';\n\nimport { acSetEditDashboard } from '../../actions/editDashboard';\nimport { sGetSelectedId } from '../../reducers/selected';\nimport {\n    sGetDashboardById,\n    sGetDashboardItems,\n    sDashboardsIsFetching,\n} from '../../reducers/dashboards';\nimport DashboardVerticalOffset from './DashboardVerticalOffset';\nimport DashboardContent from './DashboardContent';\nimport EditBar from '../ControlBar/EditBar';\nimport NoContentMessage from '../../widgets/NoContentMessage';\n\nexport const Content = ({ updateAccess }) => {\n    return updateAccess ? (\n        <DashboardContent editMode={true} />\n    ) : (\n        <NoContentMessage text={i18n.t('No access')} />\n    );\n};\nexport class EditDashboard extends Component {\n    state = {\n        initialized: false,\n    };\n\n    initEditDashboard = () => {\n        if (this.props.dashboard) {\n            this.setState({ initialized: true });\n            this.props.setEditDashboard(this.props.dashboard, this.props.items);\n        }\n    };\n\n    componentDidMount() {\n        this.initEditDashboard();\n    }\n\n    componentDidUpdate() {\n        if (!this.state.initialized) {\n            this.initEditDashboard();\n        }\n    }\n\n    getDashboardContent = () => {\n        const contentNotReady =\n            !this.props.dashboardsLoaded || this.props.id === null;\n\n        return (\n            <div className=\"dashboard-wrapper\">\n                {contentNotReady ? null : (\n                    <Content updateAccess={this.props.updateAccess} />\n                )}\n            </div>\n        );\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <EditBar />\n                <DashboardVerticalOffset editMode={true} />\n                {this.getDashboardContent()}\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const id = sGetSelectedId(state);\n    const dashboard = id ? sGetDashboardById(state, id) : null;\n\n    const updateAccess =\n        dashboard && dashboard.access ? dashboard.access.update : false;\n\n    return {\n        dashboard,\n        id,\n        updateAccess,\n        items: sGetDashboardItems(state),\n        dashboardsLoaded: !sDashboardsIsFetching(state),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        setEditDashboard: acSetEditDashboard,\n    }\n)(EditDashboard);\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\n\nimport { acSetEditNewDashboard } from '../../actions/editDashboard';\nimport DashboardVerticalOffset from './DashboardVerticalOffset';\nimport EditBar from '../ControlBar/EditBar';\nimport DashboardContent from './DashboardContent';\n\nclass NewDashboard extends Component {\n    componentDidMount() {\n        this.props.setNewDashboard();\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <EditBar />\n                <DashboardVerticalOffset editMode={true} />\n                <div className=\"dashboard-wrapper\">\n                    <DashboardContent editMode={true} />\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default connect(\n    null,\n    {\n        setNewDashboard: acSetEditNewDashboard,\n    }\n)(NewDashboard);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { tSelectDashboard } from '../../actions/dashboards';\nimport { sDashboardsIsFetching } from '../../reducers/dashboards';\nimport { EDIT, NEW } from './dashboardModes';\nimport ViewDashboard from './ViewDashboard';\nimport EditDashboard from './EditDashboard';\nimport NewDashboard from './NewDashboard';\n\nclass Dashboard extends Component {\n    setDashboard = () => {\n        if (this.props.dashboardsLoaded) {\n            const id = this.props.match.params.dashboardId || null;\n\n            this.props.selectDashboard(id);\n\n            this.scrollToTop();\n        }\n    };\n\n    scrollToTop = () => {\n        window.scrollTo(0, 0);\n    };\n\n    componentDidMount() {\n        this.setDashboard();\n    }\n\n    componentDidUpdate() {\n        this.setDashboard();\n    }\n\n    render() {\n        switch (this.props.mode) {\n            case EDIT:\n                return <EditDashboard />;\n            case NEW:\n                return <NewDashboard />;\n            default:\n                return <ViewDashboard />;\n        }\n    }\n}\n\nconst mapStateToProps = state => {\n    return { dashboardsLoaded: !sDashboardsIsFetching(state) };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        selectDashboard: tSelectDashboard,\n    }\n)(Dashboard);\n","export const EDIT = 'edit';\nexport const NEW = 'new';\nexport const VIEW = 'view';\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport HeaderBar from '@dhis2/ui/widgets/HeaderBar';\n\nimport { EDIT, VIEW, NEW } from './Dashboard/dashboardModes';\nimport { acReceivedUser } from '../actions/user';\nimport { tFetchDashboards } from '../actions/dashboards';\nimport { tSetControlBarRows } from '../actions/controlBar';\nimport { tSetDimensions } from '../actions/dimensions';\nimport Dashboard from './Dashboard/Dashboard';\nimport SnackbarMessage from './SnackbarMessage/SnackbarMessage';\n\nimport 'typeface-roboto';\nimport './App.css';\n\nexport class App extends Component {\n    componentDidMount() {\n        this.props.setCurrentUser(this.props.d2.currentUser);\n        this.props.fetchDashboards();\n        this.props.setControlBarRows();\n        this.props.setDimensions(this.props.d2);\n    }\n\n    getChildContext() {\n        return { baseUrl: this.props.baseUrl, i18n, d2: this.props.d2 };\n    }\n\n    render() {\n        return (\n            <div className=\"app-wrapper\">\n                <div className=\"dashboard-header-bar\">\n                    <HeaderBar appName={i18n.t('Dashboard')} />\n                </div>\n                <Router>\n                    <Switch>\n                        <Route\n                            exact\n                            path=\"/\"\n                            render={props => (\n                                <Dashboard {...props} mode={VIEW} />\n                            )}\n                        />\n                        <Route\n                            exact\n                            path=\"/new\"\n                            render={props => (\n                                <Dashboard {...props} mode={NEW} />\n                            )}\n                        />\n                        <Route\n                            exact\n                            path=\"/:dashboardId\"\n                            render={props => (\n                                <Dashboard {...props} mode={VIEW} />\n                            )}\n                        />\n                        <Route\n                            exact\n                            path=\"/:dashboardId/edit\"\n                            render={props => (\n                                <Dashboard {...props} mode={EDIT} />\n                            )}\n                        />\n                    </Switch>\n                </Router>\n                <SnackbarMessage />\n            </div>\n        );\n    }\n}\n\nApp.childContextTypes = {\n    baseUrl: PropTypes.string,\n    i18n: PropTypes.object,\n    d2: PropTypes.object,\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentUser: currentUser => dispatch(acReceivedUser(currentUser)),\n        fetchDashboards: () => dispatch(tFetchDashboards()),\n        setControlBarRows: () => dispatch(tSetControlBarRows()),\n        setDimensions: d2 => dispatch(tSetDimensions(d2)),\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(App);\n","import { RECEIVED_USER } from '../reducers/user';\n\nexport const acReceivedUser = value => ({\n    type: RECEIVED_USER,\n    value,\n});\n","//------------------------------------------------------------------------------\n// <auto-generated>\n// This code was generated by d2-i18n-generate.\n//\n// Changes to this file may cause incorrect behavior and will be lost if\n// the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\nimport i18n from '@dhis2/d2-i18n';\nimport moment from 'moment';\nimport 'moment/locale/lo';\nimport 'moment/locale/sv';\nimport 'moment/locale/ur';\nimport 'moment/locale/vi';\n\nimport enTranslations from './en/translations.json';\nimport loTranslations from './lo/translations.json';\nimport svTranslations from './sv/translations.json';\nimport urTranslations from './ur/translations.json';\nimport viTranslations from './vi/translations.json';\n\nconst namespace = 'dashboards-app';\nmoment.locale('en');\n\ni18n.addResources('en', namespace, enTranslations);\ni18n.addResources('lo', namespace, loTranslations);\ni18n.addResources('sv', namespace, svTranslations);\ni18n.addResources('ur', namespace, urTranslations);\ni18n.addResources('vi', namespace, viTranslations);\n\ni18n.setDefaultNamespace(namespace);\ni18n.changeLanguage('en');\n\nexport default i18n;\n","/** @module reducers/selected */\nimport { validateReducer } from '../modules/util';\n\nexport const SET_STYLE = 'SET_STYLE';\n\nexport const DEFAULT_STATE_STYLE = 'LIST';\n\n/**\n * Reducer functions that computes and returns the new state based on the given action\n * @function\n * @param {Object} state The current state\n * @param {Object} action The action to be evaluated\n */\nconst style = (state = DEFAULT_STATE_STYLE, action) => {\n    switch (action.type) {\n        case SET_STYLE:\n            return validateReducer(action.value, DEFAULT_STATE_STYLE);\n        default:\n            return state;\n    }\n};\n\nexport default style;\n\n/**\n * Selectors that point to specific props in the state object\n * @function\n * @param {Object} state\n * @returns {Object}\n */\nexport const sGetStyleRoot = state => state.style;\n","import { combineReducers } from 'redux';\nimport arraySort from 'd2-utilizr/lib/arraySort';\n\nimport dashboards, { sGetDashboardsRoot } from './dashboards';\nimport selected from './selected';\nimport dashboardsFilter, {\n    ownerData,\n    sGetFilterName,\n    sGetFilterOrder,\n    sGetFilterOwner,\n} from './dashboardsFilter';\nimport controlBar from './controlBar';\nimport visualizations from './visualizations';\nimport editDashboard from './editDashboard';\nimport messages from './messages';\nimport user from './user';\nimport snackbar from './snackbar';\nimport itemFilters from './itemFilters';\nimport editItemFilters from './editItemFilters';\nimport style from './style';\nimport dimensions from './dimensions';\nimport settings from './settings';\nimport activeModalDimension from './activeModalDimension';\n\nconst USER = 'system';\n\n// Reducers\n\nexport default combineReducers({\n    dashboards,\n    selected,\n    dashboardsFilter,\n    controlBar,\n    visualizations,\n    messages,\n    user,\n    editDashboard,\n    itemFilters,\n    editItemFilters,\n    style,\n    snackbar,\n    dimensions,\n    settings,\n    activeModalDimension,\n});\n\n// Map constants to data\nconst mapConstToData = {\n    NAME: 'name',\n    ITEMS: 'numberOfItems',\n    CREATED: 'created',\n    OWNER: 'owner',\n};\n\n// Selectors\n\n// Filter dashboards by name\nexport const sFilterDashboardsByName = (dashboards, filter) =>\n    dashboards.filter(d =>\n        d.displayName.toLowerCase().includes(filter.toLowerCase())\n    );\n\n// Filter dashboards by owner, TODO FIXME\nexport const sFilterDashboardsByOwner = (dashboards, filter) => {\n    const ME = ownerData[1]; // TODO\n    const OTHERS = ownerData[2]; // TODO\n\n    switch (filter) {\n        case ME:\n            return dashboards.filter(d => d.owner === USER);\n        case OTHERS:\n            return dashboards.filter(d => d.owner !== USER);\n        default:\n            return dashboards;\n    }\n};\n\n// Filter dashboards by order\nexport const sFilterDashboardsByOrder = (dashboards, filter) => {\n    const filterValues = filter.split(':');\n\n    const key = filterValues[0];\n    const direction = filterValues[1];\n\n    return arraySort(dashboards, direction, mapConstToData[key]);\n};\n\n// Selectors dependency level 2\n\n// Get filtered dashboards\nexport const sGetFilteredDashboards = state => {\n    const dashboards = sGetDashboardsRoot(state);\n\n    const nameFilter = sGetFilterName(state);\n    const ownerFilter = sGetFilterOwner(state);\n    const orderFilter = sGetFilterOrder(state);\n\n    return sFilterDashboardsByOrder(\n        sFilterDashboardsByName(\n            sFilterDashboardsByOwner(dashboards, ownerFilter),\n            nameFilter\n        ),\n        orderFilter\n    );\n};\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\nconst configureStore = () => {\n    const middleware = [thunk];\n\n    // Enable Redux devtools if extension is installed instead of redux-logger\n    const composeEnhancers =\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    if (\n        !window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n        process.env.NODE_ENV !== 'production'\n    ) {\n        middleware.push(createLogger());\n    }\n\n    return createStore(\n        reducer,\n        composeEnhancers(applyMiddleware(...middleware))\n    );\n};\n\nexport default configureStore;\n","import getMuiTheme from 'material-ui/styles/getMuiTheme';\n\nimport { colors } from './colors';\n\nexport const muiTheme = () => {\n    const raisedButton = {\n        primaryColor: colors.royalBlue,\n        disabledColor: colors.paleBlue,\n        disabledTextColor: colors.lightMediumGrey,\n    };\n\n    const theme = getMuiTheme({ raisedButton });\n\n    return theme;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { MuiThemeProvider as V0MuiThemeProvider } from 'material-ui';\nimport { init as d2Init, config, getManifest, getUserSettings } from 'd2';\nimport dhis2theme from '@dhis2/d2-ui-core/theme/mui3.theme';\n\n// temporary workaround until new ui headerbar is ready\nimport 'material-design-icons/iconfont/material-icons.css';\nimport './reset.css';\n\nimport App from './components/App';\nimport './index.css';\nimport i18n from './locales';\nimport configureStore from './configureStore';\nimport { muiTheme } from './modules/theme';\n\nconst v1Theme = () => createMuiTheme({ ...dhis2theme });\n\nconst configI18n = userSettings => {\n    const uiLocale = userSettings.keyUiLocale;\n\n    if (uiLocale && uiLocale !== 'en') {\n        config.i18n.sources.add(`./i18n/i18n_module_${uiLocale}.properties`);\n    }\n\n    config.i18n.sources.add('./i18n/i18n_module_en.properties');\n    i18n.changeLanguage(uiLocale);\n};\n\nconst init = async () => {\n    const manifest = await getManifest('./manifest.webapp');\n\n    // log app info\n    console.info(\n        `Dashboards app, v${manifest.version}, ${\n            manifest.manifest_generated_at\n        }`\n    );\n\n    const isProd = process.env.NODE_ENV === 'production';\n\n    if (\n        !isProd &&\n        (!process.env.REACT_APP_DHIS2_BASE_URL ||\n            !process.env.REACT_APP_DHIS2_AUTHORIZATION)\n    ) {\n        throw new Error(\n            'Missing env variables REACT_APP_DHIS2_BASE_URL and REACT_APP_DHIS2_AUTHORIZATION'\n        );\n    }\n\n    // api config\n    const baseUrl = isProd\n        ? manifest.activities.dhis.href\n        : process.env.REACT_APP_DHIS2_BASE_URL;\n    const authorization = process.env.REACT_APP_DHIS2_AUTHORIZATION;\n\n    config.baseUrl = `${baseUrl}/api/${manifest.dhis2.apiVersion}`;\n    config.headers = isProd ? null : { Authorization: authorization };\n    config.schemas = [\n        'chart',\n        'map',\n        'report',\n        'reportTable',\n        'eventChart',\n        'eventReport',\n        'dashboard',\n        'organisationUnit',\n        'userGroup',\n    ];\n\n    getUserSettings()\n        .then(configI18n)\n        .then(() => d2Init(config))\n        .then(initializedD2 => {\n            ReactDOM.render(\n                <Provider store={configureStore()}>\n                    <MuiThemeProvider theme={v1Theme()}>\n                        <V0MuiThemeProvider muiTheme={muiTheme()}>\n                            <App baseUrl={baseUrl} d2={initializedD2} />\n                        </V0MuiThemeProvider>\n                    </MuiThemeProvider>\n                </Provider>,\n                document.getElementById('root')\n            );\n        });\n};\n\ninit();\n","import isObject from 'lodash/isObject';\n\n// validation\nexport function orNull(param) {\n    return param === undefined ? null : param;\n}\n\nexport function orArray(param) {\n    return Array.isArray(param) ? param : [];\n}\n\nexport function orObject(param) {\n    return isObject(param) ? param : {};\n}\n\n// array\nexport function arrayGetById(array, id) {\n    return array.find(item => item.id === id);\n}\n\n// object\nexport function arrayToIdMap(array) {\n    return array.reduce((obj, item) => {\n        obj[item.id] = item;\n        return obj;\n    }, {});\n}\n\n// date\nexport function getDate() {\n    const y = Math.floor(Math.random() * 3) + 2015;\n    const M = Math.floor(Math.random() * 12) + 1;\n    const d = Math.floor(Math.random() * 28) + 1;\n    // const h = Math.floor(Math.random() * 23) + 1;\n    // const m = Math.floor(Math.random() * 59) + 1;\n    // const s = Math.floor(Math.random() * 59) + 1;\n\n    return new Date(`${y}-${M}-${d}`)\n        .toJSON()\n        .replace('T', ' ')\n        .substr(0, 10);\n}\n\nexport const formatDate = (value, uiLocale) => {\n    if (typeof global.Intl !== 'undefined' && Intl.DateTimeFormat) {\n        const locale = uiLocale || 'en';\n        return new Intl.DateTimeFormat(locale, {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n        }).format(new Date(value));\n    }\n\n    return value.substr(0, 19).replace('T', ' ');\n};\n\n/**\n * Sorts an array of objects based on provided date property\n *\n * @param {Array} items Array of objects\n * @param {String} dateProp Name of the date property to be used for sorting\n * @param {Boolean} ascending Whether to sort ascending or descending\n */\nexport const sortByDate = (items, dateProp, ascending = true) => {\n    const values = Object.values(items);\n\n    values.sort((a, b) => {\n        const aDate = new Date(a[dateProp]);\n        const bDate = new Date(b[dateProp]);\n\n        return ascending ? aDate - bDate : bDate - aDate;\n    });\n\n    return values;\n};\n\n// reducer validator\nexport const validateReducer = (value, defaultValue) =>\n    value === undefined || value === null ? defaultValue : value;\n\nexport const getBaseUrl = d2 => {\n    const api = d2.Api.getApi();\n    const idx = api.baseUrl.indexOf('/api');\n    return idx > -1 ? api.baseUrl.slice(0, idx) : api.baseUrl;\n};\n\nexport const getWithoutId = object => ({\n    ...object,\n    id: undefined,\n});\n"],"sourceRoot":""}